// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "leadctrl17.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "Picture.h"
#include "AnnToolbar.h"
#include "annmenu.h"
#include "LEADScrollInfo.h"
#include "LEADMarkers.h"

/////////////////////////////////////////////////////////////////////////////
// CLeadctrl1

IMPLEMENT_DYNCREATE(CLeadctrl1, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLeadctrl1 properties

BOOL CLeadctrl1::GetAutoSize()
{
	BOOL result;
	GetProperty(0xfffffe0c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoSize(BOOL propVal)
{
	SetProperty(0xfffffe0c, VT_BOOL, propVal);
}

long CLeadctrl1::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

short CLeadctrl1::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

OLE_HANDLE CLeadctrl1::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont CLeadctrl1::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CLeadctrl1::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CLeadctrl1::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CLeadctrl1::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

OLE_COLOR CLeadctrl1::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CLeadctrl1::GetBitmap()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmap(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CLeadctrl1::GetAutoRepaint()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoRepaint(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

short CLeadctrl1::GetPaintEffect()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintEffect(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

BOOL CLeadctrl1::GetBackErase()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackErase(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAutoScroll()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoScroll(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

short CLeadctrl1::GetPaintDither()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintDither(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

BOOL CLeadctrl1::GetEnableProgressEvent()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableProgressEvent(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

short CLeadctrl1::GetBitonalScaling()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitonalScaling(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

BOOL CLeadctrl1::GetPaintWhileLoad()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintWhileLoad(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

float CLeadctrl1::GetBitmapWidth()
{
	float result;
	GetProperty(0xa, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapWidth(float propVal)
{
	SetProperty(0xa, VT_R4, propVal);
}

float CLeadctrl1::GetBitmapHeight()
{
	float result;
	GetProperty(0xb, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapHeight(float propVal)
{
	SetProperty(0xb, VT_R4, propVal);
}

short CLeadctrl1::GetBitmapBits()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapBits(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CLeadctrl1::GetPaintPalette()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintPalette(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

BOOL CLeadctrl1::GetEnableMethodErrors()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableMethodErrors(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

float CLeadctrl1::GetDstLeft()
{
	float result;
	GetProperty(0xf, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstLeft(float propVal)
{
	SetProperty(0xf, VT_R4, propVal);
}

float CLeadctrl1::GetDstTop()
{
	float result;
	GetProperty(0x10, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstTop(float propVal)
{
	SetProperty(0x10, VT_R4, propVal);
}

float CLeadctrl1::GetDstWidth()
{
	float result;
	GetProperty(0x11, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstWidth(float propVal)
{
	SetProperty(0x11, VT_R4, propVal);
}

float CLeadctrl1::GetDstHeight()
{
	float result;
	GetProperty(0x12, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstHeight(float propVal)
{
	SetProperty(0x12, VT_R4, propVal);
}

float CLeadctrl1::GetDstClipLeft()
{
	float result;
	GetProperty(0x13, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstClipLeft(float propVal)
{
	SetProperty(0x13, VT_R4, propVal);
}

float CLeadctrl1::GetDstClipTop()
{
	float result;
	GetProperty(0x14, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstClipTop(float propVal)
{
	SetProperty(0x14, VT_R4, propVal);
}

float CLeadctrl1::GetDstClipWidth()
{
	float result;
	GetProperty(0x15, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstClipWidth(float propVal)
{
	SetProperty(0x15, VT_R4, propVal);
}

float CLeadctrl1::GetDstClipHeight()
{
	float result;
	GetProperty(0x16, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDstClipHeight(float propVal)
{
	SetProperty(0x16, VT_R4, propVal);
}

float CLeadctrl1::GetSrcLeft()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcLeft(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

float CLeadctrl1::GetSrcTop()
{
	float result;
	GetProperty(0x18, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcTop(float propVal)
{
	SetProperty(0x18, VT_R4, propVal);
}

float CLeadctrl1::GetSrcWidth()
{
	float result;
	GetProperty(0x19, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcWidth(float propVal)
{
	SetProperty(0x19, VT_R4, propVal);
}

float CLeadctrl1::GetSrcHeight()
{
	float result;
	GetProperty(0x1a, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcHeight(float propVal)
{
	SetProperty(0x1a, VT_R4, propVal);
}

float CLeadctrl1::GetSrcClipLeft()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcClipLeft(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

float CLeadctrl1::GetSrcClipTop()
{
	float result;
	GetProperty(0x1c, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcClipTop(float propVal)
{
	SetProperty(0x1c, VT_R4, propVal);
}

float CLeadctrl1::GetSrcClipWidth()
{
	float result;
	GetProperty(0x1d, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcClipWidth(float propVal)
{
	SetProperty(0x1d, VT_R4, propVal);
}

float CLeadctrl1::GetSrcClipHeight()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSrcClipHeight(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

short CLeadctrl1::GetBitmapXRes()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapXRes(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

short CLeadctrl1::GetBitmapYRes()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapYRes(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

long CLeadctrl1::GetInfoPage()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoPage(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

float CLeadctrl1::GetInfoWidth()
{
	float result;
	GetProperty(0x22, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoWidth(float propVal)
{
	SetProperty(0x22, VT_R4, propVal);
}

float CLeadctrl1::GetInfoHeight()
{
	float result;
	GetProperty(0x23, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoHeight(float propVal)
{
	SetProperty(0x23, VT_R4, propVal);
}

short CLeadctrl1::GetInfoBits()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoBits(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

short CLeadctrl1::GetInfoFormat()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoFormat(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

long CLeadctrl1::GetInfoSizeDisk()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoSizeDisk(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CLeadctrl1::GetInfoSizeMem()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoSizeMem(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

CString CLeadctrl1::GetInfoCompress()
{
	CString result;
	GetProperty(0x28, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoCompress(LPCTSTR propVal)
{
	SetProperty(0x28, VT_BSTR, propVal);
}

BOOL CLeadctrl1::GetRubberBandVisible()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetRubberBandVisible(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

float CLeadctrl1::GetRubberBandLeft()
{
	float result;
	GetProperty(0x2a, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRubberBandLeft(float propVal)
{
	SetProperty(0x2a, VT_R4, propVal);
}

float CLeadctrl1::GetRubberBandTop()
{
	float result;
	GetProperty(0x2b, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRubberBandTop(float propVal)
{
	SetProperty(0x2b, VT_R4, propVal);
}

float CLeadctrl1::GetRubberBandWidth()
{
	float result;
	GetProperty(0x2c, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRubberBandWidth(float propVal)
{
	SetProperty(0x2c, VT_R4, propVal);
}

float CLeadctrl1::GetRubberBandHeight()
{
	float result;
	GetProperty(0x2d, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRubberBandHeight(float propVal)
{
	SetProperty(0x2d, VT_R4, propVal);
}

short CLeadctrl1::GetPCDRes()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPCDRes(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

short CLeadctrl1::GetMousePointer()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMousePointer(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

CPicture CLeadctrl1::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x30, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLeadctrl1::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x30, VT_DISPATCH, propVal);
}

short CLeadctrl1::GetScaleMode()
{
	short result;
	GetProperty(0x31, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetScaleMode(short propVal)
{
	SetProperty(0x31, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAutoSetRects()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoSetRects(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

float CLeadctrl1::GetScaleLeft()
{
	float result;
	GetProperty(0x33, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetScaleLeft(float propVal)
{
	SetProperty(0x33, VT_R4, propVal);
}

float CLeadctrl1::GetScaleTop()
{
	float result;
	GetProperty(0x34, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetScaleTop(float propVal)
{
	SetProperty(0x34, VT_R4, propVal);
}

float CLeadctrl1::GetScaleWidth()
{
	float result;
	GetProperty(0x35, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetScaleWidth(float propVal)
{
	SetProperty(0x35, VT_R4, propVal);
}

float CLeadctrl1::GetScaleHeight()
{
	float result;
	GetProperty(0x36, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetScaleHeight(float propVal)
{
	SetProperty(0x36, VT_R4, propVal);
}

BOOL CLeadctrl1::GetDbCanAppend()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbCanAppend(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbCanRestart()
{
	BOOL result;
	GetProperty(0x38, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbCanRestart(BOOL propVal)
{
	SetProperty(0x38, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbCanScroll()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbCanScroll(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbCanUpdate()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbCanUpdate(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

long CLeadctrl1::GetDbRecordCount()
{
	long result;
	GetProperty(0x3b, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbRecordCount(long propVal)
{
	SetProperty(0x3b, VT_I4, propVal);
}

BOOL CLeadctrl1::GetDbIsOpen()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbIsOpen(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbIsBOF()
{
	BOOL result;
	GetProperty(0x3d, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbIsBOF(BOOL propVal)
{
	SetProperty(0x3d, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbIsEOF()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbIsEOF(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDbIsDeleted()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbIsDeleted(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

long CLeadctrl1::GetDbCurrentRecord()
{
	long result;
	GetProperty(0x40, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbCurrentRecord(long propVal)
{
	SetProperty(0x40, VT_I4, propVal);
}

short CLeadctrl1::GetDbEditMode()
{
	short result;
	GetProperty(0x41, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbEditMode(short propVal)
{
	SetProperty(0x41, VT_I2, propVal);
}

short CLeadctrl1::GetDbLockingMode()
{
	short result;
	GetProperty(0x42, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbLockingMode(short propVal)
{
	SetProperty(0x42, VT_I2, propVal);
}

short CLeadctrl1::GetDbLoadBits()
{
	short result;
	GetProperty(0x43, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDbLoadBits(short propVal)
{
	SetProperty(0x43, VT_I2, propVal);
}

BOOL CLeadctrl1::GetForePalette()
{
	BOOL result;
	GetProperty(0x44, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetForePalette(BOOL propVal)
{
	SetProperty(0x44, VT_BOOL, propVal);
}

LPUNKNOWN CLeadctrl1::GetDataSource()
{
	LPUNKNOWN result;
	GetProperty(0x45, VT_UNKNOWN, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataSource(LPUNKNOWN propVal)
{
	SetProperty(0x45, VT_UNKNOWN, propVal);
}

CString CLeadctrl1::GetDataField()
{
	CString result;
	GetProperty(0x46, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataField(LPCTSTR propVal)
{
	SetProperty(0x46, VT_BSTR, propVal);
}

short CLeadctrl1::GetDataSaveBits()
{
	short result;
	GetProperty(0x47, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataSaveBits(short propVal)
{
	SetProperty(0x47, VT_I2, propVal);
}

short CLeadctrl1::GetDataSaveFormat()
{
	short result;
	GetProperty(0x48, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataSaveFormat(short propVal)
{
	SetProperty(0x48, VT_I2, propVal);
}

short CLeadctrl1::GetDataSaveQuality()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataSaveQuality(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

short CLeadctrl1::GetDataLoadBits()
{
	short result;
	GetProperty(0x4a, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataLoadBits(short propVal)
{
	SetProperty(0x4a, VT_I2, propVal);
}

BOOL CLeadctrl1::GetDataChanged()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDataChanged(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

long CLeadctrl1::GetPaintROP3()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintROP3(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

short CLeadctrl1::GetIsGrayscale()
{
	short result;
	GetProperty(0x4d, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetIsGrayscale(short propVal)
{
	SetProperty(0x4d, VT_I2, propVal);
}

BOOL CLeadctrl1::GetHasRgn()
{
	BOOL result;
	GetProperty(0x4e, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetHasRgn(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}

float CLeadctrl1::GetRgnLeft()
{
	float result;
	GetProperty(0x4f, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnLeft(float propVal)
{
	SetProperty(0x4f, VT_R4, propVal);
}

float CLeadctrl1::GetRgnTop()
{
	float result;
	GetProperty(0x50, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnTop(float propVal)
{
	SetProperty(0x50, VT_R4, propVal);
}

float CLeadctrl1::GetRgnWidth()
{
	float result;
	GetProperty(0x51, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnWidth(float propVal)
{
	SetProperty(0x51, VT_R4, propVal);
}

float CLeadctrl1::GetRgnHeight()
{
	float result;
	GetProperty(0x52, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnHeight(float propVal)
{
	SetProperty(0x52, VT_R4, propVal);
}

short CLeadctrl1::GetRgnMarkingMode()
{
	short result;
	GetProperty(0x53, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnMarkingMode(short propVal)
{
	SetProperty(0x53, VT_I2, propVal);
}

short CLeadctrl1::GetRgnFrameType()
{
	short result;
	GetProperty(0x54, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnFrameType(short propVal)
{
	SetProperty(0x54, VT_I2, propVal);
}

long CLeadctrl1::GetFloater()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloater(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

BOOL CLeadctrl1::GetFloaterVisible()
{
	BOOL result;
	GetProperty(0x56, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterVisible(BOOL propVal)
{
	SetProperty(0x56, VT_BOOL, propVal);
}

float CLeadctrl1::GetFloaterDstLeft()
{
	float result;
	GetProperty(0x57, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstLeft(float propVal)
{
	SetProperty(0x57, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstTop()
{
	float result;
	GetProperty(0x58, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstTop(float propVal)
{
	SetProperty(0x58, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstWidth()
{
	float result;
	GetProperty(0x59, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstWidth(float propVal)
{
	SetProperty(0x59, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstHeight()
{
	float result;
	GetProperty(0x5a, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstHeight(float propVal)
{
	SetProperty(0x5a, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstClipLeft()
{
	float result;
	GetProperty(0x5b, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstClipLeft(float propVal)
{
	SetProperty(0x5b, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstClipTop()
{
	float result;
	GetProperty(0x5c, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstClipTop(float propVal)
{
	SetProperty(0x5c, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstClipWidth()
{
	float result;
	GetProperty(0x5d, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstClipWidth(float propVal)
{
	SetProperty(0x5d, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterDstClipHeight()
{
	float result;
	GetProperty(0x5e, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterDstClipHeight(float propVal)
{
	SetProperty(0x5e, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterWidth()
{
	float result;
	GetProperty(0x5f, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterWidth(float propVal)
{
	SetProperty(0x5f, VT_R4, propVal);
}

float CLeadctrl1::GetFloaterHeight()
{
	float result;
	GetProperty(0x60, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFloaterHeight(float propVal)
{
	SetProperty(0x60, VT_R4, propVal);
}

short CLeadctrl1::GetPolygonSize()
{
	short result;
	GetProperty(0x61, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPolygonSize(short propVal)
{
	SetProperty(0x61, VT_I2, propVal);
}

short CLeadctrl1::GetAnnUserMode()
{
	short result;
	GetProperty(0x62, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnUserMode(short propVal)
{
	SetProperty(0x62, VT_I2, propVal);
}

short CLeadctrl1::GetAnnTool()
{
	short result;
	GetProperty(0x63, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnTool(short propVal)
{
	SetProperty(0x63, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAnnPasteReady()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnPasteReady(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

long CLeadctrl1::GetAnnContainer()
{
	long result;
	GetProperty(0x65, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnContainer(long propVal)
{
	SetProperty(0x65, VT_I4, propVal);
}

short CLeadctrl1::GetLoadInfoFormat()
{
	short result;
	GetProperty(0x66, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoFormat(short propVal)
{
	SetProperty(0x66, VT_I2, propVal);
}

float CLeadctrl1::GetLoadInfoWidth()
{
	float result;
	GetProperty(0x67, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoWidth(float propVal)
{
	SetProperty(0x67, VT_R4, propVal);
}

float CLeadctrl1::GetLoadInfoHeight()
{
	float result;
	GetProperty(0x68, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoHeight(float propVal)
{
	SetProperty(0x68, VT_R4, propVal);
}

short CLeadctrl1::GetLoadInfoBits()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoBits(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

short CLeadctrl1::GetLoadInfoXRes()
{
	short result;
	GetProperty(0x6a, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoXRes(short propVal)
{
	SetProperty(0x6a, VT_I2, propVal);
}

short CLeadctrl1::GetLoadInfoYRes()
{
	short result;
	GetProperty(0x6b, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoYRes(short propVal)
{
	SetProperty(0x6b, VT_I2, propVal);
}

long CLeadctrl1::GetLoadInfoOffset()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoOffset(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

long CLeadctrl1::GetLoadInfoFlags()
{
	long result;
	GetProperty(0x6d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadInfoFlags(long propVal)
{
	SetProperty(0x6d, VT_I4, propVal);
}

long CLeadctrl1::GetAnnAutomation()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutomation(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

short CLeadctrl1::GetProgressivePasses()
{
	short result;
	GetProperty(0x6f, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetProgressivePasses(short propVal)
{
	SetProperty(0x6f, VT_I2, propVal);
}

short CLeadctrl1::GetBitmapListIndex()
{
	short result;
	GetProperty(0x70, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapListIndex(short propVal)
{
	SetProperty(0x70, VT_I2, propVal);
}

short CLeadctrl1::GetBitmapListCount()
{
	short result;
	GetProperty(0x71, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapListCount(short propVal)
{
	SetProperty(0x71, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAnimationEnable()
{
	BOOL result;
	GetProperty(0x72, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationEnable(BOOL propVal)
{
	SetProperty(0x72, VT_BOOL, propVal);
}

float CLeadctrl1::GetBitmapLeft()
{
	float result;
	GetProperty(0x73, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapLeft(float propVal)
{
	SetProperty(0x73, VT_R4, propVal);
}

float CLeadctrl1::GetBitmapTop()
{
	float result;
	GetProperty(0x74, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapTop(float propVal)
{
	SetProperty(0x74, VT_R4, propVal);
}

long CLeadctrl1::GetBitmapDelay()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapDelay(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

float CLeadctrl1::GetAnimationWidth()
{
	float result;
	GetProperty(0x76, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationWidth(float propVal)
{
	SetProperty(0x76, VT_R4, propVal);
}

float CLeadctrl1::GetAnimationHeight()
{
	float result;
	GetProperty(0x77, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationHeight(float propVal)
{
	SetProperty(0x77, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetAnimationBackColor()
{
	unsigned long result;
	GetProperty(0x78, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationBackColor(unsigned long propVal)
{
	SetProperty(0x78, VT_I4, propVal);
}

short CLeadctrl1::GetAnimationBitsPerPixel()
{
	short result;
	GetProperty(0x79, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationBitsPerPixel(short propVal)
{
	SetProperty(0x79, VT_I2, propVal);
}

BOOL CLeadctrl1::GetBitmapEnableTransparency()
{
	BOOL result;
	GetProperty(0x7a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapEnableTransparency(BOOL propVal)
{
	SetProperty(0x7a, VT_BOOL, propVal);
}

unsigned long CLeadctrl1::GetBitmapTransparentColor()
{
	unsigned long result;
	GetProperty(0x7b, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapTransparentColor(unsigned long propVal)
{
	SetProperty(0x7b, VT_I4, propVal);
}

short CLeadctrl1::GetBitmapDisposalMethod()
{
	short result;
	GetProperty(0x7c, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapDisposalMethod(short propVal)
{
	SetProperty(0x7c, VT_I2, propVal);
}

long CLeadctrl1::GetBitmapList()
{
	long result;
	GetProperty(0x7d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapList(long propVal)
{
	SetProperty(0x7d, VT_I4, propVal);
}

BOOL CLeadctrl1::GetAnnAutoMenuEnable()
{
	BOOL result;
	GetProperty(0x7e, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutoMenuEnable(BOOL propVal)
{
	SetProperty(0x7e, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAutoAnimate()
{
	BOOL result;
	GetProperty(0x7f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoAnimate(BOOL propVal)
{
	SetProperty(0x7f, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAnimationLoop()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationLoop(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

float CLeadctrl1::GetInfoAnimationWidth()
{
	float result;
	GetProperty(0x81, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoAnimationWidth(float propVal)
{
	SetProperty(0x81, VT_R4, propVal);
}

float CLeadctrl1::GetInfoAnimationHeight()
{
	float result;
	GetProperty(0x82, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoAnimationHeight(float propVal)
{
	SetProperty(0x82, VT_R4, propVal);
}

BOOL CLeadctrl1::GetInfoAnimation()
{
	BOOL result;
	GetProperty(0x83, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoAnimation(BOOL propVal)
{
	SetProperty(0x83, VT_BOOL, propVal);
}

CString CLeadctrl1::GetBitmapDataPath()
{
	CString result;
	GetProperty(0x84, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapDataPath(LPCTSTR propVal)
{
	SetProperty(0x84, VT_BSTR, propVal);
}

short CLeadctrl1::GetPaintSizeMode()
{
	short result;
	GetProperty(0x85, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintSizeMode(short propVal)
{
	SetProperty(0x85, VT_I2, propVal);
}

float CLeadctrl1::GetPaintZoomFactor()
{
	float result;
	GetProperty(0x86, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintZoomFactor(float propVal)
{
	SetProperty(0x86, VT_R4, propVal);
}

short CLeadctrl1::GetAutoAnimationLoop()
{
	short result;
	GetProperty(0x87, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoAnimationLoop(short propVal)
{
	SetProperty(0x87, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAnnAutoDrawEnable()
{
	BOOL result;
	GetProperty(0x88, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutoDrawEnable(BOOL propVal)
{
	SetProperty(0x88, VT_BOOL, propVal);
}

short CLeadctrl1::GetLoadResolutionCount()
{
	short result;
	GetProperty(0x89, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadResolutionCount(short propVal)
{
	SetProperty(0x89, VT_I2, propVal);
}

BOOL CLeadctrl1::GetOLEDropAllowed()
{
	BOOL result;
	GetProperty(0x8a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetOLEDropAllowed(BOOL propVal)
{
	SetProperty(0x8a, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAutoRubberBand()
{
	BOOL result;
	GetProperty(0x8b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoRubberBand(BOOL propVal)
{
	SetProperty(0x8b, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetSaveInterlaced()
{
	BOOL result;
	GetProperty(0x8c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveInterlaced(BOOL propVal)
{
	SetProperty(0x8c, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetPaintSizeUseDPI()
{
	BOOL result;
	GetProperty(0x8d, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintSizeUseDPI(BOOL propVal)
{
	SetProperty(0x8d, VT_BOOL, propVal);
}

CString CLeadctrl1::GetAnnDataPath()
{
	CString result;
	GetProperty(0x8e, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnDataPath(LPCTSTR propVal)
{
	SetProperty(0x8e, VT_BSTR, propVal);
}

BOOL CLeadctrl1::GetDrawPersistence()
{
	BOOL result;
	GetProperty(0x8f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawPersistence(BOOL propVal)
{
	SetProperty(0x8f, VT_BOOL, propVal);
}

short CLeadctrl1::GetDrawMode()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawMode(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetDrawPenColor()
{
	unsigned long result;
	GetProperty(0x91, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawPenColor(unsigned long propVal)
{
	SetProperty(0x91, VT_I4, propVal);
}

short CLeadctrl1::GetDrawPenWidth()
{
	short result;
	GetProperty(0x92, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawPenWidth(short propVal)
{
	SetProperty(0x92, VT_I2, propVal);
}

short CLeadctrl1::GetDrawPenStyle()
{
	short result;
	GetProperty(0x93, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawPenStyle(short propVal)
{
	SetProperty(0x93, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetDrawFillColor()
{
	unsigned long result;
	GetProperty(0x94, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawFillColor(unsigned long propVal)
{
	SetProperty(0x94, VT_I4, propVal);
}

short CLeadctrl1::GetDrawFillStyle()
{
	short result;
	GetProperty(0x95, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawFillStyle(short propVal)
{
	SetProperty(0x95, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetDrawFontColor()
{
	unsigned long result;
	GetProperty(0x96, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDrawFontColor(unsigned long propVal)
{
	SetProperty(0x96, VT_I4, propVal);
}

short CLeadctrl1::GetPaintContrast()
{
	short result;
	GetProperty(0x97, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintContrast(short propVal)
{
	SetProperty(0x97, VT_I2, propVal);
}

short CLeadctrl1::GetPaintGamma()
{
	short result;
	GetProperty(0x98, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintGamma(short propVal)
{
	SetProperty(0x98, VT_I2, propVal);
}

short CLeadctrl1::GetPaintIntensity()
{
	short result;
	GetProperty(0x99, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintIntensity(short propVal)
{
	SetProperty(0x99, VT_I2, propVal);
}

BOOL CLeadctrl1::GetLoadUseViewPerspective()
{
	BOOL result;
	GetProperty(0x9a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadUseViewPerspective(BOOL propVal)
{
	SetProperty(0x9a, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAnnAutoRotate()
{
	BOOL result;
	GetProperty(0x9b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutoRotate(BOOL propVal)
{
	SetProperty(0x9b, VT_BOOL, propVal);
}

short CLeadctrl1::GetTransitionStyle()
{
	short result;
	GetProperty(0x9c, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetTransitionStyle(short propVal)
{
	SetProperty(0x9c, VT_I2, propVal);
}

short CLeadctrl1::GetTransitionEffect()
{
	short result;
	GetProperty(0x9d, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetTransitionEffect(short propVal)
{
	SetProperty(0x9d, VT_I2, propVal);
}

short CLeadctrl1::GetGradientStyle()
{
	short result;
	GetProperty(0x9e, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetGradientStyle(short propVal)
{
	SetProperty(0x9e, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetGradientStartColor()
{
	unsigned long result;
	GetProperty(0x9f, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetGradientStartColor(unsigned long propVal)
{
	SetProperty(0x9f, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetGradientEndColor()
{
	unsigned long result;
	GetProperty(0xa0, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetGradientEndColor(unsigned long propVal)
{
	SetProperty(0xa0, VT_I4, propVal);
}

short CLeadctrl1::GetGradientSteps()
{
	short result;
	GetProperty(0xa1, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetGradientSteps(short propVal)
{
	SetProperty(0xa1, VT_I2, propVal);
}

short CLeadctrl1::GetPatternStyle()
{
	short result;
	GetProperty(0xa2, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPatternStyle(short propVal)
{
	SetProperty(0xa2, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetPatternForeColor()
{
	unsigned long result;
	GetProperty(0xa3, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPatternForeColor(unsigned long propVal)
{
	SetProperty(0xa3, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetPatternBackColor()
{
	unsigned long result;
	GetProperty(0xa4, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPatternBackColor(unsigned long propVal)
{
	SetProperty(0xa4, VT_I4, propVal);
}

short CLeadctrl1::GetPaintPass()
{
	short result;
	GetProperty(0xa5, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintPass(short propVal)
{
	SetProperty(0xa5, VT_I2, propVal);
}

short CLeadctrl1::GetPaintMaxPasses()
{
	short result;
	GetProperty(0xa6, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintMaxPasses(short propVal)
{
	SetProperty(0xa6, VT_I2, propVal);
}

short CLeadctrl1::GetEffectGrain()
{
	short result;
	GetProperty(0xa7, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetEffectGrain(short propVal)
{
	SetProperty(0xa7, VT_I2, propVal);
}

short CLeadctrl1::GetEffectDelay()
{
	short result;
	GetProperty(0xa8, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetEffectDelay(short propVal)
{
	SetProperty(0xa8, VT_I2, propVal);
}

short CLeadctrl1::GetWandSize()
{
	short result;
	GetProperty(0xa9, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetWandSize(short propVal)
{
	SetProperty(0xa9, VT_I2, propVal);
}

unsigned long CLeadctrl1::GetWandColor()
{
	unsigned long result;
	GetProperty(0xaa, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetWandColor(unsigned long propVal)
{
	SetProperty(0xaa, VT_I4, propVal);
}

BOOL CLeadctrl1::GetPaintRgnOnly()
{
	BOOL result;
	GetProperty(0xab, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintRgnOnly(BOOL propVal)
{
	SetProperty(0xab, VT_BOOL, propVal);
}

float CLeadctrl1::GetShapeLeft()
{
	float result;
	GetProperty(0xac, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeLeft(float propVal)
{
	SetProperty(0xac, VT_R4, propVal);
}

float CLeadctrl1::GetShapeTop()
{
	float result;
	GetProperty(0xad, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeTop(float propVal)
{
	SetProperty(0xad, VT_R4, propVal);
}

float CLeadctrl1::GetShapeWidth()
{
	float result;
	GetProperty(0xae, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeWidth(float propVal)
{
	SetProperty(0xae, VT_R4, propVal);
}

float CLeadctrl1::GetShapeHeight()
{
	float result;
	GetProperty(0xaf, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeHeight(float propVal)
{
	SetProperty(0xaf, VT_R4, propVal);
}

float CLeadctrl1::GetShapeBorderThickness()
{
	float result;
	GetProperty(0xb0, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeBorderThickness(float propVal)
{
	SetProperty(0xb0, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetShapeBorderColor()
{
	unsigned long result;
	GetProperty(0xb1, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeBorderColor(unsigned long propVal)
{
	SetProperty(0xb1, VT_I4, propVal);
}

short CLeadctrl1::GetShapeInnerBandStyle()
{
	short result;
	GetProperty(0xb2, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeInnerBandStyle(short propVal)
{
	SetProperty(0xb2, VT_I2, propVal);
}

float CLeadctrl1::GetShapeInnerBandThickness()
{
	float result;
	GetProperty(0xb3, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeInnerBandThickness(float propVal)
{
	SetProperty(0xb3, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetShapeInnerBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xb4, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeInnerBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xb4, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetShapeInnerBandShadowColor()
{
	unsigned long result;
	GetProperty(0xb5, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeInnerBandShadowColor(unsigned long propVal)
{
	SetProperty(0xb5, VT_I4, propVal);
}

short CLeadctrl1::GetShapeOuterBandStyle()
{
	short result;
	GetProperty(0xb6, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeOuterBandStyle(short propVal)
{
	SetProperty(0xb6, VT_I2, propVal);
}

float CLeadctrl1::GetShapeOuterBandThickness()
{
	float result;
	GetProperty(0xb7, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeOuterBandThickness(float propVal)
{
	SetProperty(0xb7, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetShapeOuterBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xb8, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeOuterBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xb8, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetShapeOuterBandShadowColor()
{
	unsigned long result;
	GetProperty(0xb9, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeOuterBandShadowColor(unsigned long propVal)
{
	SetProperty(0xb9, VT_I4, propVal);
}

short CLeadctrl1::GetShapeBackgroundStyle()
{
	short result;
	GetProperty(0xba, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeBackgroundStyle(short propVal)
{
	SetProperty(0xba, VT_I2, propVal);
}

float CLeadctrl1::GetBackgroundImageLeft()
{
	float result;
	GetProperty(0xbb, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackgroundImageLeft(float propVal)
{
	SetProperty(0xbb, VT_R4, propVal);
}

float CLeadctrl1::GetBackgroundImageTop()
{
	float result;
	GetProperty(0xbc, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackgroundImageTop(float propVal)
{
	SetProperty(0xbc, VT_R4, propVal);
}

float CLeadctrl1::GetBackgroundImageWidth()
{
	float result;
	GetProperty(0xbd, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackgroundImageWidth(float propVal)
{
	SetProperty(0xbd, VT_R4, propVal);
}

float CLeadctrl1::GetBackgroundImageHeight()
{
	float result;
	GetProperty(0xbe, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBackgroundImageHeight(float propVal)
{
	SetProperty(0xbe, VT_R4, propVal);
}

float CLeadctrl1::GetShadowXDepth()
{
	float result;
	GetProperty(0xbf, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShadowXDepth(float propVal)
{
	SetProperty(0xbf, VT_R4, propVal);
}

float CLeadctrl1::GetShadowYDepth()
{
	float result;
	GetProperty(0xc0, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShadowYDepth(float propVal)
{
	SetProperty(0xc0, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetShadowColor()
{
	unsigned long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetShadowColor(unsigned long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetTextHiliteColor()
{
	unsigned long result;
	GetProperty(0xc2, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextHiliteColor(unsigned long propVal)
{
	SetProperty(0xc2, VT_I4, propVal);
}

float CLeadctrl1::GetTextLeft()
{
	float result;
	GetProperty(0xc3, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextLeft(float propVal)
{
	SetProperty(0xc3, VT_R4, propVal);
}

float CLeadctrl1::GetTextTop()
{
	float result;
	GetProperty(0xc4, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextTop(float propVal)
{
	SetProperty(0xc4, VT_R4, propVal);
}

float CLeadctrl1::GetTextWidth()
{
	float result;
	GetProperty(0xc5, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextWidth(float propVal)
{
	SetProperty(0xc5, VT_R4, propVal);
}

float CLeadctrl1::GetTextHeight()
{
	float result;
	GetProperty(0xc6, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextHeight(float propVal)
{
	SetProperty(0xc6, VT_R4, propVal);
}

short CLeadctrl1::GetTextAngle()
{
	short result;
	GetProperty(0xc7, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextAngle(short propVal)
{
	SetProperty(0xc7, VT_I2, propVal);
}

short CLeadctrl1::GetTextStyle()
{
	short result;
	GetProperty(0xc8, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextStyle(short propVal)
{
	SetProperty(0xc8, VT_I2, propVal);
}

short CLeadctrl1::GetShapeBorderStyle()
{
	short result;
	GetProperty(0xc9, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetShapeBorderStyle(short propVal)
{
	SetProperty(0xc9, VT_I2, propVal);
}

float CLeadctrl1::GetFrameThickness()
{
	float result;
	GetProperty(0xca, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameThickness(float propVal)
{
	SetProperty(0xca, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetFrameColor()
{
	unsigned long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameColor(unsigned long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

short CLeadctrl1::GetFrameInnerStyle()
{
	short result;
	GetProperty(0xcc, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameInnerStyle(short propVal)
{
	SetProperty(0xcc, VT_I2, propVal);
}

float CLeadctrl1::GetFrameInnerThickness()
{
	float result;
	GetProperty(0xcd, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameInnerThickness(float propVal)
{
	SetProperty(0xcd, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetFrameInnerHiliteColor()
{
	unsigned long result;
	GetProperty(0xce, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameInnerHiliteColor(unsigned long propVal)
{
	SetProperty(0xce, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetFrameInnerShadowColor()
{
	unsigned long result;
	GetProperty(0xcf, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameInnerShadowColor(unsigned long propVal)
{
	SetProperty(0xcf, VT_I4, propVal);
}

short CLeadctrl1::GetFrameOuterStyle()
{
	short result;
	GetProperty(0xd0, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameOuterStyle(short propVal)
{
	SetProperty(0xd0, VT_I2, propVal);
}

float CLeadctrl1::GetFrameOuterThickness()
{
	float result;
	GetProperty(0xd1, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameOuterThickness(float propVal)
{
	SetProperty(0xd1, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetFrameOuterHiliteColor()
{
	unsigned long result;
	GetProperty(0xd2, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameOuterHiliteColor(unsigned long propVal)
{
	SetProperty(0xd2, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetFrameOuterShadowColor()
{
	unsigned long result;
	GetProperty(0xd3, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFrameOuterShadowColor(unsigned long propVal)
{
	SetProperty(0xd3, VT_I4, propVal);
}

short CLeadctrl1::GetTextAlign()
{
	short result;
	GetProperty(0xd4, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextAlign(short propVal)
{
	SetProperty(0xd4, VT_I2, propVal);
}

BOOL CLeadctrl1::GetTextWordWrap()
{
	BOOL result;
	GetProperty(0xd5, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetTextWordWrap(BOOL propVal)
{
	SetProperty(0xd5, VT_BOOL, propVal);
}

long CLeadctrl1::GetBitmapAlpha()
{
	long result;
	GetProperty(0xd6, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapAlpha(long propVal)
{
	SetProperty(0xd6, VT_I4, propVal);
}

short CLeadctrl1::GetPaintNotificationDelay()
{
	short result;
	GetProperty(0xd7, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintNotificationDelay(short propVal)
{
	SetProperty(0xd7, VT_I2, propVal);
}

BOOL CLeadctrl1::GetTransparent()
{
	BOOL result;
	GetProperty(0xd8, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetTransparent(BOOL propVal)
{
	SetProperty(0xd8, VT_BOOL, propVal);
}

short CLeadctrl1::GetLevelLowBit()
{
	short result;
	GetProperty(0xd9, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLevelLowBit(short propVal)
{
	SetProperty(0xd9, VT_I2, propVal);
}

short CLeadctrl1::GetLevelHighBit()
{
	short result;
	GetProperty(0xda, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLevelHighBit(short propVal)
{
	SetProperty(0xda, VT_I2, propVal);
}

long CLeadctrl1::GetLevelLUTLength()
{
	long result;
	GetProperty(0xdb, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLevelLUTLength(long propVal)
{
	SetProperty(0xdb, VT_I4, propVal);
}

long CLeadctrl1::GetMinVal()
{
	long result;
	GetProperty(0xdc, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetMinVal(long propVal)
{
	SetProperty(0xdc, VT_I4, propVal);
}

long CLeadctrl1::GetMaxVal()
{
	long result;
	GetProperty(0xdd, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetMaxVal(long propVal)
{
	SetProperty(0xdd, VT_I4, propVal);
}

short CLeadctrl1::GetMinBit()
{
	short result;
	GetProperty(0xde, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMinBit(short propVal)
{
	SetProperty(0xde, VT_I2, propVal);
}

short CLeadctrl1::GetMaxBit()
{
	short result;
	GetProperty(0xdf, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMaxBit(short propVal)
{
	SetProperty(0xdf, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAnnShowLockedIcon()
{
	BOOL result;
	GetProperty(0xe0, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnShowLockedIcon(BOOL propVal)
{
	SetProperty(0xe0, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAnnHyperlinkMenuEnable()
{
	BOOL result;
	GetProperty(0xe1, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnHyperlinkMenuEnable(BOOL propVal)
{
	SetProperty(0xe1, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetEnableZoomInRect()
{
	BOOL result;
	GetProperty(0xe2, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableZoomInRect(BOOL propVal)
{
	SetProperty(0xe2, VT_BOOL, propVal);
}

float CLeadctrl1::GetPanWinX()
{
	float result;
	GetProperty(0xe3, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinX(float propVal)
{
	SetProperty(0xe3, VT_R4, propVal);
}

float CLeadctrl1::GetPanWinY()
{
	float result;
	GetProperty(0xe4, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinY(float propVal)
{
	SetProperty(0xe4, VT_R4, propVal);
}

float CLeadctrl1::GetPanWinWidth()
{
	float result;
	GetProperty(0xe5, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinWidth(float propVal)
{
	SetProperty(0xe5, VT_R4, propVal);
}

float CLeadctrl1::GetPanWinHeight()
{
	float result;
	GetProperty(0xe6, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinHeight(float propVal)
{
	SetProperty(0xe6, VT_R4, propVal);
}

unsigned long CLeadctrl1::GetPanWinRectColor()
{
	unsigned long result;
	GetProperty(0xe7, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinRectColor(unsigned long propVal)
{
	SetProperty(0xe7, VT_I4, propVal);
}

CString CLeadctrl1::GetPanWinTitle()
{
	CString result;
	GetProperty(0xe8, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinTitle(LPCTSTR propVal)
{
	SetProperty(0xe8, VT_BSTR, propVal);
}

BOOL CLeadctrl1::GetPanWinSysMenu()
{
	BOOL result;
	GetProperty(0xe9, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinSysMenu(BOOL propVal)
{
	SetProperty(0xe9, VT_BOOL, propVal);
}

short CLeadctrl1::GetPanWinPaintPalette()
{
	short result;
	GetProperty(0xea, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinPaintPalette(short propVal)
{
	SetProperty(0xea, VT_I2, propVal);
}

short CLeadctrl1::GetPanWinBitonalScaling()
{
	short result;
	GetProperty(0xeb, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinBitonalScaling(short propVal)
{
	SetProperty(0xeb, VT_I2, propVal);
}

short CLeadctrl1::GetPanWinPaintDither()
{
	short result;
	GetProperty(0xec, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinPaintDither(short propVal)
{
	SetProperty(0xec, VT_I2, propVal);
}

CPicture CLeadctrl1::GetPanWinIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0xed, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLeadctrl1::SetPanWinIcon(LPDISPATCH propVal)
{
	SetProperty(0xed, VT_DISPATCH, propVal);
}

short CLeadctrl1::GetPanWinPointer()
{
	short result;
	GetProperty(0xee, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinPointer(short propVal)
{
	SetProperty(0xee, VT_I2, propVal);
}

CPicture CLeadctrl1::GetPanWinCursor()
{
	LPDISPATCH pDispatch;
	GetProperty(0xef, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLeadctrl1::SetPanWinCursor(LPDISPATCH propVal)
{
	SetProperty(0xef, VT_DISPATCH, propVal);
}

long CLeadctrl1::GetInfoTotalPages()
{
	long result;
	GetProperty(0xf0, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoTotalPages(long propVal)
{
	SetProperty(0xf0, VT_I4, propVal);
}

long CLeadctrl1::GetSavePage()
{
	long result;
	GetProperty(0xf1, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSavePage(long propVal)
{
	SetProperty(0xf1, VT_I4, propVal);
}

long CLeadctrl1::GetAnimationBitmap()
{
	long result;
	GetProperty(0xf2, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationBitmap(long propVal)
{
	SetProperty(0xf2, VT_I4, propVal);
}

BOOL CLeadctrl1::GetOLEDropAutoLoad()
{
	BOOL result;
	GetProperty(0xf3, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetOLEDropAutoLoad(BOOL propVal)
{
	SetProperty(0xf3, VT_BOOL, propVal);
}

long CLeadctrl1::GetWMFResolution()
{
	long result;
	GetProperty(0xf4, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetWMFResolution(long propVal)
{
	SetProperty(0xf4, VT_I4, propVal);
}

long CLeadctrl1::GetInfoXRes()
{
	long result;
	GetProperty(0xf5, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoXRes(long propVal)
{
	SetProperty(0xf5, VT_I4, propVal);
}

long CLeadctrl1::GetInfoYRes()
{
	long result;
	GetProperty(0xf6, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoYRes(long propVal)
{
	SetProperty(0xf6, VT_I4, propVal);
}

BOOL CLeadctrl1::GetRefBitmap()
{
	BOOL result;
	GetProperty(0xf7, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetRefBitmap(BOOL propVal)
{
	SetProperty(0xf7, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetWindowLevelBitmap()
{
	BOOL result;
	GetProperty(0xf8, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetWindowLevelBitmap(BOOL propVal)
{
	SetProperty(0xf8, VT_BOOL, propVal);
}

short CLeadctrl1::GetSaveResolutionCount()
{
	short result;
	GetProperty(0xf9, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveResolutionCount(short propVal)
{
	SetProperty(0xf9, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAutoPan()
{
	BOOL result;
	GetProperty(0xfa, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAutoPan(BOOL propVal)
{
	SetProperty(0xfa, VT_BOOL, propVal);
}

float CLeadctrl1::GetPrinterScaleWidth()
{
	float result;
	GetProperty(0xfb, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPrinterScaleWidth(float propVal)
{
	SetProperty(0xfb, VT_R4, propVal);
}

float CLeadctrl1::GetPrinterScaleHeight()
{
	float result;
	GetProperty(0xfc, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPrinterScaleHeight(float propVal)
{
	SetProperty(0xfc, VT_R4, propVal);
}

CAnnToolbar CLeadctrl1::GetAnnToolbar()
{
	LPDISPATCH pDispatch;
	GetProperty(0xfd, VT_DISPATCH, (void*)&pDispatch);
	return CAnnToolbar(pDispatch);
}

void CLeadctrl1::SetAnnToolbar(LPDISPATCH propVal)
{
	SetProperty(0xfd, VT_DISPATCH, propVal);
}

BOOL CLeadctrl1::GetSaveLSB()
{
	BOOL result;
	GetProperty(0xff, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveLSB(BOOL propVal)
{
	SetProperty(0xff, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetSavePageNumberTag()
{
	BOOL result;
	GetProperty(0x100, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSavePageNumberTag(BOOL propVal)
{
	SetProperty(0x100, VT_BOOL, propVal);
}

short CLeadctrl1::GetLoadCompressed()
{
	short result;
	GetProperty(0x101, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadCompressed(short propVal)
{
	SetProperty(0x101, VT_I2, propVal);
}

short CLeadctrl1::GetPaintScaling()
{
	short result;
	GetProperty(0x102, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPaintScaling(short propVal)
{
	SetProperty(0x102, VT_I2, propVal);
}

short CLeadctrl1::GetPanWinPaintScaling()
{
	short result;
	GetProperty(0x103, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPanWinPaintScaling(short propVal)
{
	SetProperty(0x103, VT_I2, propVal);
}

BOOL CLeadctrl1::GetEnablePaint()
{
	BOOL result;
	GetProperty(0x104, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnablePaint(BOOL propVal)
{
	SetProperty(0x104, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetRefBitmapList()
{
	BOOL result;
	GetProperty(0x105, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetRefBitmapList(BOOL propVal)
{
	SetProperty(0x105, VT_BOOL, propVal);
}

short CLeadctrl1::GetMagGlassMaskCount()
{
	short result;
	GetProperty(0x106, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMagGlassMaskCount(short propVal)
{
	SetProperty(0x106, VT_I2, propVal);
}

short CLeadctrl1::GetPreferredLoadFormat()
{
	short result;
	GetProperty(0x107, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetPreferredLoadFormat(short propVal)
{
	SetProperty(0x107, VT_I2, propVal);
}

long CLeadctrl1::GetDocCleanSuccess()
{
	long result;
	GetProperty(0x108, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDocCleanSuccess(long propVal)
{
	SetProperty(0x108, VT_I4, propVal);
}

long CLeadctrl1::GetHDocCleanRgn()
{
	long result;
	GetProperty(0x109, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetHDocCleanRgn(long propVal)
{
	SetProperty(0x109, VT_I4, propVal);
}

long CLeadctrl1::GetDocCleanBitmap()
{
	long result;
	GetProperty(0x10a, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetDocCleanBitmap(long propVal)
{
	SetProperty(0x10a, VT_I4, propVal);
}

unsigned long CLeadctrl1::GetRgnFrameColor()
{
	unsigned long result;
	GetProperty(0x10b, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRgnFrameColor(unsigned long propVal)
{
	SetProperty(0x10b, VT_I4, propVal);
}

long CLeadctrl1::GetInfoIFD()
{
	long result;
	GetProperty(0x10c, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoIFD(long propVal)
{
	SetProperty(0x10c, VT_I4, propVal);
}

long CLeadctrl1::GetLoadIFD()
{
	long result;
	GetProperty(0x10d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadIFD(long propVal)
{
	SetProperty(0x10d, VT_I4, propVal);
}

long CLeadctrl1::GetSaveIFD()
{
	long result;
	GetProperty(0x10e, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveIFD(long propVal)
{
	SetProperty(0x10e, VT_I4, propVal);
}

BOOL CLeadctrl1::GetAnnUndoEnable()
{
	BOOL result;
	GetProperty(0x10f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnUndoEnable(BOOL propVal)
{
	SetProperty(0x10f, VT_BOOL, propVal);
}

short CLeadctrl1::GetAnnUndoDepth()
{
	short result;
	GetProperty(0x110, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnUndoDepth(short propVal)
{
	SetProperty(0x110, VT_I2, propVal);
}

short CLeadctrl1::GetAnnAutoDialogFontSize()
{
	short result;
	GetProperty(0x111, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutoDialogFontSize(short propVal)
{
	SetProperty(0x111, VT_I2, propVal);
}

short CLeadctrl1::GetMagGlassFlags()
{
	short result;
	GetProperty(0x112, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMagGlassFlags(short propVal)
{
	SetProperty(0x112, VT_I2, propVal);
}

BOOL CLeadctrl1::GetEnableMagGlassEvent()
{
	BOOL result;
	GetProperty(0x113, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableMagGlassEvent(BOOL propVal)
{
	SetProperty(0x113, VT_BOOL, propVal);
}

short CLeadctrl1::GetInfoViewPerspective()
{
	short result;
	GetProperty(0x114, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoViewPerspective(short propVal)
{
	SetProperty(0x114, VT_I2, propVal);
}

BOOL CLeadctrl1::GetAnnAutoResize()
{
	BOOL result;
	GetProperty(0x115, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnAutoResize(BOOL propVal)
{
	SetProperty(0x115, VT_BOOL, propVal);
}

float CLeadctrl1::GetConvertX()
{
	float result;
	GetProperty(0x116, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetConvertX(float propVal)
{
	SetProperty(0x116, VT_R4, propVal);
}

float CLeadctrl1::GetConvertY()
{
	float result;
	GetProperty(0x117, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetConvertY(float propVal)
{
	SetProperty(0x117, VT_R4, propVal);
}

long CLeadctrl1::GetPDFXResolution()
{
	long result;
	GetProperty(0x118, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFXResolution(long propVal)
{
	SetProperty(0x118, VT_I4, propVal);
}

long CLeadctrl1::GetPDFYResolution()
{
	long result;
	GetProperty(0x119, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFYResolution(long propVal)
{
	SetProperty(0x119, VT_I4, propVal);
}

long CLeadctrl1::GetPDFDisplayDepth()
{
	long result;
	GetProperty(0x11a, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFDisplayDepth(long propVal)
{
	SetProperty(0x11a, VT_I4, propVal);
}

long CLeadctrl1::GetPDFTextAlpha()
{
	long result;
	GetProperty(0x11b, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFTextAlpha(long propVal)
{
	SetProperty(0x11b, VT_I4, propVal);
}

long CLeadctrl1::GetPDFGraphicsAlpha()
{
	long result;
	GetProperty(0x11c, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFGraphicsAlpha(long propVal)
{
	SetProperty(0x11c, VT_I4, propVal);
}

BOOL CLeadctrl1::GetPDFUseLibFonts()
{
	BOOL result;
	GetProperty(0x11d, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFUseLibFonts(BOOL propVal)
{
	SetProperty(0x11d, VT_BOOL, propVal);
}

short CLeadctrl1::GetRasterizeViewportWidth()
{
	short result;
	GetProperty(0x11e, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetRasterizeViewportWidth(short propVal)
{
	SetProperty(0x11e, VT_I2, propVal);
}

short CLeadctrl1::GetRasterizeViewportHeight()
{
	short result;
	GetProperty(0x11f, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetRasterizeViewportHeight(short propVal)
{
	SetProperty(0x11f, VT_I2, propVal);
}

short CLeadctrl1::GetRasterizeViewMode()
{
	short result;
	GetProperty(0x120, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetRasterizeViewMode(short propVal)
{
	SetProperty(0x120, VT_I2, propVal);
}

long CLeadctrl1::GetHistogramGrayTableSize()
{
	long result;
	GetProperty(0x121, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetHistogramGrayTableSize(long propVal)
{
	SetProperty(0x121, VT_I4, propVal);
}

BOOL CLeadctrl1::GetSavePad4()
{
	BOOL result;
	GetProperty(0x122, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSavePad4(BOOL propVal)
{
	SetProperty(0x122, VT_BOOL, propVal);
}

long CLeadctrl1::GetFileSizeWritten()
{
	long result;
	GetProperty(0x123, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetFileSizeWritten(long propVal)
{
	SetProperty(0x123, VT_I4, propVal);
}

BOOL CLeadctrl1::GetInfoHasAlpha()
{
	BOOL result;
	GetProperty(0x124, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoHasAlpha(BOOL propVal)
{
	SetProperty(0x124, VT_BOOL, propVal);
}

CString CLeadctrl1::GetPDFPassword()
{
	CString result;
	GetProperty(0x125, VT_BSTR, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFPassword(LPCTSTR propVal)
{
	SetProperty(0x125, VT_BSTR, propVal);
}

BOOL CLeadctrl1::GetEnableKeyboard()
{
	BOOL result;
	GetProperty(0x126, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableKeyboard(BOOL propVal)
{
	SetProperty(0x126, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetEnableScroll()
{
	BOOL result;
	GetProperty(0x127, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableScroll(BOOL propVal)
{
	SetProperty(0x127, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KUseColorTransform()
{
	BOOL result;
	GetProperty(0x128, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KUseColorTransform(BOOL propVal)
{
	SetProperty(0x128, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KDerivedQuantization()
{
	BOOL result;
	GetProperty(0x129, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KDerivedQuantization(BOOL propVal)
{
	SetProperty(0x129, VT_BOOL, propVal);
}

short CLeadctrl1::GetJ2KCompressionControl()
{
	short result;
	GetProperty(0x12a, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCompressionControl(short propVal)
{
	SetProperty(0x12a, VT_I2, propVal);
}

float CLeadctrl1::GetJ2KCompressionRatio()
{
	float result;
	GetProperty(0x12b, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCompressionRatio(float propVal)
{
	SetProperty(0x12b, VT_R4, propVal);
}

long CLeadctrl1::GetJ2KTargetFileSize()
{
	long result;
	GetProperty(0x12c, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KTargetFileSize(long propVal)
{
	SetProperty(0x12c, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KXOsiz()
{
	long result;
	GetProperty(0x12d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KXOsiz(long propVal)
{
	SetProperty(0x12d, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KYOsiz()
{
	long result;
	GetProperty(0x12e, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KYOsiz(long propVal)
{
	SetProperty(0x12e, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KXTsiz()
{
	long result;
	GetProperty(0x12f, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KXTsiz(long propVal)
{
	SetProperty(0x12f, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KYTsiz()
{
	long result;
	GetProperty(0x130, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KYTsiz(long propVal)
{
	SetProperty(0x130, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KXTOsiz()
{
	long result;
	GetProperty(0x131, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KXTOsiz(long propVal)
{
	SetProperty(0x131, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KYTOsiz()
{
	long result;
	GetProperty(0x132, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KYTOsiz(long propVal)
{
	SetProperty(0x132, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KDecompLevel()
{
	long result;
	GetProperty(0x133, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KDecompLevel(long propVal)
{
	SetProperty(0x133, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KProgressOrder()
{
	long result;
	GetProperty(0x134, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KProgressOrder(long propVal)
{
	SetProperty(0x134, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KCodBlockWidth()
{
	long result;
	GetProperty(0x135, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCodBlockWidth(long propVal)
{
	SetProperty(0x135, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KCodBlockHeight()
{
	long result;
	GetProperty(0x136, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCodBlockHeight(long propVal)
{
	SetProperty(0x136, VT_I4, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_SelectiveACBypass()
{
	BOOL result;
	GetProperty(0x137, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_SelectiveACBypass(BOOL propVal)
{
	SetProperty(0x137, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_ResetContextOnBoundaries()
{
	BOOL result;
	GetProperty(0x138, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_ResetContextOnBoundaries(BOOL propVal)
{
	SetProperty(0x138, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_TerminationOnEachPass()
{
	BOOL result;
	GetProperty(0x139, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_TerminationOnEachPass(BOOL propVal)
{
	SetProperty(0x139, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_VerticallyCausalContext()
{
	BOOL result;
	GetProperty(0x13a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_VerticallyCausalContext(BOOL propVal)
{
	SetProperty(0x13a, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_PredictableTermination()
{
	BOOL result;
	GetProperty(0x13b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_PredictableTermination(BOOL propVal)
{
	SetProperty(0x13b, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KCBS_ErrorResilienceSymbol()
{
	BOOL result;
	GetProperty(0x13c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KCBS_ErrorResilienceSymbol(BOOL propVal)
{
	SetProperty(0x13c, VT_BOOL, propVal);
}

long CLeadctrl1::GetJ2KGuardBits()
{
	long result;
	GetProperty(0x13d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KGuardBits(long propVal)
{
	SetProperty(0x13d, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KDerivedBaseMantissa()
{
	long result;
	GetProperty(0x13e, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KDerivedBaseMantissa(long propVal)
{
	SetProperty(0x13e, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KDerivedBaseExponent()
{
	long result;
	GetProperty(0x13f, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KDerivedBaseExponent(long propVal)
{
	SetProperty(0x13f, VT_I4, propVal);
}

BOOL CLeadctrl1::GetJ2KUseSOPMarker()
{
	BOOL result;
	GetProperty(0x140, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KUseSOPMarker(BOOL propVal)
{
	SetProperty(0x140, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetJ2KUseEPHMarker()
{
	BOOL result;
	GetProperty(0x141, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KUseEPHMarker(BOOL propVal)
{
	SetProperty(0x141, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetPDFSaveUseDPI()
{
	BOOL result;
	GetProperty(0x142, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFSaveUseDPI(BOOL propVal)
{
	SetProperty(0x142, VT_BOOL, propVal);
}

float CLeadctrl1::GetCustomTileWidth()
{
	float result;
	GetProperty(0x143, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCustomTileWidth(float propVal)
{
	SetProperty(0x143, VT_R4, propVal);
}

float CLeadctrl1::GetCustomTileHeight()
{
	float result;
	GetProperty(0x144, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCustomTileHeight(float propVal)
{
	SetProperty(0x144, VT_R4, propVal);
}

long CLeadctrl1::GetCustomCompressionTag()
{
	long result;
	GetProperty(0x145, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCustomCompressionTag(long propVal)
{
	SetProperty(0x145, VT_I4, propVal);
}

short CLeadctrl1::GetCustomPlanarConfiguration()
{
	short result;
	GetProperty(0x146, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetCustomPlanarConfiguration(short propVal)
{
	SetProperty(0x146, VT_I2, propVal);
}

short CLeadctrl1::GetCustomPhotoMetricInterpretation()
{
	short result;
	GetProperty(0x147, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetCustomPhotoMetricInterpretation(short propVal)
{
	SetProperty(0x147, VT_I2, propVal);
}

BOOL CLeadctrl1::GetHasMagGlass()
{
	BOOL result;
	GetProperty(0x148, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetHasMagGlass(BOOL propVal)
{
	SetProperty(0x148, VT_BOOL, propVal);
}

CLEADScrollInfo CLeadctrl1::GetHScrollInfo()
{
	LPDISPATCH pDispatch;
	GetProperty(0x149, VT_DISPATCH, (void*)&pDispatch);
	return CLEADScrollInfo(pDispatch);
}

void CLeadctrl1::SetHScrollInfo(LPDISPATCH propVal)
{
	SetProperty(0x149, VT_DISPATCH, propVal);
}

CLEADScrollInfo CLeadctrl1::GetVScrollInfo()
{
	LPDISPATCH pDispatch;
	GetProperty(0x14a, VT_DISPATCH, (void*)&pDispatch);
	return CLEADScrollInfo(pDispatch);
}

void CLeadctrl1::SetVScrollInfo(LPDISPATCH propVal)
{
	SetProperty(0x14a, VT_DISPATCH, propVal);
}

BOOL CLeadctrl1::GetCenterImage()
{
	BOOL result;
	GetProperty(0x14b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetCenterImage(BOOL propVal)
{
	SetProperty(0x14b, VT_BOOL, propVal);
}

long CLeadctrl1::GetCurveSize()
{
	long result;
	GetProperty(0x14d, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCurveSize(long propVal)
{
	SetProperty(0x14d, VT_I4, propVal);
}

long CLeadctrl1::GetCurveType()
{
	long result;
	GetProperty(0x14e, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCurveType(long propVal)
{
	SetProperty(0x14e, VT_I4, propVal);
}

float CLeadctrl1::GetCurveTension()
{
	float result;
	GetProperty(0x14f, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetCurveTension(float propVal)
{
	SetProperty(0x14f, VT_R4, propVal);
}

short CLeadctrl1::GetCurveClose()
{
	short result;
	GetProperty(0x150, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetCurveClose(short propVal)
{
	SetProperty(0x150, VT_I2, propVal);
}

long CLeadctrl1::GetBezierSize()
{
	long result;
	GetProperty(0x151, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBezierSize(long propVal)
{
	SetProperty(0x151, VT_I4, propVal);
}

short CLeadctrl1::GetWriteMarkerAction()
{
	short result;
	GetProperty(0x152, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetWriteMarkerAction(short propVal)
{
	SetProperty(0x152, VT_I2, propVal);
}

long CLeadctrl1::GetLineProfileSize()
{
	long result;
	GetProperty(0x153, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetLineProfileSize(long propVal)
{
	SetProperty(0x153, VT_I4, propVal);
}

long CLeadctrl1::GetSaveBufferAddress()
{
	long result;
	GetProperty(0x154, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveBufferAddress(long propVal)
{
	SetProperty(0x154, VT_I4, propVal);
}

long CLeadctrl1::GetSaveBufferSize()
{
	long result;
	GetProperty(0x155, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveBufferSize(long propVal)
{
	SetProperty(0x155, VT_I4, propVal);
}

BOOL CLeadctrl1::GetEnableSaveBufferEvent()
{
	BOOL result;
	GetProperty(0x156, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableSaveBufferEvent(BOOL propVal)
{
	SetProperty(0x156, VT_BOOL, propVal);
}

long CLeadctrl1::GetAnnInfoVersion()
{
	long result;
	GetProperty(0x157, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnInfoVersion(long propVal)
{
	SetProperty(0x157, VT_I4, propVal);
}

long CLeadctrl1::GetAnnInfoFormat()
{
	long result;
	GetProperty(0x158, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnInfoFormat(long propVal)
{
	SetProperty(0x158, VT_I4, propVal);
}

long CLeadctrl1::GetAnnInfoTotalPages()
{
	long result;
	GetProperty(0x159, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnnInfoTotalPages(long propVal)
{
	SetProperty(0x159, VT_I4, propVal);
}

BOOL CLeadctrl1::GetIsSigned()
{
	BOOL result;
	GetProperty(0x15a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetIsSigned(BOOL propVal)
{
	SetProperty(0x15a, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetLoadSigned()
{
	BOOL result;
	GetProperty(0x15b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadSigned(BOOL propVal)
{
	SetProperty(0x15b, VT_BOOL, propVal);
}

short CLeadctrl1::GetInfoLayers()
{
	short result;
	GetProperty(0x15c, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetInfoLayers(short propVal)
{
	SetProperty(0x15c, VT_I2, propVal);
}

BOOL CLeadctrl1::GetSaveLayers()
{
	BOOL result;
	GetProperty(0x15d, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveLayers(BOOL propVal)
{
	SetProperty(0x15d, VT_BOOL, propVal);
}

float CLeadctrl1::GetSaveTileWidth()
{
	float result;
	GetProperty(0x15e, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveTileWidth(float propVal)
{
	SetProperty(0x15e, VT_R4, propVal);
}

float CLeadctrl1::GetSaveTileHeight()
{
	float result;
	GetProperty(0x15f, VT_R4, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveTileHeight(float propVal)
{
	SetProperty(0x15f, VT_R4, propVal);
}

short CLeadctrl1::GetBitmapCompression()
{
	short result;
	GetProperty(0x160, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapCompression(short propVal)
{
	SetProperty(0x160, VT_I2, propVal);
}

long CLeadctrl1::GetBitmapSize()
{
	long result;
	GetProperty(0x161, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapSize(long propVal)
{
	SetProperty(0x161, VT_I4, propVal);
}

long CLeadctrl1::GetRemapTableSize()
{
	long result;
	GetProperty(0x162, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRemapTableSize(long propVal)
{
	SetProperty(0x162, VT_I4, propVal);
}

long CLeadctrl1::GetHistogramTableSize()
{
	long result;
	GetProperty(0x163, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetHistogramTableSize(long propVal)
{
	SetProperty(0x163, VT_I4, propVal);
}

long CLeadctrl1::GetUserLUTCurveSize()
{
	long result;
	GetProperty(0x164, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetUserLUTCurveSize(long propVal)
{
	SetProperty(0x164, VT_I4, propVal);
}

BOOL CLeadctrl1::GetSaveNoPalette()
{
	BOOL result;
	GetProperty(0x165, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveNoPalette(BOOL propVal)
{
	SetProperty(0x165, VT_BOOL, propVal);
}

short CLeadctrl1::GetMagGlassPaintContrast()
{
	short result;
	GetProperty(0x166, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMagGlassPaintContrast(short propVal)
{
	SetProperty(0x166, VT_I2, propVal);
}

short CLeadctrl1::GetMagGlassPaintGamma()
{
	short result;
	GetProperty(0x167, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMagGlassPaintGamma(short propVal)
{
	SetProperty(0x167, VT_I2, propVal);
}

short CLeadctrl1::GetMagGlassPaintIntensity()
{
	short result;
	GetProperty(0x168, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetMagGlassPaintIntensity(short propVal)
{
	SetProperty(0x168, VT_I2, propVal);
}

BOOL CLeadctrl1::GetEnableFilePageLoadedEvent()
{
	BOOL result;
	GetProperty(0x169, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableFilePageLoadedEvent(BOOL propVal)
{
	SetProperty(0x169, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetSaveOldJTIF()
{
	BOOL result;
	GetProperty(0x16a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetSaveOldJTIF(BOOL propVal)
{
	SetProperty(0x16a, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetLoadAppend()
{
	BOOL result;
	GetProperty(0x16b, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetLoadAppend(BOOL propVal)
{
	SetProperty(0x16b, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetAnimationPause()
{
	BOOL result;
	GetProperty(0x16c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationPause(BOOL propVal)
{
	SetProperty(0x16c, VT_BOOL, propVal);
}

short CLeadctrl1::GetAnimationFrameIndex()
{
	short result;
	GetProperty(0x16d, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetAnimationFrameIndex(short propVal)
{
	SetProperty(0x16d, VT_I2, propVal);
}

BOOL CLeadctrl1::GetUseLUT()
{
	BOOL result;
	GetProperty(0x16e, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetUseLUT(BOOL propVal)
{
	SetProperty(0x16e, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetRenderCenter()
{
	BOOL result;
	GetProperty(0x16f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetRenderCenter(BOOL propVal)
{
	SetProperty(0x16f, VT_BOOL, propVal);
}

short CLeadctrl1::GetJ2KROIControl()
{
	short result;
	GetProperty(0x170, VT_I2, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KROIControl(short propVal)
{
	SetProperty(0x170, VT_I2, propVal);
}

BOOL CLeadctrl1::GetJ2KUseROI()
{
	BOOL result;
	GetProperty(0x171, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KUseROI(BOOL propVal)
{
	SetProperty(0x171, VT_BOOL, propVal);
}

long CLeadctrl1::GetJ2KROILeft()
{
	long result;
	GetProperty(0x172, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KROILeft(long propVal)
{
	SetProperty(0x172, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KROITop()
{
	long result;
	GetProperty(0x173, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KROITop(long propVal)
{
	SetProperty(0x173, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KROIWidth()
{
	long result;
	GetProperty(0x174, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KROIWidth(long propVal)
{
	SetProperty(0x174, VT_I4, propVal);
}

long CLeadctrl1::GetJ2KROIHeight()
{
	long result;
	GetProperty(0x175, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetJ2KROIHeight(long propVal)
{
	SetProperty(0x175, VT_I4, propVal);
}

BOOL CLeadctrl1::GetPDFSaveLowMemUsage()
{
	BOOL result;
	GetProperty(0x176, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFSaveLowMemUsage(BOOL propVal)
{
	SetProperty(0x176, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetPDFDisableCropping()
{
	BOOL result;
	GetProperty(0x177, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetPDFDisableCropping(BOOL propVal)
{
	SetProperty(0x177, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetDoubleBuffer()
{
	BOOL result;
	GetProperty(0x178, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetDoubleBuffer(BOOL propVal)
{
	SetProperty(0x178, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetEnableFastRender()
{
	BOOL result;
	GetProperty(0x179, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableFastRender(BOOL propVal)
{
	SetProperty(0x179, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetForceEPSThumbnail()
{
	BOOL result;
	GetProperty(0x17a, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetForceEPSThumbnail(BOOL propVal)
{
	SetProperty(0x17a, VT_BOOL, propVal);
}

long CLeadctrl1::GetRemapHueTablesSize()
{
	long result;
	GetProperty(0x17b, VT_I4, (void*)&result);
	return result;
}

void CLeadctrl1::SetRemapHueTablesSize(long propVal)
{
	SetProperty(0x17b, VT_I4, propVal);
}

BOOL CLeadctrl1::GetEnableMouseWheel()
{
	BOOL result;
	GetProperty(0x17c, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableMouseWheel(BOOL propVal)
{
	SetProperty(0x17c, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetEnableOLEDragMethod()
{
	BOOL result;
	GetProperty(0x17d, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetEnableOLEDragMethod(BOOL propVal)
{
	SetProperty(0x17d, VT_BOOL, propVal);
}

CPicture CLeadctrl1::GetOLEDragCursor()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17e, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLeadctrl1::SetOLEDragCursor(LPDISPATCH propVal)
{
	SetProperty(0x17e, VT_DISPATCH, propVal);
}

BOOL CLeadctrl1::GetBitmapDataPathWriteCache()
{
	BOOL result;
	GetProperty(0x17f, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapDataPathWriteCache(BOOL propVal)
{
	SetProperty(0x17f, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetBitmapValues()
{
	BOOL result;
	GetProperty(0x180, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapValues(BOOL propVal)
{
	SetProperty(0x180, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetBitmapDataPathForceReload()
{
	BOOL result;
	GetProperty(0x181, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetBitmapDataPathForceReload(BOOL propVal)
{
	SetProperty(0x181, VT_BOOL, propVal);
}

BOOL CLeadctrl1::GetXxx()
{
	BOOL result;
	GetProperty(0x182, VT_BOOL, (void*)&result);
	return result;
}

void CLeadctrl1::SetXxx(BOOL propVal)
{
	SetProperty(0x182, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLeadctrl1 operations

void CLeadctrl1::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CLeadctrl1::Average(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x183, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLeadctrl1::Median(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x184, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLeadctrl1::Contrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x185, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLeadctrl1::Despeckle()
{
	short result;
	InvokeHelper(0x186, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::Flip()
{
	short result;
	InvokeHelper(0x187, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::Grayscale(short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x188, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel);
	return result;
}

short CLeadctrl1::HistoEqualize(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x189, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::Hue(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLeadctrl1::Intensity(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLeadctrl1::Invert()
{
	short result;
	InvokeHelper(0x18c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::Sharpen(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLeadctrl1::Saturation(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLeadctrl1::Reverse()
{
	short result;
	InvokeHelper(0x18f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::ForceRepaint()
{
	short result;
	InvokeHelper(0x190, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::Mosaic(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x191, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLeadctrl1::SpatialFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x192, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLeadctrl1::BinaryFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x193, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLeadctrl1::Save(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x194, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLeadctrl1::Posterize(short iLevels)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x195, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLevels);
	return result;
}

CPicture CLeadctrl1::GetPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x196, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

short CLeadctrl1::SetPicture(LPDISPATCH pPicture)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x197, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pPicture);
	return result;
}

short CLeadctrl1::Rotate(long iAngle, short iFlags, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x198, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, iFlags, crFill);
	return result;
}

short CLeadctrl1::Emboss(short iDirection, short iDepth)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x199, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDirection, iDepth);
	return result;
}

short CLeadctrl1::AddNoise(short iRange, short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x19a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRange, iChannel);
	return result;
}

short CLeadctrl1::IntensityDetect(short iLow, short iHigh)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x19b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLow, iHigh);
	return result;
}

short CLeadctrl1::Fill(unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crFill);
	return result;
}

short CLeadctrl1::StretchIntensity()
{
	short result;
	InvokeHelper(0x19d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::GammaCorrect(short iGamma)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iGamma);
	return result;
}

short CLeadctrl1::Shear(short iAngle, BOOL bHorizontal, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I4;
	InvokeHelper(0x19f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, bHorizontal, crFill);
	return result;
}

short CLeadctrl1::CreateBitmap(float fWidth, float fHeight, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1a0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel);
	return result;
}

short CLeadctrl1::Render(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1a1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

long CLeadctrl1::GetBitmapDC()
{
	long result;
	InvokeHelper(0x1a2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::ReleaseBitmapDC()
{
	short result;
	InvokeHelper(0x1a3, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::Halftone(short iType, long iAngle, short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I2;
	InvokeHelper(0x1a4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType, iAngle, iDim);
	return result;
}

short CLeadctrl1::Size(float fWidth, float fHeight, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1a5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iFlags);
	return result;
}

short CLeadctrl1::Copy(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::Paste(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::Load(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x1a8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages);
	return result;
}

short CLeadctrl1::SetDIB(long hDIB)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDIB);
	return result;
}

short CLeadctrl1::SetDDB(long hDC, long hBitmap, long hPalette)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1aa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, hBitmap, hPalette);
	return result;
}

long CLeadctrl1::GetDDB(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ab, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

short CLeadctrl1::RemapIntensity(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1ac, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLeadctrl1::GetHistogram(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1ad, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLeadctrl1::ColorRes(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1ae, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

short CLeadctrl1::Capture(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1af, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::ColorSeparate(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::ColorMerge(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::Underlay(long hBitmap, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1b2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iFlags);
	return result;
}

short CLeadctrl1::Combine(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x1b3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iFlags);
	return result;
}

short CLeadctrl1::SetDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::SetDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::SetSrcRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::SetSrcClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::Trim(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::HistoContrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1b9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLeadctrl1::GetFileInfo(LPCTSTR pszName, long lPage, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x1ba, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage, uFlags);
	return result;
}

short CLeadctrl1::SaveWithStamp(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, float fStampWidth, float fStampHeight, short iStampBits)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1bb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, fStampWidth, fStampHeight, iStampBits);
	return result;
}

short CLeadctrl1::LoadStamp(LPCTSTR pszName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1bc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName);
	return result;
}

void CLeadctrl1::SetRubberBandRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fLeft, fTop, fWidth, fHeight);
}

long CLeadctrl1::GetClientDC()
{
	long result;
	InvokeHelper(0x1be, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::ReleaseClientDC()
{
	short result;
	InvokeHelper(0x1bf, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadctrl1::dbAddNew()
{
	InvokeHelper(0x1c0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbDelete()
{
	InvokeHelper(0x1c1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbEdit()
{
	InvokeHelper(0x1c2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbMove(long lRows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lRows);
}

void CLeadctrl1::dbMoveFirst()
{
	InvokeHelper(0x1c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbMoveLast()
{
	InvokeHelper(0x1c5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbMoveNext()
{
	InvokeHelper(0x1c6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbMovePrev()
{
	InvokeHelper(0x1c7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLeadctrl1::dbClose()
{
	InvokeHelper(0x1c8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CLeadctrl1::GetPalette(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

BOOL CLeadctrl1::dbRequery()
{
	BOOL result;
	InvokeHelper(0x1ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLeadctrl1::dbOpen(LPCTSTR pszConnect, LPCTSTR pszSQL, LPCTSTR pszField, long iOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x1cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszConnect, pszSQL, pszField, iOptions);
	return result;
}

short CLeadctrl1::dbUpdate(short iFormat, short iBitsPerPixel, short iQuality)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1cc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality);
	return result;
}

long CLeadctrl1::PrintStart()
{
	long result;
	InvokeHelper(0x1cd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadctrl1::PrintEnd(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

void CLeadctrl1::UnlockSupport(short iType, LPCTSTR pszKey)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x1cf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iType, pszKey);
}

BOOL CLeadctrl1::IsSupportLocked(short iType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iType);
	return result;
}

short CLeadctrl1::StartFeedLoad(short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x1d1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, lPage, lPages);
	return result;
}

short CLeadctrl1::StopFeedLoad()
{
	short result;
	InvokeHelper(0x1d2, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::SaveMemory(long* phMem, short iFormat, short iBitsPerPixel, short iQuality, long* piSize)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_I2 VTS_I2 VTS_PI4;
	InvokeHelper(0x1d3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, iBitsPerPixel, iQuality, piSize);
	return result;
}

short CLeadctrl1::LoadMemory(long hMem, short iBitsPerPixel, long lPage, long lPages, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iBitsPerPixel, lPage, lPages, iSize);
	return result;
}

short CLeadctrl1::GetMemoryInfo(long hMem, long lPage, long iSize, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, lPage, iSize, uFlags);
	return result;
}

short CLeadctrl1::FeedLoad(const VARIANT& vBuffer, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x1d6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vBuffer, iSize);
	return result;
}

BOOL CLeadctrl1::DeleteRgnHandle(long hRgn)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hRgn);
	return result;
}

short CLeadctrl1::FreeRgn()
{
	short result;
	InvokeHelper(0x1d8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLeadctrl1::GetRgnArea()
{
	long result;
	InvokeHelper(0x1d9, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLeadctrl1::GetRgnHandle()
{
	long result;
	InvokeHelper(0x1da, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CLeadctrl1::IsPtInRgn(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1db, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

short CLeadctrl1::OffsetRgn(float fDx, float fDy)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1dc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fDx, fDy);
	return result;
}

short CLeadctrl1::SetRgnColor(unsigned long crMatch, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1dd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crMatch, iCombineMode);
	return result;
}

short CLeadctrl1::SetRgnHandle(long hRgn, float fDx, float fDy, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1de, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hRgn, fDx, fDy, iCombineMode);
	return result;
}

short CLeadctrl1::SetRgnEllipse(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1df, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLeadctrl1::SetRgnRect(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1e0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLeadctrl1::SetRgnRoundRect(float fLeft, float fTop, float fWidth, float fHeight, float fWidthEllipse, float fHeightEllipse, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1e1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, fWidthEllipse, fHeightEllipse, iCombineMode);
	return result;
}

BOOL CLeadctrl1::IsPtInFloater(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

long CLeadctrl1::GetFloaterHandle()
{
	long result;
	InvokeHelper(0x1e3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::SetFloaterDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1e4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::SetFloaterDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1e5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::SetRgnPolygon(short iFillMode, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1e6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFillMode, iCombineMode);
	return result;
}

short CLeadctrl1::RepaintRect(float fLeft, float fTop, float fWidth, float fHeight, BOOL bErase)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x1e7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, bErase);
	return result;
}

short CLeadctrl1::AnnSetTag(long hObject, long iTag)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1e8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iTag);
	return result;
}

long CLeadctrl1::AnnGetTag(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1e9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ea, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSave(LPCTSTR pszFile, short iFormat, BOOL fSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x1eb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, iFormat, fSelected, iModify, lSavePage);
	return result;
}

short CLeadctrl1::AnnLoad(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1ec, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLeadctrl1::AnnCopy(short iFormat, BOOL fSelected, BOOL fEmpty)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x1ed, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fSelected, fEmpty);
	return result;
}

short CLeadctrl1::AnnPaste()
{
	short result;
	InvokeHelper(0x1ee, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::AnnRealize(BOOL fRedactOnly)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1ef, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fRedactOnly);
	return result;
}

short CLeadctrl1::AnnFlip(BOOL bUseHorz, float fHorz, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseHorz, fHorz, bSelected);
	return result;
}

short CLeadctrl1::AnnReverse(BOOL bUseVert, float fVert, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseVert, fVert, bSelected);
	return result;
}

short CLeadctrl1::AnnRotate(BOOL bUseCenter, float fCenterX, float fCenterY, float fAngle, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseCenter, fCenterX, fCenterY, fAngle, bSelected);
	return result;
}

short CLeadctrl1::AnnSetAutoText(short iItem, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x1f3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iItem, pszText);
	return result;
}

CString CLeadctrl1::AnnGetAutoText(short iItem)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iItem);
	return result;
}

short CLeadctrl1::ColorResList(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

long CLeadctrl1::GetColorCount()
{
	long result;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::InsertBitmapListItem(short iIndex, long hBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, hBitmap);
	return result;
}

short CLeadctrl1::ReadLoadResolutions(LPCTSTR pszFile)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile);
	return result;
}

short CLeadctrl1::SetLoadResolution(short iFormat, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x1f9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fWidth, fHeight);
	return result;
}

short CLeadctrl1::GetLoadResolution(short iFormat)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1fa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat);
	return result;
}

short CLeadctrl1::GetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLeadctrl1::SetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLeadctrl1::DeleteBitmapListItems(short iIndex, short iCount)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1fd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, iCount);
	return result;
}

short CLeadctrl1::AnnLoadMemory(long hMem, long iSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1fe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iSize, lPage);
	return result;
}

short CLeadctrl1::AnnSaveMemory(long* phMem, short iFormat, BOOL bSelected, long* piSize, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_BOOL VTS_PI4 VTS_I2 VTS_I4;
	InvokeHelper(0x1ff, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, bSelected, piSize, iModify, lSavePage);
	return result;
}

short CLeadctrl1::DrawEllipse(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x200, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::DrawRectangle(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::DrawLine(float fX1, float fY1, float fX2, float fY2)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fX1, fY1, fX2, fY2);
	return result;
}

short CLeadctrl1::DrawTextOut(float fx, float fy, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BSTR;
	InvokeHelper(0x203, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fx, fy, pszText);
	return result;
}

float CLeadctrl1::DrawTextWidth(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x204, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

float CLeadctrl1::DrawTextHeight(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x205, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

short CLeadctrl1::ZoomToRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x206, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::Solarize(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x207, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLeadctrl1::AutoTrim(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x208, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLeadctrl1::MinFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x209, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLeadctrl1::MaxFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x20a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLeadctrl1::Oilify(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x20b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

VARIANT CLeadctrl1::ReadComment(LPCTSTR pszFile, long lPage, short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2;
	InvokeHelper(0x20c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		pszFile, lPage, iIndex);
	return result;
}

long CLeadctrl1::AnnGetPointCount(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLeadctrl1::AnnGetPointX(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLeadctrl1::AnnGetPointY(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetSelectCount()
{
	short result;
	InvokeHelper(0x210, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

VARIANT CLeadctrl1::AnnGetSelectList()
{
	VARIANT result;
	InvokeHelper(0x211, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::FastRotate(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x212, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLeadctrl1::AnnMove(float dxOffset, float dyOffset, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x213, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dxOffset, dyOffset, bSelected);
	return result;
}

short CLeadctrl1::DrawShape(short uShape, long BackgroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x214, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uShape, BackgroundImage);
	return result;
}

short CLeadctrl1::DrawText(LPCTSTR szText, long ForegroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x215, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szText, ForegroundImage);
	return result;
}

short CLeadctrl1::WindowLevel()
{
	short result;
	InvokeHelper(0x216, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::GetMinMaxVal()
{
	short result;
	InvokeHelper(0x217, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::GetMinMaxBits()
{
	short result;
	InvokeHelper(0x218, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::AnnLock(long hObject, LPCTSTR pszKey, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x219, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey, fSelected);
	return result;
}

short CLeadctrl1::AnnUnlock(long hObject, LPCTSTR pszKey)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x21a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey);
	return result;
}

BOOL CLeadctrl1::AnnGetLocked(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnUnrealize(long hObject, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x21c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fSelected);
	return result;
}

short CLeadctrl1::AnnSaveTag(BOOL fWangMode, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x21d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWangMode, fSelected);
	return result;
}

short CLeadctrl1::AnnSetHyperlinkString(long hObject, short uType, LPCTSTR pszHyperlink)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x21e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, pszHyperlink);
	return result;
}

short CLeadctrl1::AnnSetHyperlinkMsg(long hObject, short uType, long lParam1, long lParam2, long lParam3, long lParam4, long lParam5)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x21f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, lParam1, lParam2, lParam3, lParam4, lParam5);
	return result;
}

short CLeadctrl1::AnnGetHyperlinkType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x220, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

CString CLeadctrl1::AnnGetHyperlinkString(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x221, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetHyperlinkParam(long hObject, short iParamIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x222, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, iParamIndex);
	return result;
}

short CLeadctrl1::PreLoadFilters(short iFixedFilters, short iCachedFilters, LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x223, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFixedFilters, iCachedFilters, pszFilters);
	return result;
}

short CLeadctrl1::IgnoreFilters(LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x224, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFilters);
	return result;
}

short CLeadctrl1::ZoomIn()
{
	short result;
	InvokeHelper(0x225, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::ShowPanWin(BOOL bShow)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x226, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bShow);
	return result;
}

short CLeadctrl1::DeletePage(LPCTSTR pszName, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x227, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage);
	return result;
}

short CLeadctrl1::Picturize(LPCTSTR pszDirectory, short iFlags, float fCellWidth, float fCellHeight)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x228, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszDirectory, iFlags, fCellWidth, fCellHeight);
	return result;
}

short CLeadctrl1::AnnEnumerate(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x229, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

short CLeadctrl1::ContourFilter(short nThreshold, short nDeltaDirection, short nMaximumError, short nOption)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x22a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nThreshold, nDeltaDirection, nMaximumError, nOption);
	return result;
}

short CLeadctrl1::WindowLevelFillLUT(unsigned long crStart, unsigned long crEnd, long nLow, long nHigh, short nLowBit, short nHighBit, long nMinValue, long nMaxValue, short nFactor, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_I4 VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x22b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crStart, crEnd, nLow, nHigh, nLowBit, nHighBit, nMinValue, nMaxValue, nFactor, lFlags);
	return result;
}

short CLeadctrl1::AnnDestroy(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x22c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

long CLeadctrl1::AnnCreate(short iType, BOOL bAutoInsert, BOOL bVisible)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x22d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iType, bAutoInsert, bVisible);
	return result;
}

short CLeadctrl1::AnnInsert(long hContainer, long hObject, BOOL bStripContainer)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x22e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, hObject, bStripContainer);
	return result;
}

short CLeadctrl1::AnnDefine(long hObject, float x, float y, short iState)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x22f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, x, y, iState);
	return result;
}

short CLeadctrl1::AnnSetAutoDefaults(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x230, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

short CLeadctrl1::SetMousePos(float x, float y, BOOL bUpdatePos)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x231, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y, bUpdatePos);
	return result;
}

short CLeadctrl1::AnnSetUser(long hObject, LPCTSTR pOldUser, LPCTSTR pNewUser, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x232, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pOldUser, pNewUser, bSelected);
	return result;
}

short CLeadctrl1::AnnSetVisible(long hObject, BOOL bVisible, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BSTR;
	InvokeHelper(0x233, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bVisible, iFlags, pszUserList);
	return result;
}

BOOL CLeadctrl1::AnnGetVisible(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x234, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetSelected(long hObject, BOOL bValue, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x235, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bValue, bSelected);
	return result;
}

short CLeadctrl1::AnnGroup(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x236, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

short CLeadctrl1::AnnUngroup(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x237, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

long CLeadctrl1::AnnGetObjectFromTag(long hObject, long lTag, BOOL bSelected)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x238, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, lTag, bSelected);
	return result;
}

short CLeadctrl1::AnnSetAutoMenuItemEnable(long hObject, short iType, short iItem, short iEnable, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x239, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, iItem, iEnable, iFlags, pszUserList);
	return result;
}

short CLeadctrl1::AnnGetAutoMenuItemEnable(long hObject, short iType, short iItem)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x23a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, iItem);
	return result;
}

short CLeadctrl1::LoadArray(const VARIANT& vMem, short iBitsPerPixel, long lPage, long lPages, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x23b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, iBitsPerPixel, lPage, lPages, lSize);
	return result;
}

VARIANT CLeadctrl1::SaveArray(short iFormat, short iBitsPerPixel, short iQuality)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x23c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality);
	return result;
}

short CLeadctrl1::AnnLoadArray(const VARIANT& vMem, long lSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4;
	InvokeHelper(0x23d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, lSize, lPage);
	return result;
}

short CLeadctrl1::AnnSaveArray(VARIANT* pvMem, short iFormat, BOOL bSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x23e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, iFormat, bSelected, iModify, lSavePage);
	return result;
}

long CLeadctrl1::ArraySize(const VARIANT& vMem)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x23f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&vMem);
	return result;
}

short CLeadctrl1::WriteComment(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x240, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLeadctrl1::SetTag(long lTag, short iType, long lCount, const VARIANT& vData)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x241, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTag, iType, lCount, &vData);
	return result;
}

VARIANT CLeadctrl1::GetTagData(long lTag)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x242, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		lTag);
	return result;
}

long CLeadctrl1::GetTagCount(long lTag)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x243, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lTag);
	return result;
}

short CLeadctrl1::GetTagType(long lTag)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x244, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTag);
	return result;
}

short CLeadctrl1::WriteTag(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x245, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLeadctrl1::ReadTag(LPCTSTR pszFile, long lPage, long lTag)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x246, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage, lTag);
	return result;
}

short CLeadctrl1::StartMagGlass(float fWidth, float fHeight, short nZoom, unsigned long clrPen, unsigned long clrBack, BOOL bEllipse, float fBorderSize, BOOL b3D, short nCrosshair, BOOL bIgnoreRgn, BOOL bCenter)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_I4 VTS_I4 VTS_BOOL VTS_R4 VTS_BOOL VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x247, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, nZoom, clrPen, clrBack, bEllipse, fBorderSize, b3D, nCrosshair, bIgnoreRgn, bCenter);
	return result;
}

short CLeadctrl1::StopMagGlass()
{
	short result;
	InvokeHelper(0x248, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::SetRgnMagicWand(float x, float y, short iTolerance, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_I2;
	InvokeHelper(0x249, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y, iTolerance, iCombineMode);
	return result;
}

short CLeadctrl1::Smooth(long iLength, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x24a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLength, uFlags);
	return result;
}

short CLeadctrl1::LineRemove(long uFlags, long iMinLineLength, long iMaxLineWidth, long iWall, long iMaxWallPercent, long iGapLength, long iVariance, long uRemoveFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinLineLength, iMaxLineWidth, iWall, iMaxWallPercent, iGapLength, iVariance, uRemoveFlags);
	return result;
}

short CLeadctrl1::BorderRemove(long uFlags, long uBorderToRemove, long iBorderPercent, long iWhiteNoiseLength, long iVariance)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, uBorderToRemove, iBorderPercent, iWhiteNoiseLength, iVariance);
	return result;
}

short CLeadctrl1::InvertedText(long uFlags, long iMinInvertWidth, long iMinInvertHeight, long iMinBlackPercent, long iMaxBlackPercent)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinInvertWidth, iMinInvertHeight, iMinBlackPercent, iMaxBlackPercent);
	return result;
}

short CLeadctrl1::DotRemove(long uFlags, long iMinDotWidth, long iMinDotHeight, long iMaxDotWidth, long iMaxDotHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinDotWidth, iMinDotHeight, iMaxDotWidth, iMaxDotHeight);
	return result;
}

short CLeadctrl1::HolePunchRemove(long uFlags, long iMinHoleCount, long iMaxHoleCount, long iMinHoleWidth, long iMinHoleHeight, long iMaxHoleWidth, long iMaxHoleHeight, long iLocation)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinHoleCount, iMaxHoleCount, iMinHoleWidth, iMinHoleHeight, iMaxHoleWidth, iMaxHoleHeight, iLocation);
	return result;
}

unsigned long CLeadctrl1::GetBitmapPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x250, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetBitmapPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x250, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLeadctrl1::GetRemapTable(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x251, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetRemapTable(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x251, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

long CLeadctrl1::GetHistogramTable(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x252, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetHistogramTable(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x252, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

unsigned long CLeadctrl1::GetUserPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x253, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetUserPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x253, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLeadctrl1::GetColorPlanes(short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetColorPlanes(short iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

BOOL CLeadctrl1::GetInfoPCDRes(short iIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x255, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		iIndex);
	return result;
}

float CLeadctrl1::GetPolygonX(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x256, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetPolygonX(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x256, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetPolygonY(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x257, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetPolygonY(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

unsigned long CLeadctrl1::GetAnimationPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetAnimationPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetLoadResolutionWidth(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x259, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

float CLeadctrl1::GetLoadResolutionHeight(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

VARIANT CLeadctrl1::GetComment(short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetComment(short iIndex, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x25b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, &newValue);
}

unsigned long CLeadctrl1::GetPixel(float x, float y)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x25c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		x, y);
	return result;
}

void CLeadctrl1::SetPixel(float x, float y, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x25c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 x, y, newValue);
}

unsigned long CLeadctrl1::GetLevelLUT(long iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetLevelLUT(long iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x25d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetSaveResolutionWidth(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetSaveResolutionWidth(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x25e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetSaveResolutionHeight(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetSaveResolutionHeight(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x25f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetAnnRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x260, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLeadctrl1::SetAnnRectLeft(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x260, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLeadctrl1::GetAnnRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x261, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLeadctrl1::SetAnnRectTop(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x261, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLeadctrl1::GetAnnRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x262, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLeadctrl1::SetAnnRectWidth(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x262, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLeadctrl1::GetAnnRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLeadctrl1::SetAnnRectHeight(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

unsigned long CLeadctrl1::GetMagGlassMask(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetMagGlassMask(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

short CLeadctrl1::AnnSetGrouping(long hObject, BOOL bAutoGroup, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2;
	InvokeHelper(0x265, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bAutoGroup, iFlags);
	return result;
}

BOOL CLeadctrl1::AnnGetGrouping(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x266, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnAddUndoNode()
{
	short result;
	InvokeHelper(0x267, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::AnnUndo()
{
	short result;
	InvokeHelper(0x268, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadctrl1::PrintNewPage(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x269, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

short CLeadctrl1::ClientToBitmap(float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x26a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y);
	return result;
}

short CLeadctrl1::BitmapToClient(float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x26b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y);
	return result;
}

short CLeadctrl1::Deskew(unsigned long crBack, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x26c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crBack, lFlags);
	return result;
}

short CLeadctrl1::RemapHue(BOOL bUseMaskTable, BOOL bUseHTable, BOOL bUseSTable, BOOL bUseVTable)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x26d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseMaskTable, bUseHTable, bUseSTable, bUseVTable);
	return result;
}

short CLeadctrl1::GetMaskTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetMaskTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x26e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLeadctrl1::GetHTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26f, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetHTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLeadctrl1::GetSTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x270, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetSTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x270, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLeadctrl1::GetVTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x271, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetVTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x271, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLeadctrl1::HSV_HfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x272, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

short CLeadctrl1::HSV_SfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x273, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

short CLeadctrl1::HSV_VfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x274, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

unsigned long CLeadctrl1::RGBfromHSV(short nH, short nS, short nV)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x275, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nH, nS, nV);
	return result;
}

short CLeadctrl1::SetRgnColorRGBRange(unsigned long crLower, unsigned long crUpper, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x276, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crLower, crUpper, iCombineMode);
	return result;
}

short CLeadctrl1::SetRgnColorHSVRange(short nH0, short nS0, short nV0, short nH1, short nS1, short nV1, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x277, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nH0, nS0, nV0, nH1, nS1, nV1, iCombineMode);
	return result;
}

short CLeadctrl1::GetHistogramGray()
{
	short result;
	InvokeHelper(0x278, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLeadctrl1::GetHistogramGrayTable(long nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x279, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CLeadctrl1::SetHistogramGrayTable(long nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x279, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

long CLeadctrl1::GetDIB(long nType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType);
	return result;
}

short CLeadctrl1::UpdateMagGlassShape(short nMagGlassShape, long hMagGlassRgn)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x27b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nMagGlassShape, hMagGlassRgn);
	return result;
}

short CLeadctrl1::SaveOffset(LPCTSTR pszName, long iOffsetBegin, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x27c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iOffsetBegin, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLeadctrl1::UpdateMagGlass(const VARIANT& vColorBuffer, const VARIANT& vMaskPlane, long nMaskPlaneStart, long nMaskPlaneEnd, BOOL bUpdateBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x27d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vColorBuffer, &vMaskPlane, nMaskPlaneStart, nMaskPlaneEnd, bUpdateBitmap);
	return result;
}

long CLeadctrl1::AnnAccessObject(const VARIANT& aObjects, short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I2;
	InvokeHelper(0x27e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&aObjects, iIndex);
	return result;
}

short CLeadctrl1::J2KSetDefaults()
{
	short result;
	InvokeHelper(0x281, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::CustomSave(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x282, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLeadctrl1::SetCustomCompressedData(const VARIANT& vCompressedData, long lCompressedDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x283, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vCompressedData, lCompressedDataSize);
	return result;
}

short CLeadctrl1::CustomLoad(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x284, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages);
	return result;
}

short CLeadctrl1::SetCustomUnCompressedData(const VARIANT& vUnCompressedData, long lUnCompressedDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x285, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vUnCompressedData, lUnCompressedDataSize);
	return result;
}

short CLeadctrl1::ConvertHandleToVariant(VARIANT* pVariant, long hHandle, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4 VTS_I4;
	InvokeHelper(0x286, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pVariant, hHandle, lSize);
	return result;
}

short CLeadctrl1::ConvertVariantToHandle(const VARIANT& Variant, long* phHandle, long* plSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_PI4 VTS_PI4;
	InvokeHelper(0x287, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&Variant, phHandle, plSize);
	return result;
}

short CLeadctrl1::AnnHitTest(long hContainer, float x, float y, long* hObjectHit)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_PI4;
	InvokeHelper(0x288, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, x, y, hObjectHit);
	return result;
}

short CLeadctrl1::AnnRemove(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x289, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSelectPoint(long hContainer, float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4;
	InvokeHelper(0x28a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, x, y);
	return result;
}

short CLeadctrl1::AnnSelectRect(long hContainer, float left, float top, float right, float bottom)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x28b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, left, top, right, bottom);
	return result;
}

short CLeadctrl1::AnnSendToBack(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetBackColor(long hObject, unsigned long crBack, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x28d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, crBack, bSelected);
	return result;
}

short CLeadctrl1::AnnGetFillMode(long hObject, short* pnFillMode, long* pnAlpha)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_PI4;
	InvokeHelper(0x28e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pnFillMode, pnAlpha);
	return result;
}

short CLeadctrl1::AnnGetFillPattern(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetFontBold(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x290, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetFontItalic(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x291, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

CString CLeadctrl1::AnnGetFontName(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x292, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetFontSize(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x293, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetFontStrikeThrough(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x294, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetFontUnderline(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x295, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLeadctrl1::AnnGetForeColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x296, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetGaugeLength(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x297, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetLineStyle(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x298, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetLineWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x299, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetMetafile(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

CString CLeadctrl1::AnnGetName(long hObject, BOOL* bShowName)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL;
	InvokeHelper(0x29b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, bShowName);
	return result;
}

short CLeadctrl1::AnnGetNodes(long hObject, BOOL* bShowNodes)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL;
	InvokeHelper(0x29c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowNodes);
	return result;
}

float CLeadctrl1::AnnGetOffsetX(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29d, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetOffsetY(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29e, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetPolyFillMode(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetPredefinedMetafile(short nType, BOOL* bEnhanced)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_PBOOL;
	InvokeHelper(0x2a0, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType, bEnhanced);
	return result;
}

CString CLeadctrl1::AnnGetProtractorOptions(long hObject, BOOL* bAcute, short* nUnit, short* nPrecision, float* ArcRadius)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL VTS_PI2 VTS_PI2 VTS_PR4;
	InvokeHelper(0x2a1, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, bAcute, nUnit, nPrecision, ArcRadius);
	return result;
}

long CLeadctrl1::AnnGetRgnHandle(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a2, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetROP2(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetScalarX(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a4, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLeadctrl1::AnnGetScalarY(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a5, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

long CLeadctrl1::AnnGetSecondaryBitmap(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetSelected(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnGetShowFlags(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

CString CLeadctrl1::AnnGetText(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a9, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetTopContainer(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2aa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLeadctrl1::AnnGetTransparent(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLeadctrl1::AnnGetTransparentColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ac, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

CString CLeadctrl1::AnnGetUnit(long hObject, short* nUnit, short* nPrecision)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_PI2;
	InvokeHelper(0x2ad, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, nUnit, nPrecision);
	return result;
}

long CLeadctrl1::AnnGetWnd(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ae, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetWnd(long hObject, long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2af, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hWnd);
	return result;
}

short CLeadctrl1::AnnSetFillMode(long hObject, short nFillMode, long nAlpha, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2b0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nFillMode, nAlpha, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFillPattern(long hObject, short nFillPattern, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2b1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nFillPattern, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontBold(long hObject, BOOL bFontBold, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontBold, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontItalic(long hObject, BOOL bFontItalic, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontItalic, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontName(long hObject, LPCTSTR pszFontName, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2b4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszFontName, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontSize(long hObject, float fFontSize, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2b5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fFontSize, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontStrikeThrough(long hObject, BOOL bFontStrikeThrough, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontStrikeThrough, bSelected);
	return result;
}

short CLeadctrl1::AnnSetFontUnderline(long hObject, BOOL bFontUnderline, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontUnderline, bSelected);
	return result;
}

short CLeadctrl1::AnnSetForeColor(long hObject, unsigned long ForeColor, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2b8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, ForeColor, bSelected);
	return result;
}

short CLeadctrl1::AnnSetGaugeLength(long hObject, float fGaugeLength, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2b9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fGaugeLength, bSelected);
	return result;
}

short CLeadctrl1::AnnSetLineStyle(long hObject, short nLineStyle, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2ba, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nLineStyle, bSelected);
	return result;
}

short CLeadctrl1::AnnSetLineWidth(long hObject, float fLineWidth, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2bb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fLineWidth, bSelected);
	return result;
}

short CLeadctrl1::AnnSetMetafile(long hObject, long hMetafile, short nType, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2bc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hMetafile, nType, bSelected);
	return result;
}

short CLeadctrl1::AnnSetName(long hObject, BOOL bShowName, LPCTSTR pszName, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2bd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowName, pszName, bSelected);
	return result;
}

short CLeadctrl1::AnnSetNodes(long hObject, BOOL bShowNodes, short nGapNodes, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BOOL;
	InvokeHelper(0x2be, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowNodes, nGapNodes, bSelected);
	return result;
}

short CLeadctrl1::AnnSetPoints(long hObject, const VARIANT& vXArray, const VARIANT& vYArray, long lPointCount)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4;
	InvokeHelper(0x2bf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, &vXArray, &vYArray, lPointCount);
	return result;
}

short CLeadctrl1::AnnSetPolyFillMode(long hObject, short nPolyFillMode, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nPolyFillMode, bSelected);
	return result;
}

short CLeadctrl1::AnnSetPredefinedMetafile(short nType, long hMetafile)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x2c1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nType, hMetafile);
	return result;
}

short CLeadctrl1::AnnSetProtractorOptions(long hObject, BOOL bAcute, short nUnit, LPCTSTR pszAbbrev, short nPrecision, float fArcRadius, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BSTR VTS_I2 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2c2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bAcute, nUnit, pszAbbrev, nPrecision, fArcRadius, bSelected);
	return result;
}

short CLeadctrl1::AnnSetROP2(long hObject, short nROP2, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nROP2, bSelected);
	return result;
}

short CLeadctrl1::AnnSetBitmap(long hObject, long hBitmap, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hBitmap, bSelected);
	return result;
}

short CLeadctrl1::AnnSetSecondaryBitmap(long hObject, long hBitmap, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hBitmap, bSelected);
	return result;
}

short CLeadctrl1::AnnSetShowFlags(long hObject, short nShowFlags, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nShowFlags, bSelected);
	return result;
}

short CLeadctrl1::AnnSetText(long hObject, LPCTSTR pszText, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2c7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszText, bSelected);
	return result;
}

short CLeadctrl1::AnnSetTransparent(long hObject, BOOL bTransparent, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2c8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bTransparent, bSelected);
	return result;
}

short CLeadctrl1::AnnSetTransparentColor(long hObject, unsigned long crTransparent, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, crTransparent, bSelected);
	return result;
}

short CLeadctrl1::AnnSetUnit(long hObject, short nUnit, LPCTSTR pszUnitAbbrev, short nPrecision, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0x2ca, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nUnit, pszUnitAbbrev, nPrecision, bSelected);
	return result;
}

short CLeadctrl1::AnnSetScalarX(long hObject, float fScalarX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fScalarX, bSelected);
	return result;
}

short CLeadctrl1::AnnSetScalarY(long hObject, float fScalarY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fScalarY, bSelected);
	return result;
}

float CLeadctrl1::AnnGetBitmapDpiX(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2cd, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetBitmapDpiY(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ce, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetBitmapDpiX(long hObject, float fBitmapDpiX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fBitmapDpiX, bSelected);
	return result;
}

short CLeadctrl1::AnnSetBitmapDpiY(long hObject, float fBitmapDpiY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fBitmapDpiY, bSelected);
	return result;
}

float CLeadctrl1::GetAnnSelectRectLeft(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLeadctrl1::GetAnnSelectRectTop(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d2, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLeadctrl1::GetAnnSelectRectWidth(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d3, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLeadctrl1::GetAnnSelectRectHeight(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d4, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

short CLeadctrl1::AnnSetOffsetX(long hObject, float OffsetX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, OffsetX, bSelected);
	return result;
}

short CLeadctrl1::AnnSetOffsetY(long hObject, float OffsetY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, OffsetY, bSelected);
	return result;
}

float CLeadctrl1::GetCurveX(long iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d7, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetCurveX(long iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x2d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLeadctrl1::GetCurveY(long iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d8, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetCurveY(long iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x2d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLeadctrl1::GetBezierX(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLeadctrl1::GetBezierY(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2da, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

short CLeadctrl1::SetRgnCurve(short iFillMode, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x2db, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFillMode, iCombineMode);
	return result;
}

short CLeadctrl1::CurveToBezier()
{
	short result;
	InvokeHelper(0x2dc, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::LoadResize(LPCTSTR pszName, float fWidth, float fHeight, short iFlags, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_R4 VTS_R4 VTS_I2 VTS_I2;
	InvokeHelper(0x2dd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, fWidth, fHeight, iFlags, iBitsPerPixel);
	return result;
}

long CLeadctrl1::AnnCreateItem(long hContainer, short iType, BOOL bVisible)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2de, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hContainer, iType, bVisible);
	return result;
}

unsigned long CLeadctrl1::AnnGetAutoBackColor(long hObject, short iType)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x2df, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, iType);
	return result;
}

short CLeadctrl1::AnnSetAutoBackColor(long hObject, short iType, unsigned long crBack)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x2e0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, crBack);
	return result;
}

short CLeadctrl1::AnnBringToFront(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnCut(long hObject, short iFormat, BOOL fSelected, BOOL fEmpty)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2e2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFormat, fSelected, fEmpty);
	return result;
}

float CLeadctrl1::AnnGetAngle(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e3, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetArea(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLeadctrl1::AnnGetBackColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetBitmap(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnBoundingRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e7, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnBoundingRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e8, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnBoundingRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e9, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnBoundingRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ea, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetContainer(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2eb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::AnnGetDistance(long hObject, float* Distance2)
{
	float result;
	static BYTE parms[] =
		VTS_I4 VTS_PR4;
	InvokeHelper(0x2ec, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject, Distance2);
	return result;
}

short CLeadctrl1::TransformFile(LPCTSTR pszNameSrc, LPCTSTR pszNameDst, short iTransform, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I2 VTS_I4;
	InvokeHelper(0x2ed, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszNameSrc, pszNameDst, iTransform, lPage);
	return result;
}

short CLeadctrl1::WriteMarker(short iMarker, long lSize, const VARIANT& vData)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2ee, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iMarker, lSize, &vData);
	return result;
}

short CLeadctrl1::GrayscaleExt(short iRedFact, short iGreenFact, short iBlueFact)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2ef, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRedFact, iGreenFact, iBlueFact);
	return result;
}

short CLeadctrl1::ConvertToColoredGray(short iRedFact, short iGreenFact, short iBlueFact, short iRedGrayFact, short iGreenGrayFact, short iBlueGrayFact)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRedFact, iGreenFact, iBlueFact, iRedGrayFact, iGreenGrayFact, iBlueGrayFact);
	return result;
}

short CLeadctrl1::BalanceColors(float fRedToRed, float fRedToGreen, float fRedToBlue, float fGreenToRed, float fGreenToGreen, float fGreenToBlue, float fBlueToRed, float fBlueToGreen, float fBlueToBlue)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x2f1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fRedToRed, fRedToGreen, fRedToBlue, fGreenToRed, fGreenToGreen, fGreenToBlue, fBlueToRed, fBlueToGreen, fBlueToBlue);
	return result;
}

short CLeadctrl1::SwapColors(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::LineProfile(long xStart, long yStart, long xEnd, long yEnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		xStart, yStart, xEnd, yEnd);
	return result;
}

long CLeadctrl1::GetLineProfileRed(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLeadctrl1::GetLineProfileGreen(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLeadctrl1::GetLineProfileBlue(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

short CLeadctrl1::GaussianFilter(short iRadius)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRadius);
	return result;
}

short CLeadctrl1::UnsharpMask(short iAmount, short iRadius, short iThreshold, short iColorType)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAmount, iRadius, iThreshold, iColorType);
	return result;
}

short CLeadctrl1::LoadBuffer(long lBufferAddress, short iBitsPerPixel, long lPage, long lPages, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lBufferAddress, iBitsPerPixel, lPage, lPages, lSize);
	return result;
}

short CLeadctrl1::SaveBuffer(short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2fa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLeadctrl1::AnnDeletePage(LPCTSTR pszName, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2fb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage);
	return result;
}

short CLeadctrl1::AnnDeletePageMemory(long hMem, long* plSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_I4;
	InvokeHelper(0x2fc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, plSize, lPage);
	return result;
}

short CLeadctrl1::AnnDeletePageArray(VARIANT* pvMem, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4;
	InvokeHelper(0x2fd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, lPage);
	return result;
}

short CLeadctrl1::AnnFileInfo(LPCTSTR pszName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2fe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName);
	return result;
}

short CLeadctrl1::AnnFileInfoMemory(long hMem, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2ff, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, lSize);
	return result;
}

short CLeadctrl1::AnnFileInfoArray(const VARIANT& vMem)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x300, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem);
	return result;
}

BOOL CLeadctrl1::AnnGetNameRestrict(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x301, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetNameRestrict(long hObject, BOOL bNameRestrict, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x302, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bNameRestrict, bSelected);
	return result;
}

long CLeadctrl1::AnnGetNameOffsetX(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x303, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnGetNameOffsetY(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x304, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AnnSetNameOffsetX(long hObject, long NameOffsetX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x305, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, NameOffsetX, bSelected);
	return result;
}

short CLeadctrl1::AnnSetNameOffsetY(long hObject, long NameOffsetY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x306, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, NameOffsetY, bSelected);
	return result;
}

float CLeadctrl1::GetAnnNameBoundingRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x307, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameBoundingRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x308, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameBoundingRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x309, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameBoundingRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLeadctrl1::GetAnnNameRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLeadctrl1::AddBitmaps(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x30f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLeadctrl1::AntiAlias(short iThreshold, short iDim, short iFilter)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x310, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold, iDim, iFilter);
	return result;
}

short CLeadctrl1::EdgeDetector(short iThreshold, short iFilter)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x311, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold, iFilter);
	return result;
}

short CLeadctrl1::RemoveRedeye(unsigned long rcNewColor, short iThreshold, short iLightness)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x312, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		rcNewColor, iThreshold, iLightness);
	return result;
}

short CLeadctrl1::ResizeRgn(short iDim, short iFlag, BOOL bAsFrame)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x313, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim, iFlag, bAsFrame);
	return result;
}

short CLeadctrl1::AlphaBlend(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, short iOpacity)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x314, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iOpacity);
	return result;
}

short CLeadctrl1::CreateFadedMask(long hBitmap, short iLength, short iFadeRate, short iStepSize, short iInflate, short iFlag, short iMaxGray, unsigned long crTransparent)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x315, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iLength, iFadeRate, iStepSize, iInflate, iFlag, iMaxGray, crTransparent);
	return result;
}

short CLeadctrl1::FeatherAlphaBlend(float fLeft, float fTop, float fWidth, float fHeight, long hBitmapSrc, float fSrcLeft, float fSrcTop, long hBitmapMask)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x316, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmapSrc, fSrcLeft, fSrcTop, hBitmapMask);
	return result;
}

short CLeadctrl1::MotionBlur(short iDim, long lAngle, BOOL bUnidirectional)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_BOOL;
	InvokeHelper(0x317, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim, lAngle, bUnidirectional);
	return result;
}

short CLeadctrl1::PicturizeBitmapList(short iCellWidth, short iCellHeight, short iLightnessFact, long hList)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x318, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iCellWidth, iCellHeight, iLightnessFact, hList);
	return result;
}

short CLeadctrl1::PicturizeSingle(long hBitmap, short iCellWidth, short iCellHeight, short iLightnessFact)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x319, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iCellWidth, iCellHeight, iLightnessFact);
	return result;
}

short CLeadctrl1::ConvertSignedToUnsigned(short iShift)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iShift);
	return result;
}

short CLeadctrl1::LoadLayer(LPCTSTR pszName, short iBitsPerPixel, short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x31b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, iLayer);
	return result;
}

VARIANT CLeadctrl1::GetBitmapClipSegments(float y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x31c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		y);
	return result;
}

void CLeadctrl1::SetLayerLeft(short iLayer, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x31d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, newValue);
}

float CLeadctrl1::GetLayerLeft(short iLayer)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetLayerTop(short iLayer, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x31e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, newValue);
}

float CLeadctrl1::GetLayerTop(short iLayer)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetLayerOpacity(short iLayer, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x31f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

short CLeadctrl1::GetLayerOpacity(short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31f, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetLayerClipping(short iLayer, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x320, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

short CLeadctrl1::GetLayerClipping(short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x320, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetLayerBlendModeKey(short iLayer, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x321, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, lpszNewValue);
}

CString CLeadctrl1::GetLayerBlendModeKey(short iLayer)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x321, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetLayerMaskBitmap(short iLayer, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x322, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

long CLeadctrl1::GetLayerMaskBitmap(short iLayer)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x322, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLeadctrl1::SetPixelData(float x, float y, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_VARIANT;
	InvokeHelper(0x323, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 x, y, &newValue);
}

VARIANT CLeadctrl1::GetPixelData(float x, float y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x323, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		x, y);
	return result;
}

short CLeadctrl1::GetFunctionalLookupTable(long nStart, long nEnd, short nFactor, short uFlag)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x324, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nStart, nEnd, nFactor, uFlag);
	return result;
}

long CLeadctrl1::GetUserLUTCurveX(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x325, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetUserLUTCurveX(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x325, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

long CLeadctrl1::GetUserLUTCurveY(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x326, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLeadctrl1::SetUserLUTCurveY(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x326, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLeadctrl1::GetMaskTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x327, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLeadctrl1::SetMaskTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x327, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLeadctrl1::GetHTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x328, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLeadctrl1::SetHTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x328, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLeadctrl1::GetSTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x329, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLeadctrl1::SetSTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x329, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLeadctrl1::GetVTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32a, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLeadctrl1::SetVTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x32a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLeadctrl1::GetUserLookupTable(long* nPointCount)
{
	short result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x32b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nPointCount);
	return result;
}

short CLeadctrl1::CombineExt(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x32c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iFlags);
	return result;
}

short CLeadctrl1::AddBorder(float fLeftThickness, float fTopThickness, float fRightThickness, float fBottomThickness, short nLocation, short nStyle, short nEffectStyle, long hTileBitmap, short nGradientStyle, unsigned long crGradientStart, 
		unsigned long crGradientEnd, short nCurveIntensity, BOOL bSoftCurve, BOOL bShadow, short nShadowSize, short nShadowDirection, BOOL bBumpyShadow)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I2 VTS_BOOL VTS_BOOL VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x32d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeftThickness, fTopThickness, fRightThickness, fBottomThickness, nLocation, nStyle, nEffectStyle, hTileBitmap, nGradientStyle, crGradientStart, crGradientEnd, nCurveIntensity, bSoftCurve, bShadow, nShadowSize, nShadowDirection, 
		bBumpyShadow);
	return result;
}

short CLeadctrl1::AddFrame(long hBitmapFrame, BOOL bKeepFrameState, BOOL bUseMask, unsigned long crMask, short SmoothEdge, short nLocation, short nQuality)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x32e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmapFrame, bKeepFrameState, bUseMask, crMask, SmoothEdge, nLocation, nQuality);
	return result;
}

short CLeadctrl1::UpdateMagGlassFromHandle(long hBitmap, BOOL bUpdateBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x32f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, bUpdateBitmap);
	return result;
}

short CLeadctrl1::ShowMagGlass(BOOL bShowMagGlass)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x330, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bShowMagGlass);
	return result;
}

short CLeadctrl1::SetMagGlassPos(float fXPos, float fYPos)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x331, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fXPos, fYPos);
	return result;
}

short CLeadctrl1::LoadFileTile(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x332, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::LoadMemoryTile(long hMem, short iBitsPerPixel, long lPage, long lPages, long iSize, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x333, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iBitsPerPixel, lPage, lPages, iSize, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLeadctrl1::GetArrayInfo(const VARIANT& vMem, long lPage, long iSize, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x334, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, lPage, iSize, uFlags);
	return result;
}

short CLeadctrl1::CreateUserBitmap(float fWidth, float fHeight, short iBitsPerPixel, const VARIANT& vData, long lDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x335, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel, &vData, lDataSize);
	return result;
}

short CLeadctrl1::SetBitmapDataPointer(const VARIANT& vData, long lDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x336, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vData, lDataSize);
	return result;
}

short CLeadctrl1::CombineBitmapWarp(const VARIANT& vXDstArray, const VARIANT& vYDstArray, long lDstPointCount, long hBitmap, long lXSrcPt, long lYSrcPt, long nSrcWidth, long nSrcHeight, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x337, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vXDstArray, &vYDstArray, lDstPointCount, hBitmap, lXSrcPt, lYSrcPt, nSrcWidth, nSrcHeight, uFlags);
	return result;
}

short CLeadctrl1::LoadOffset(LPCTSTR pszName, long lOffset, long lSize, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x338, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lOffset, lSize, iBitsPerPixel, lPage, lPages);
	return result;
}

BOOL CLeadctrl1::AnnGetNameVisible(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x339, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

long CLeadctrl1::AnnHitTest2(long hContainer, float x, float y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4;
	InvokeHelper(0x33a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hContainer, x, y);
	return result;
}

VARIANT CLeadctrl1::AnnGetSelectList2()
{
	VARIANT result;
	InvokeHelper(0x33b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::AnnSaveArray2(VARIANT* pvMem, short iFormat, BOOL bSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x33c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, iFormat, bSelected, iModify, lSavePage);
	return result;
}

CString CLeadctrl1::AnnGetName2(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

CLEADMarkers CLeadctrl1::LoadMarkers(LPCTSTR pszName, long lFlags)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		pszName, lFlags);
	return CLEADMarkers(pDispatch);
}

CLEADMarkers CLeadctrl1::CreateMarkers()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x33f, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLEADMarkers(pDispatch);
}

short CLeadctrl1::SetMarkers(LPDISPATCH pMarkers, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x340, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pMarkers, lFlags);
	return result;
}

CLEADMarkers CLeadctrl1::GetMarkers(long lFlags)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x341, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		lFlags);
	return CLEADMarkers(pDispatch);
}

short CLeadctrl1::WriteMetaData(LPCTSTR pszName, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x342, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lFlags);
	return result;
}

short CLeadctrl1::AnnEncryptApply(long hObject, long uEncryptFlags, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x343, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uEncryptFlags, bSelected);
	return result;
}

short CLeadctrl1::AnnDestroyMethod(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x344, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

long CLeadctrl1::AnnGetOptions()
{
	long result;
	InvokeHelper(0x345, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLeadctrl1::AnnSetOptions(long uOptions)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x346, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uOptions);
	return result;
}

short CLeadctrl1::SetMinMaxVal(long lMinVal, long lMaxVal)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x347, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lMinVal, lMaxVal);
	return result;
}

short CLeadctrl1::SetMinMaxBits(short iMinBit, short iMaxBit)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x348, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iMinBit, iMaxBit);
	return result;
}
