// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lead1.h"

// Dispatch interfaces referenced by this interface
#include "Font1.h"
#include "Picture1.h"
#include "AnnToolbar.h"
#include "annmenu.h"
#include "LEADScrollInfo.h"
#include "LEADMarkers.h"

/////////////////////////////////////////////////////////////////////////////
// CLEAD

IMPLEMENT_DYNCREATE(CLEAD, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLEAD properties

BOOL CLEAD::GetAutoSize()
{
	BOOL result;
	GetProperty(0xfffffe0c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoSize(BOOL propVal)
{
	SetProperty(0xfffffe0c, VT_BOOL, propVal);
}

long CLEAD::GetReadyState()
{
	long result;
	GetProperty(DISPID_READYSTATE, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetReadyState(long propVal)
{
	SetProperty(DISPID_READYSTATE, VT_I4, propVal);
}

short CLEAD::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

OLE_HANDLE CLEAD::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

COleFont CLEAD::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CLEAD::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CLEAD::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

short CLEAD::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

OLE_COLOR CLEAD::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

long CLEAD::GetBitmap()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmap(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

BOOL CLEAD::GetAutoRepaint()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoRepaint(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

short CLEAD::GetPaintEffect()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintEffect(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

BOOL CLEAD::GetBackErase()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetBackErase(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CLEAD::GetAutoScroll()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoScroll(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

short CLEAD::GetPaintDither()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintDither(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

BOOL CLEAD::GetEnableProgressEvent()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableProgressEvent(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

short CLEAD::GetBitonalScaling()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitonalScaling(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

BOOL CLEAD::GetPaintWhileLoad()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPaintWhileLoad(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

float CLEAD::GetBitmapWidth()
{
	float result;
	GetProperty(0xa, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapWidth(float propVal)
{
	SetProperty(0xa, VT_R4, propVal);
}

float CLEAD::GetBitmapHeight()
{
	float result;
	GetProperty(0xb, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapHeight(float propVal)
{
	SetProperty(0xb, VT_R4, propVal);
}

short CLEAD::GetBitmapBits()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapBits(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

short CLEAD::GetPaintPalette()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintPalette(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

BOOL CLEAD::GetEnableMethodErrors()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableMethodErrors(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

float CLEAD::GetDstLeft()
{
	float result;
	GetProperty(0xf, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstLeft(float propVal)
{
	SetProperty(0xf, VT_R4, propVal);
}

float CLEAD::GetDstTop()
{
	float result;
	GetProperty(0x10, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstTop(float propVal)
{
	SetProperty(0x10, VT_R4, propVal);
}

float CLEAD::GetDstWidth()
{
	float result;
	GetProperty(0x11, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstWidth(float propVal)
{
	SetProperty(0x11, VT_R4, propVal);
}

float CLEAD::GetDstHeight()
{
	float result;
	GetProperty(0x12, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstHeight(float propVal)
{
	SetProperty(0x12, VT_R4, propVal);
}

float CLEAD::GetDstClipLeft()
{
	float result;
	GetProperty(0x13, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstClipLeft(float propVal)
{
	SetProperty(0x13, VT_R4, propVal);
}

float CLEAD::GetDstClipTop()
{
	float result;
	GetProperty(0x14, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstClipTop(float propVal)
{
	SetProperty(0x14, VT_R4, propVal);
}

float CLEAD::GetDstClipWidth()
{
	float result;
	GetProperty(0x15, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstClipWidth(float propVal)
{
	SetProperty(0x15, VT_R4, propVal);
}

float CLEAD::GetDstClipHeight()
{
	float result;
	GetProperty(0x16, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetDstClipHeight(float propVal)
{
	SetProperty(0x16, VT_R4, propVal);
}

float CLEAD::GetSrcLeft()
{
	float result;
	GetProperty(0x17, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcLeft(float propVal)
{
	SetProperty(0x17, VT_R4, propVal);
}

float CLEAD::GetSrcTop()
{
	float result;
	GetProperty(0x18, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcTop(float propVal)
{
	SetProperty(0x18, VT_R4, propVal);
}

float CLEAD::GetSrcWidth()
{
	float result;
	GetProperty(0x19, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcWidth(float propVal)
{
	SetProperty(0x19, VT_R4, propVal);
}

float CLEAD::GetSrcHeight()
{
	float result;
	GetProperty(0x1a, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcHeight(float propVal)
{
	SetProperty(0x1a, VT_R4, propVal);
}

float CLEAD::GetSrcClipLeft()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcClipLeft(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

float CLEAD::GetSrcClipTop()
{
	float result;
	GetProperty(0x1c, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcClipTop(float propVal)
{
	SetProperty(0x1c, VT_R4, propVal);
}

float CLEAD::GetSrcClipWidth()
{
	float result;
	GetProperty(0x1d, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcClipWidth(float propVal)
{
	SetProperty(0x1d, VT_R4, propVal);
}

float CLEAD::GetSrcClipHeight()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSrcClipHeight(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

short CLEAD::GetBitmapXRes()
{
	short result;
	GetProperty(0x1f, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapXRes(short propVal)
{
	SetProperty(0x1f, VT_I2, propVal);
}

short CLEAD::GetBitmapYRes()
{
	short result;
	GetProperty(0x20, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapYRes(short propVal)
{
	SetProperty(0x20, VT_I2, propVal);
}

long CLEAD::GetInfoPage()
{
	long result;
	GetProperty(0x21, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoPage(long propVal)
{
	SetProperty(0x21, VT_I4, propVal);
}

float CLEAD::GetInfoWidth()
{
	float result;
	GetProperty(0x22, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetInfoWidth(float propVal)
{
	SetProperty(0x22, VT_R4, propVal);
}

float CLEAD::GetInfoHeight()
{
	float result;
	GetProperty(0x23, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetInfoHeight(float propVal)
{
	SetProperty(0x23, VT_R4, propVal);
}

short CLEAD::GetInfoBits()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetInfoBits(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

short CLEAD::GetInfoFormat()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetInfoFormat(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

long CLEAD::GetInfoSizeDisk()
{
	long result;
	GetProperty(0x26, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoSizeDisk(long propVal)
{
	SetProperty(0x26, VT_I4, propVal);
}

long CLEAD::GetInfoSizeMem()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoSizeMem(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}

CString CLEAD::GetInfoCompress()
{
	CString result;
	GetProperty(0x28, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetInfoCompress(LPCTSTR propVal)
{
	SetProperty(0x28, VT_BSTR, propVal);
}

BOOL CLEAD::GetRubberBandVisible()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetRubberBandVisible(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

float CLEAD::GetRubberBandLeft()
{
	float result;
	GetProperty(0x2a, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRubberBandLeft(float propVal)
{
	SetProperty(0x2a, VT_R4, propVal);
}

float CLEAD::GetRubberBandTop()
{
	float result;
	GetProperty(0x2b, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRubberBandTop(float propVal)
{
	SetProperty(0x2b, VT_R4, propVal);
}

float CLEAD::GetRubberBandWidth()
{
	float result;
	GetProperty(0x2c, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRubberBandWidth(float propVal)
{
	SetProperty(0x2c, VT_R4, propVal);
}

float CLEAD::GetRubberBandHeight()
{
	float result;
	GetProperty(0x2d, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRubberBandHeight(float propVal)
{
	SetProperty(0x2d, VT_R4, propVal);
}

short CLEAD::GetPCDRes()
{
	short result;
	GetProperty(0x2e, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPCDRes(short propVal)
{
	SetProperty(0x2e, VT_I2, propVal);
}

short CLEAD::GetMousePointer()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMousePointer(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

CPicture CLEAD::GetMouseIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0x30, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLEAD::SetMouseIcon(LPDISPATCH propVal)
{
	SetProperty(0x30, VT_DISPATCH, propVal);
}

short CLEAD::GetScaleMode()
{
	short result;
	GetProperty(0x31, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetScaleMode(short propVal)
{
	SetProperty(0x31, VT_I2, propVal);
}

BOOL CLEAD::GetAutoSetRects()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoSetRects(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}

float CLEAD::GetScaleLeft()
{
	float result;
	GetProperty(0x33, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetScaleLeft(float propVal)
{
	SetProperty(0x33, VT_R4, propVal);
}

float CLEAD::GetScaleTop()
{
	float result;
	GetProperty(0x34, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetScaleTop(float propVal)
{
	SetProperty(0x34, VT_R4, propVal);
}

float CLEAD::GetScaleWidth()
{
	float result;
	GetProperty(0x35, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetScaleWidth(float propVal)
{
	SetProperty(0x35, VT_R4, propVal);
}

float CLEAD::GetScaleHeight()
{
	float result;
	GetProperty(0x36, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetScaleHeight(float propVal)
{
	SetProperty(0x36, VT_R4, propVal);
}

BOOL CLEAD::GetDbCanAppend()
{
	BOOL result;
	GetProperty(0x37, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbCanAppend(BOOL propVal)
{
	SetProperty(0x37, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbCanRestart()
{
	BOOL result;
	GetProperty(0x38, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbCanRestart(BOOL propVal)
{
	SetProperty(0x38, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbCanScroll()
{
	BOOL result;
	GetProperty(0x39, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbCanScroll(BOOL propVal)
{
	SetProperty(0x39, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbCanUpdate()
{
	BOOL result;
	GetProperty(0x3a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbCanUpdate(BOOL propVal)
{
	SetProperty(0x3a, VT_BOOL, propVal);
}

long CLEAD::GetDbRecordCount()
{
	long result;
	GetProperty(0x3b, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDbRecordCount(long propVal)
{
	SetProperty(0x3b, VT_I4, propVal);
}

BOOL CLEAD::GetDbIsOpen()
{
	BOOL result;
	GetProperty(0x3c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbIsOpen(BOOL propVal)
{
	SetProperty(0x3c, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbIsBOF()
{
	BOOL result;
	GetProperty(0x3d, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbIsBOF(BOOL propVal)
{
	SetProperty(0x3d, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbIsEOF()
{
	BOOL result;
	GetProperty(0x3e, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbIsEOF(BOOL propVal)
{
	SetProperty(0x3e, VT_BOOL, propVal);
}

BOOL CLEAD::GetDbIsDeleted()
{
	BOOL result;
	GetProperty(0x3f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDbIsDeleted(BOOL propVal)
{
	SetProperty(0x3f, VT_BOOL, propVal);
}

long CLEAD::GetDbCurrentRecord()
{
	long result;
	GetProperty(0x40, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDbCurrentRecord(long propVal)
{
	SetProperty(0x40, VT_I4, propVal);
}

short CLEAD::GetDbEditMode()
{
	short result;
	GetProperty(0x41, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDbEditMode(short propVal)
{
	SetProperty(0x41, VT_I2, propVal);
}

short CLEAD::GetDbLockingMode()
{
	short result;
	GetProperty(0x42, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDbLockingMode(short propVal)
{
	SetProperty(0x42, VT_I2, propVal);
}

short CLEAD::GetDbLoadBits()
{
	short result;
	GetProperty(0x43, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDbLoadBits(short propVal)
{
	SetProperty(0x43, VT_I2, propVal);
}

BOOL CLEAD::GetForePalette()
{
	BOOL result;
	GetProperty(0x44, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetForePalette(BOOL propVal)
{
	SetProperty(0x44, VT_BOOL, propVal);
}

LPUNKNOWN CLEAD::GetDataSource()
{
	LPUNKNOWN result;
	GetProperty(0x45, VT_UNKNOWN, (void*)&result);
	return result;
}

void CLEAD::SetDataSource(LPUNKNOWN propVal)
{
	SetProperty(0x45, VT_UNKNOWN, propVal);
}

CString CLEAD::GetDataField()
{
	CString result;
	GetProperty(0x46, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetDataField(LPCTSTR propVal)
{
	SetProperty(0x46, VT_BSTR, propVal);
}

short CLEAD::GetDataSaveBits()
{
	short result;
	GetProperty(0x47, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDataSaveBits(short propVal)
{
	SetProperty(0x47, VT_I2, propVal);
}

short CLEAD::GetDataSaveFormat()
{
	short result;
	GetProperty(0x48, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDataSaveFormat(short propVal)
{
	SetProperty(0x48, VT_I2, propVal);
}

short CLEAD::GetDataSaveQuality()
{
	short result;
	GetProperty(0x49, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDataSaveQuality(short propVal)
{
	SetProperty(0x49, VT_I2, propVal);
}

short CLEAD::GetDataLoadBits()
{
	short result;
	GetProperty(0x4a, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDataLoadBits(short propVal)
{
	SetProperty(0x4a, VT_I2, propVal);
}

BOOL CLEAD::GetDataChanged()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDataChanged(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

long CLEAD::GetPaintROP3()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPaintROP3(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

short CLEAD::GetIsGrayscale()
{
	short result;
	GetProperty(0x4d, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetIsGrayscale(short propVal)
{
	SetProperty(0x4d, VT_I2, propVal);
}

BOOL CLEAD::GetHasRgn()
{
	BOOL result;
	GetProperty(0x4e, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetHasRgn(BOOL propVal)
{
	SetProperty(0x4e, VT_BOOL, propVal);
}

float CLEAD::GetRgnLeft()
{
	float result;
	GetProperty(0x4f, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRgnLeft(float propVal)
{
	SetProperty(0x4f, VT_R4, propVal);
}

float CLEAD::GetRgnTop()
{
	float result;
	GetProperty(0x50, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRgnTop(float propVal)
{
	SetProperty(0x50, VT_R4, propVal);
}

float CLEAD::GetRgnWidth()
{
	float result;
	GetProperty(0x51, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRgnWidth(float propVal)
{
	SetProperty(0x51, VT_R4, propVal);
}

float CLEAD::GetRgnHeight()
{
	float result;
	GetProperty(0x52, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetRgnHeight(float propVal)
{
	SetProperty(0x52, VT_R4, propVal);
}

short CLEAD::GetRgnMarkingMode()
{
	short result;
	GetProperty(0x53, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetRgnMarkingMode(short propVal)
{
	SetProperty(0x53, VT_I2, propVal);
}

short CLEAD::GetRgnFrameType()
{
	short result;
	GetProperty(0x54, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetRgnFrameType(short propVal)
{
	SetProperty(0x54, VT_I2, propVal);
}

long CLEAD::GetFloater()
{
	long result;
	GetProperty(0x55, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFloater(long propVal)
{
	SetProperty(0x55, VT_I4, propVal);
}

BOOL CLEAD::GetFloaterVisible()
{
	BOOL result;
	GetProperty(0x56, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetFloaterVisible(BOOL propVal)
{
	SetProperty(0x56, VT_BOOL, propVal);
}

float CLEAD::GetFloaterDstLeft()
{
	float result;
	GetProperty(0x57, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstLeft(float propVal)
{
	SetProperty(0x57, VT_R4, propVal);
}

float CLEAD::GetFloaterDstTop()
{
	float result;
	GetProperty(0x58, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstTop(float propVal)
{
	SetProperty(0x58, VT_R4, propVal);
}

float CLEAD::GetFloaterDstWidth()
{
	float result;
	GetProperty(0x59, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstWidth(float propVal)
{
	SetProperty(0x59, VT_R4, propVal);
}

float CLEAD::GetFloaterDstHeight()
{
	float result;
	GetProperty(0x5a, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstHeight(float propVal)
{
	SetProperty(0x5a, VT_R4, propVal);
}

float CLEAD::GetFloaterDstClipLeft()
{
	float result;
	GetProperty(0x5b, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstClipLeft(float propVal)
{
	SetProperty(0x5b, VT_R4, propVal);
}

float CLEAD::GetFloaterDstClipTop()
{
	float result;
	GetProperty(0x5c, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstClipTop(float propVal)
{
	SetProperty(0x5c, VT_R4, propVal);
}

float CLEAD::GetFloaterDstClipWidth()
{
	float result;
	GetProperty(0x5d, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstClipWidth(float propVal)
{
	SetProperty(0x5d, VT_R4, propVal);
}

float CLEAD::GetFloaterDstClipHeight()
{
	float result;
	GetProperty(0x5e, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterDstClipHeight(float propVal)
{
	SetProperty(0x5e, VT_R4, propVal);
}

float CLEAD::GetFloaterWidth()
{
	float result;
	GetProperty(0x5f, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterWidth(float propVal)
{
	SetProperty(0x5f, VT_R4, propVal);
}

float CLEAD::GetFloaterHeight()
{
	float result;
	GetProperty(0x60, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFloaterHeight(float propVal)
{
	SetProperty(0x60, VT_R4, propVal);
}

short CLEAD::GetPolygonSize()
{
	short result;
	GetProperty(0x61, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPolygonSize(short propVal)
{
	SetProperty(0x61, VT_I2, propVal);
}

short CLEAD::GetAnnUserMode()
{
	short result;
	GetProperty(0x62, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnnUserMode(short propVal)
{
	SetProperty(0x62, VT_I2, propVal);
}

short CLEAD::GetAnnTool()
{
	short result;
	GetProperty(0x63, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnnTool(short propVal)
{
	SetProperty(0x63, VT_I2, propVal);
}

BOOL CLEAD::GetAnnPasteReady()
{
	BOOL result;
	GetProperty(0x64, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnPasteReady(BOOL propVal)
{
	SetProperty(0x64, VT_BOOL, propVal);
}

long CLEAD::GetAnnContainer()
{
	long result;
	GetProperty(0x65, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnnContainer(long propVal)
{
	SetProperty(0x65, VT_I4, propVal);
}

short CLEAD::GetLoadInfoFormat()
{
	short result;
	GetProperty(0x66, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoFormat(short propVal)
{
	SetProperty(0x66, VT_I2, propVal);
}

float CLEAD::GetLoadInfoWidth()
{
	float result;
	GetProperty(0x67, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoWidth(float propVal)
{
	SetProperty(0x67, VT_R4, propVal);
}

float CLEAD::GetLoadInfoHeight()
{
	float result;
	GetProperty(0x68, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoHeight(float propVal)
{
	SetProperty(0x68, VT_R4, propVal);
}

short CLEAD::GetLoadInfoBits()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoBits(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

short CLEAD::GetLoadInfoXRes()
{
	short result;
	GetProperty(0x6a, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoXRes(short propVal)
{
	SetProperty(0x6a, VT_I2, propVal);
}

short CLEAD::GetLoadInfoYRes()
{
	short result;
	GetProperty(0x6b, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoYRes(short propVal)
{
	SetProperty(0x6b, VT_I2, propVal);
}

long CLEAD::GetLoadInfoOffset()
{
	long result;
	GetProperty(0x6c, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoOffset(long propVal)
{
	SetProperty(0x6c, VT_I4, propVal);
}

long CLEAD::GetLoadInfoFlags()
{
	long result;
	GetProperty(0x6d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetLoadInfoFlags(long propVal)
{
	SetProperty(0x6d, VT_I4, propVal);
}

long CLEAD::GetAnnAutomation()
{
	long result;
	GetProperty(0x6e, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutomation(long propVal)
{
	SetProperty(0x6e, VT_I4, propVal);
}

short CLEAD::GetProgressivePasses()
{
	short result;
	GetProperty(0x6f, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetProgressivePasses(short propVal)
{
	SetProperty(0x6f, VT_I2, propVal);
}

short CLEAD::GetBitmapListIndex()
{
	short result;
	GetProperty(0x70, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapListIndex(short propVal)
{
	SetProperty(0x70, VT_I2, propVal);
}

short CLEAD::GetBitmapListCount()
{
	short result;
	GetProperty(0x71, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapListCount(short propVal)
{
	SetProperty(0x71, VT_I2, propVal);
}

BOOL CLEAD::GetAnimationEnable()
{
	BOOL result;
	GetProperty(0x72, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnimationEnable(BOOL propVal)
{
	SetProperty(0x72, VT_BOOL, propVal);
}

float CLEAD::GetBitmapLeft()
{
	float result;
	GetProperty(0x73, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapLeft(float propVal)
{
	SetProperty(0x73, VT_R4, propVal);
}

float CLEAD::GetBitmapTop()
{
	float result;
	GetProperty(0x74, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapTop(float propVal)
{
	SetProperty(0x74, VT_R4, propVal);
}

long CLEAD::GetBitmapDelay()
{
	long result;
	GetProperty(0x75, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapDelay(long propVal)
{
	SetProperty(0x75, VT_I4, propVal);
}

float CLEAD::GetAnimationWidth()
{
	float result;
	GetProperty(0x76, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetAnimationWidth(float propVal)
{
	SetProperty(0x76, VT_R4, propVal);
}

float CLEAD::GetAnimationHeight()
{
	float result;
	GetProperty(0x77, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetAnimationHeight(float propVal)
{
	SetProperty(0x77, VT_R4, propVal);
}

unsigned long CLEAD::GetAnimationBackColor()
{
	unsigned long result;
	GetProperty(0x78, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnimationBackColor(unsigned long propVal)
{
	SetProperty(0x78, VT_I4, propVal);
}

short CLEAD::GetAnimationBitsPerPixel()
{
	short result;
	GetProperty(0x79, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnimationBitsPerPixel(short propVal)
{
	SetProperty(0x79, VT_I2, propVal);
}

BOOL CLEAD::GetBitmapEnableTransparency()
{
	BOOL result;
	GetProperty(0x7a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetBitmapEnableTransparency(BOOL propVal)
{
	SetProperty(0x7a, VT_BOOL, propVal);
}

unsigned long CLEAD::GetBitmapTransparentColor()
{
	unsigned long result;
	GetProperty(0x7b, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapTransparentColor(unsigned long propVal)
{
	SetProperty(0x7b, VT_I4, propVal);
}

short CLEAD::GetBitmapDisposalMethod()
{
	short result;
	GetProperty(0x7c, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapDisposalMethod(short propVal)
{
	SetProperty(0x7c, VT_I2, propVal);
}

long CLEAD::GetBitmapList()
{
	long result;
	GetProperty(0x7d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapList(long propVal)
{
	SetProperty(0x7d, VT_I4, propVal);
}

BOOL CLEAD::GetAnnAutoMenuEnable()
{
	BOOL result;
	GetProperty(0x7e, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutoMenuEnable(BOOL propVal)
{
	SetProperty(0x7e, VT_BOOL, propVal);
}

BOOL CLEAD::GetAutoAnimate()
{
	BOOL result;
	GetProperty(0x7f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoAnimate(BOOL propVal)
{
	SetProperty(0x7f, VT_BOOL, propVal);
}

BOOL CLEAD::GetAnimationLoop()
{
	BOOL result;
	GetProperty(0x80, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnimationLoop(BOOL propVal)
{
	SetProperty(0x80, VT_BOOL, propVal);
}

float CLEAD::GetInfoAnimationWidth()
{
	float result;
	GetProperty(0x81, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetInfoAnimationWidth(float propVal)
{
	SetProperty(0x81, VT_R4, propVal);
}

float CLEAD::GetInfoAnimationHeight()
{
	float result;
	GetProperty(0x82, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetInfoAnimationHeight(float propVal)
{
	SetProperty(0x82, VT_R4, propVal);
}

BOOL CLEAD::GetInfoAnimation()
{
	BOOL result;
	GetProperty(0x83, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetInfoAnimation(BOOL propVal)
{
	SetProperty(0x83, VT_BOOL, propVal);
}

CString CLEAD::GetBitmapDataPath()
{
	CString result;
	GetProperty(0x84, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetBitmapDataPath(LPCTSTR propVal)
{
	SetProperty(0x84, VT_BSTR, propVal);
}

short CLEAD::GetPaintSizeMode()
{
	short result;
	GetProperty(0x85, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintSizeMode(short propVal)
{
	SetProperty(0x85, VT_I2, propVal);
}

float CLEAD::GetPaintZoomFactor()
{
	float result;
	GetProperty(0x86, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPaintZoomFactor(float propVal)
{
	SetProperty(0x86, VT_R4, propVal);
}

short CLEAD::GetAutoAnimationLoop()
{
	short result;
	GetProperty(0x87, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAutoAnimationLoop(short propVal)
{
	SetProperty(0x87, VT_I2, propVal);
}

BOOL CLEAD::GetAnnAutoDrawEnable()
{
	BOOL result;
	GetProperty(0x88, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutoDrawEnable(BOOL propVal)
{
	SetProperty(0x88, VT_BOOL, propVal);
}

short CLEAD::GetLoadResolutionCount()
{
	short result;
	GetProperty(0x89, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadResolutionCount(short propVal)
{
	SetProperty(0x89, VT_I2, propVal);
}

BOOL CLEAD::GetOLEDropAllowed()
{
	BOOL result;
	GetProperty(0x8a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetOLEDropAllowed(BOOL propVal)
{
	SetProperty(0x8a, VT_BOOL, propVal);
}

BOOL CLEAD::GetAutoRubberBand()
{
	BOOL result;
	GetProperty(0x8b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoRubberBand(BOOL propVal)
{
	SetProperty(0x8b, VT_BOOL, propVal);
}

BOOL CLEAD::GetSaveInterlaced()
{
	BOOL result;
	GetProperty(0x8c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSaveInterlaced(BOOL propVal)
{
	SetProperty(0x8c, VT_BOOL, propVal);
}

BOOL CLEAD::GetPaintSizeUseDPI()
{
	BOOL result;
	GetProperty(0x8d, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPaintSizeUseDPI(BOOL propVal)
{
	SetProperty(0x8d, VT_BOOL, propVal);
}

CString CLEAD::GetAnnDataPath()
{
	CString result;
	GetProperty(0x8e, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetAnnDataPath(LPCTSTR propVal)
{
	SetProperty(0x8e, VT_BSTR, propVal);
}

BOOL CLEAD::GetDrawPersistence()
{
	BOOL result;
	GetProperty(0x8f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDrawPersistence(BOOL propVal)
{
	SetProperty(0x8f, VT_BOOL, propVal);
}

short CLEAD::GetDrawMode()
{
	short result;
	GetProperty(0x90, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDrawMode(short propVal)
{
	SetProperty(0x90, VT_I2, propVal);
}

unsigned long CLEAD::GetDrawPenColor()
{
	unsigned long result;
	GetProperty(0x91, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDrawPenColor(unsigned long propVal)
{
	SetProperty(0x91, VT_I4, propVal);
}

short CLEAD::GetDrawPenWidth()
{
	short result;
	GetProperty(0x92, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDrawPenWidth(short propVal)
{
	SetProperty(0x92, VT_I2, propVal);
}

short CLEAD::GetDrawPenStyle()
{
	short result;
	GetProperty(0x93, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDrawPenStyle(short propVal)
{
	SetProperty(0x93, VT_I2, propVal);
}

unsigned long CLEAD::GetDrawFillColor()
{
	unsigned long result;
	GetProperty(0x94, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDrawFillColor(unsigned long propVal)
{
	SetProperty(0x94, VT_I4, propVal);
}

short CLEAD::GetDrawFillStyle()
{
	short result;
	GetProperty(0x95, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetDrawFillStyle(short propVal)
{
	SetProperty(0x95, VT_I2, propVal);
}

unsigned long CLEAD::GetDrawFontColor()
{
	unsigned long result;
	GetProperty(0x96, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDrawFontColor(unsigned long propVal)
{
	SetProperty(0x96, VT_I4, propVal);
}

short CLEAD::GetPaintContrast()
{
	short result;
	GetProperty(0x97, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintContrast(short propVal)
{
	SetProperty(0x97, VT_I2, propVal);
}

short CLEAD::GetPaintGamma()
{
	short result;
	GetProperty(0x98, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintGamma(short propVal)
{
	SetProperty(0x98, VT_I2, propVal);
}

short CLEAD::GetPaintIntensity()
{
	short result;
	GetProperty(0x99, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintIntensity(short propVal)
{
	SetProperty(0x99, VT_I2, propVal);
}

BOOL CLEAD::GetLoadUseViewPerspective()
{
	BOOL result;
	GetProperty(0x9a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetLoadUseViewPerspective(BOOL propVal)
{
	SetProperty(0x9a, VT_BOOL, propVal);
}

BOOL CLEAD::GetAnnAutoRotate()
{
	BOOL result;
	GetProperty(0x9b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutoRotate(BOOL propVal)
{
	SetProperty(0x9b, VT_BOOL, propVal);
}

short CLEAD::GetTransitionStyle()
{
	short result;
	GetProperty(0x9c, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetTransitionStyle(short propVal)
{
	SetProperty(0x9c, VT_I2, propVal);
}

short CLEAD::GetTransitionEffect()
{
	short result;
	GetProperty(0x9d, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetTransitionEffect(short propVal)
{
	SetProperty(0x9d, VT_I2, propVal);
}

short CLEAD::GetGradientStyle()
{
	short result;
	GetProperty(0x9e, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetGradientStyle(short propVal)
{
	SetProperty(0x9e, VT_I2, propVal);
}

unsigned long CLEAD::GetGradientStartColor()
{
	unsigned long result;
	GetProperty(0x9f, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetGradientStartColor(unsigned long propVal)
{
	SetProperty(0x9f, VT_I4, propVal);
}

unsigned long CLEAD::GetGradientEndColor()
{
	unsigned long result;
	GetProperty(0xa0, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetGradientEndColor(unsigned long propVal)
{
	SetProperty(0xa0, VT_I4, propVal);
}

short CLEAD::GetGradientSteps()
{
	short result;
	GetProperty(0xa1, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetGradientSteps(short propVal)
{
	SetProperty(0xa1, VT_I2, propVal);
}

short CLEAD::GetPatternStyle()
{
	short result;
	GetProperty(0xa2, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPatternStyle(short propVal)
{
	SetProperty(0xa2, VT_I2, propVal);
}

unsigned long CLEAD::GetPatternForeColor()
{
	unsigned long result;
	GetProperty(0xa3, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPatternForeColor(unsigned long propVal)
{
	SetProperty(0xa3, VT_I4, propVal);
}

unsigned long CLEAD::GetPatternBackColor()
{
	unsigned long result;
	GetProperty(0xa4, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPatternBackColor(unsigned long propVal)
{
	SetProperty(0xa4, VT_I4, propVal);
}

short CLEAD::GetPaintPass()
{
	short result;
	GetProperty(0xa5, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintPass(short propVal)
{
	SetProperty(0xa5, VT_I2, propVal);
}

short CLEAD::GetPaintMaxPasses()
{
	short result;
	GetProperty(0xa6, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintMaxPasses(short propVal)
{
	SetProperty(0xa6, VT_I2, propVal);
}

short CLEAD::GetEffectGrain()
{
	short result;
	GetProperty(0xa7, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetEffectGrain(short propVal)
{
	SetProperty(0xa7, VT_I2, propVal);
}

short CLEAD::GetEffectDelay()
{
	short result;
	GetProperty(0xa8, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetEffectDelay(short propVal)
{
	SetProperty(0xa8, VT_I2, propVal);
}

short CLEAD::GetWandSize()
{
	short result;
	GetProperty(0xa9, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetWandSize(short propVal)
{
	SetProperty(0xa9, VT_I2, propVal);
}

unsigned long CLEAD::GetWandColor()
{
	unsigned long result;
	GetProperty(0xaa, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetWandColor(unsigned long propVal)
{
	SetProperty(0xaa, VT_I4, propVal);
}

BOOL CLEAD::GetPaintRgnOnly()
{
	BOOL result;
	GetProperty(0xab, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPaintRgnOnly(BOOL propVal)
{
	SetProperty(0xab, VT_BOOL, propVal);
}

float CLEAD::GetShapeLeft()
{
	float result;
	GetProperty(0xac, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeLeft(float propVal)
{
	SetProperty(0xac, VT_R4, propVal);
}

float CLEAD::GetShapeTop()
{
	float result;
	GetProperty(0xad, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeTop(float propVal)
{
	SetProperty(0xad, VT_R4, propVal);
}

float CLEAD::GetShapeWidth()
{
	float result;
	GetProperty(0xae, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeWidth(float propVal)
{
	SetProperty(0xae, VT_R4, propVal);
}

float CLEAD::GetShapeHeight()
{
	float result;
	GetProperty(0xaf, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeHeight(float propVal)
{
	SetProperty(0xaf, VT_R4, propVal);
}

float CLEAD::GetShapeBorderThickness()
{
	float result;
	GetProperty(0xb0, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeBorderThickness(float propVal)
{
	SetProperty(0xb0, VT_R4, propVal);
}

unsigned long CLEAD::GetShapeBorderColor()
{
	unsigned long result;
	GetProperty(0xb1, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShapeBorderColor(unsigned long propVal)
{
	SetProperty(0xb1, VT_I4, propVal);
}

short CLEAD::GetShapeInnerBandStyle()
{
	short result;
	GetProperty(0xb2, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetShapeInnerBandStyle(short propVal)
{
	SetProperty(0xb2, VT_I2, propVal);
}

float CLEAD::GetShapeInnerBandThickness()
{
	float result;
	GetProperty(0xb3, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeInnerBandThickness(float propVal)
{
	SetProperty(0xb3, VT_R4, propVal);
}

unsigned long CLEAD::GetShapeInnerBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xb4, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShapeInnerBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xb4, VT_I4, propVal);
}

unsigned long CLEAD::GetShapeInnerBandShadowColor()
{
	unsigned long result;
	GetProperty(0xb5, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShapeInnerBandShadowColor(unsigned long propVal)
{
	SetProperty(0xb5, VT_I4, propVal);
}

short CLEAD::GetShapeOuterBandStyle()
{
	short result;
	GetProperty(0xb6, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetShapeOuterBandStyle(short propVal)
{
	SetProperty(0xb6, VT_I2, propVal);
}

float CLEAD::GetShapeOuterBandThickness()
{
	float result;
	GetProperty(0xb7, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShapeOuterBandThickness(float propVal)
{
	SetProperty(0xb7, VT_R4, propVal);
}

unsigned long CLEAD::GetShapeOuterBandHiliteColor()
{
	unsigned long result;
	GetProperty(0xb8, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShapeOuterBandHiliteColor(unsigned long propVal)
{
	SetProperty(0xb8, VT_I4, propVal);
}

unsigned long CLEAD::GetShapeOuterBandShadowColor()
{
	unsigned long result;
	GetProperty(0xb9, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShapeOuterBandShadowColor(unsigned long propVal)
{
	SetProperty(0xb9, VT_I4, propVal);
}

short CLEAD::GetShapeBackgroundStyle()
{
	short result;
	GetProperty(0xba, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetShapeBackgroundStyle(short propVal)
{
	SetProperty(0xba, VT_I2, propVal);
}

float CLEAD::GetBackgroundImageLeft()
{
	float result;
	GetProperty(0xbb, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBackgroundImageLeft(float propVal)
{
	SetProperty(0xbb, VT_R4, propVal);
}

float CLEAD::GetBackgroundImageTop()
{
	float result;
	GetProperty(0xbc, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBackgroundImageTop(float propVal)
{
	SetProperty(0xbc, VT_R4, propVal);
}

float CLEAD::GetBackgroundImageWidth()
{
	float result;
	GetProperty(0xbd, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBackgroundImageWidth(float propVal)
{
	SetProperty(0xbd, VT_R4, propVal);
}

float CLEAD::GetBackgroundImageHeight()
{
	float result;
	GetProperty(0xbe, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetBackgroundImageHeight(float propVal)
{
	SetProperty(0xbe, VT_R4, propVal);
}

float CLEAD::GetShadowXDepth()
{
	float result;
	GetProperty(0xbf, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShadowXDepth(float propVal)
{
	SetProperty(0xbf, VT_R4, propVal);
}

float CLEAD::GetShadowYDepth()
{
	float result;
	GetProperty(0xc0, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetShadowYDepth(float propVal)
{
	SetProperty(0xc0, VT_R4, propVal);
}

unsigned long CLEAD::GetShadowColor()
{
	unsigned long result;
	GetProperty(0xc1, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetShadowColor(unsigned long propVal)
{
	SetProperty(0xc1, VT_I4, propVal);
}

unsigned long CLEAD::GetTextHiliteColor()
{
	unsigned long result;
	GetProperty(0xc2, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetTextHiliteColor(unsigned long propVal)
{
	SetProperty(0xc2, VT_I4, propVal);
}

float CLEAD::GetTextLeft()
{
	float result;
	GetProperty(0xc3, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetTextLeft(float propVal)
{
	SetProperty(0xc3, VT_R4, propVal);
}

float CLEAD::GetTextTop()
{
	float result;
	GetProperty(0xc4, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetTextTop(float propVal)
{
	SetProperty(0xc4, VT_R4, propVal);
}

float CLEAD::GetTextWidth()
{
	float result;
	GetProperty(0xc5, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetTextWidth(float propVal)
{
	SetProperty(0xc5, VT_R4, propVal);
}

float CLEAD::GetTextHeight()
{
	float result;
	GetProperty(0xc6, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetTextHeight(float propVal)
{
	SetProperty(0xc6, VT_R4, propVal);
}

short CLEAD::GetTextAngle()
{
	short result;
	GetProperty(0xc7, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetTextAngle(short propVal)
{
	SetProperty(0xc7, VT_I2, propVal);
}

short CLEAD::GetTextStyle()
{
	short result;
	GetProperty(0xc8, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetTextStyle(short propVal)
{
	SetProperty(0xc8, VT_I2, propVal);
}

short CLEAD::GetShapeBorderStyle()
{
	short result;
	GetProperty(0xc9, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetShapeBorderStyle(short propVal)
{
	SetProperty(0xc9, VT_I2, propVal);
}

float CLEAD::GetFrameThickness()
{
	float result;
	GetProperty(0xca, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFrameThickness(float propVal)
{
	SetProperty(0xca, VT_R4, propVal);
}

unsigned long CLEAD::GetFrameColor()
{
	unsigned long result;
	GetProperty(0xcb, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFrameColor(unsigned long propVal)
{
	SetProperty(0xcb, VT_I4, propVal);
}

short CLEAD::GetFrameInnerStyle()
{
	short result;
	GetProperty(0xcc, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetFrameInnerStyle(short propVal)
{
	SetProperty(0xcc, VT_I2, propVal);
}

float CLEAD::GetFrameInnerThickness()
{
	float result;
	GetProperty(0xcd, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFrameInnerThickness(float propVal)
{
	SetProperty(0xcd, VT_R4, propVal);
}

unsigned long CLEAD::GetFrameInnerHiliteColor()
{
	unsigned long result;
	GetProperty(0xce, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFrameInnerHiliteColor(unsigned long propVal)
{
	SetProperty(0xce, VT_I4, propVal);
}

unsigned long CLEAD::GetFrameInnerShadowColor()
{
	unsigned long result;
	GetProperty(0xcf, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFrameInnerShadowColor(unsigned long propVal)
{
	SetProperty(0xcf, VT_I4, propVal);
}

short CLEAD::GetFrameOuterStyle()
{
	short result;
	GetProperty(0xd0, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetFrameOuterStyle(short propVal)
{
	SetProperty(0xd0, VT_I2, propVal);
}

float CLEAD::GetFrameOuterThickness()
{
	float result;
	GetProperty(0xd1, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetFrameOuterThickness(float propVal)
{
	SetProperty(0xd1, VT_R4, propVal);
}

unsigned long CLEAD::GetFrameOuterHiliteColor()
{
	unsigned long result;
	GetProperty(0xd2, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFrameOuterHiliteColor(unsigned long propVal)
{
	SetProperty(0xd2, VT_I4, propVal);
}

unsigned long CLEAD::GetFrameOuterShadowColor()
{
	unsigned long result;
	GetProperty(0xd3, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFrameOuterShadowColor(unsigned long propVal)
{
	SetProperty(0xd3, VT_I4, propVal);
}

short CLEAD::GetTextAlign()
{
	short result;
	GetProperty(0xd4, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetTextAlign(short propVal)
{
	SetProperty(0xd4, VT_I2, propVal);
}

BOOL CLEAD::GetTextWordWrap()
{
	BOOL result;
	GetProperty(0xd5, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetTextWordWrap(BOOL propVal)
{
	SetProperty(0xd5, VT_BOOL, propVal);
}

long CLEAD::GetBitmapAlpha()
{
	long result;
	GetProperty(0xd6, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapAlpha(long propVal)
{
	SetProperty(0xd6, VT_I4, propVal);
}

short CLEAD::GetPaintNotificationDelay()
{
	short result;
	GetProperty(0xd7, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintNotificationDelay(short propVal)
{
	SetProperty(0xd7, VT_I2, propVal);
}

BOOL CLEAD::GetTransparent()
{
	BOOL result;
	GetProperty(0xd8, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetTransparent(BOOL propVal)
{
	SetProperty(0xd8, VT_BOOL, propVal);
}

short CLEAD::GetLevelLowBit()
{
	short result;
	GetProperty(0xd9, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLevelLowBit(short propVal)
{
	SetProperty(0xd9, VT_I2, propVal);
}

short CLEAD::GetLevelHighBit()
{
	short result;
	GetProperty(0xda, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLevelHighBit(short propVal)
{
	SetProperty(0xda, VT_I2, propVal);
}

long CLEAD::GetLevelLUTLength()
{
	long result;
	GetProperty(0xdb, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetLevelLUTLength(long propVal)
{
	SetProperty(0xdb, VT_I4, propVal);
}

long CLEAD::GetMinVal()
{
	long result;
	GetProperty(0xdc, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetMinVal(long propVal)
{
	SetProperty(0xdc, VT_I4, propVal);
}

long CLEAD::GetMaxVal()
{
	long result;
	GetProperty(0xdd, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetMaxVal(long propVal)
{
	SetProperty(0xdd, VT_I4, propVal);
}

short CLEAD::GetMinBit()
{
	short result;
	GetProperty(0xde, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMinBit(short propVal)
{
	SetProperty(0xde, VT_I2, propVal);
}

short CLEAD::GetMaxBit()
{
	short result;
	GetProperty(0xdf, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMaxBit(short propVal)
{
	SetProperty(0xdf, VT_I2, propVal);
}

BOOL CLEAD::GetAnnShowLockedIcon()
{
	BOOL result;
	GetProperty(0xe0, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnShowLockedIcon(BOOL propVal)
{
	SetProperty(0xe0, VT_BOOL, propVal);
}

BOOL CLEAD::GetAnnHyperlinkMenuEnable()
{
	BOOL result;
	GetProperty(0xe1, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnHyperlinkMenuEnable(BOOL propVal)
{
	SetProperty(0xe1, VT_BOOL, propVal);
}

BOOL CLEAD::GetEnableZoomInRect()
{
	BOOL result;
	GetProperty(0xe2, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableZoomInRect(BOOL propVal)
{
	SetProperty(0xe2, VT_BOOL, propVal);
}

float CLEAD::GetPanWinX()
{
	float result;
	GetProperty(0xe3, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPanWinX(float propVal)
{
	SetProperty(0xe3, VT_R4, propVal);
}

float CLEAD::GetPanWinY()
{
	float result;
	GetProperty(0xe4, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPanWinY(float propVal)
{
	SetProperty(0xe4, VT_R4, propVal);
}

float CLEAD::GetPanWinWidth()
{
	float result;
	GetProperty(0xe5, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPanWinWidth(float propVal)
{
	SetProperty(0xe5, VT_R4, propVal);
}

float CLEAD::GetPanWinHeight()
{
	float result;
	GetProperty(0xe6, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPanWinHeight(float propVal)
{
	SetProperty(0xe6, VT_R4, propVal);
}

unsigned long CLEAD::GetPanWinRectColor()
{
	unsigned long result;
	GetProperty(0xe7, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPanWinRectColor(unsigned long propVal)
{
	SetProperty(0xe7, VT_I4, propVal);
}

CString CLEAD::GetPanWinTitle()
{
	CString result;
	GetProperty(0xe8, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetPanWinTitle(LPCTSTR propVal)
{
	SetProperty(0xe8, VT_BSTR, propVal);
}

BOOL CLEAD::GetPanWinSysMenu()
{
	BOOL result;
	GetProperty(0xe9, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPanWinSysMenu(BOOL propVal)
{
	SetProperty(0xe9, VT_BOOL, propVal);
}

short CLEAD::GetPanWinPaintPalette()
{
	short result;
	GetProperty(0xea, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPanWinPaintPalette(short propVal)
{
	SetProperty(0xea, VT_I2, propVal);
}

short CLEAD::GetPanWinBitonalScaling()
{
	short result;
	GetProperty(0xeb, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPanWinBitonalScaling(short propVal)
{
	SetProperty(0xeb, VT_I2, propVal);
}

short CLEAD::GetPanWinPaintDither()
{
	short result;
	GetProperty(0xec, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPanWinPaintDither(short propVal)
{
	SetProperty(0xec, VT_I2, propVal);
}

CPicture CLEAD::GetPanWinIcon()
{
	LPDISPATCH pDispatch;
	GetProperty(0xed, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLEAD::SetPanWinIcon(LPDISPATCH propVal)
{
	SetProperty(0xed, VT_DISPATCH, propVal);
}

short CLEAD::GetPanWinPointer()
{
	short result;
	GetProperty(0xee, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPanWinPointer(short propVal)
{
	SetProperty(0xee, VT_I2, propVal);
}

CPicture CLEAD::GetPanWinCursor()
{
	LPDISPATCH pDispatch;
	GetProperty(0xef, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLEAD::SetPanWinCursor(LPDISPATCH propVal)
{
	SetProperty(0xef, VT_DISPATCH, propVal);
}

long CLEAD::GetInfoTotalPages()
{
	long result;
	GetProperty(0xf0, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoTotalPages(long propVal)
{
	SetProperty(0xf0, VT_I4, propVal);
}

long CLEAD::GetSavePage()
{
	long result;
	GetProperty(0xf1, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetSavePage(long propVal)
{
	SetProperty(0xf1, VT_I4, propVal);
}

long CLEAD::GetAnimationBitmap()
{
	long result;
	GetProperty(0xf2, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnimationBitmap(long propVal)
{
	SetProperty(0xf2, VT_I4, propVal);
}

BOOL CLEAD::GetOLEDropAutoLoad()
{
	BOOL result;
	GetProperty(0xf3, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetOLEDropAutoLoad(BOOL propVal)
{
	SetProperty(0xf3, VT_BOOL, propVal);
}

long CLEAD::GetWMFResolution()
{
	long result;
	GetProperty(0xf4, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetWMFResolution(long propVal)
{
	SetProperty(0xf4, VT_I4, propVal);
}

long CLEAD::GetInfoXRes()
{
	long result;
	GetProperty(0xf5, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoXRes(long propVal)
{
	SetProperty(0xf5, VT_I4, propVal);
}

long CLEAD::GetInfoYRes()
{
	long result;
	GetProperty(0xf6, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoYRes(long propVal)
{
	SetProperty(0xf6, VT_I4, propVal);
}

BOOL CLEAD::GetRefBitmap()
{
	BOOL result;
	GetProperty(0xf7, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetRefBitmap(BOOL propVal)
{
	SetProperty(0xf7, VT_BOOL, propVal);
}

BOOL CLEAD::GetWindowLevelBitmap()
{
	BOOL result;
	GetProperty(0xf8, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetWindowLevelBitmap(BOOL propVal)
{
	SetProperty(0xf8, VT_BOOL, propVal);
}

short CLEAD::GetSaveResolutionCount()
{
	short result;
	GetProperty(0xf9, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetSaveResolutionCount(short propVal)
{
	SetProperty(0xf9, VT_I2, propVal);
}

BOOL CLEAD::GetAutoPan()
{
	BOOL result;
	GetProperty(0xfa, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAutoPan(BOOL propVal)
{
	SetProperty(0xfa, VT_BOOL, propVal);
}

float CLEAD::GetPrinterScaleWidth()
{
	float result;
	GetProperty(0xfb, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPrinterScaleWidth(float propVal)
{
	SetProperty(0xfb, VT_R4, propVal);
}

float CLEAD::GetPrinterScaleHeight()
{
	float result;
	GetProperty(0xfc, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetPrinterScaleHeight(float propVal)
{
	SetProperty(0xfc, VT_R4, propVal);
}

CAnnToolbar CLEAD::GetAnnToolbar()
{
	LPDISPATCH pDispatch;
	GetProperty(0xfd, VT_DISPATCH, (void*)&pDispatch);
	return CAnnToolbar(pDispatch);
}

void CLEAD::SetAnnToolbar(LPDISPATCH propVal)
{
	SetProperty(0xfd, VT_DISPATCH, propVal);
}

BOOL CLEAD::GetSaveLSB()
{
	BOOL result;
	GetProperty(0xff, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSaveLSB(BOOL propVal)
{
	SetProperty(0xff, VT_BOOL, propVal);
}

BOOL CLEAD::GetSavePageNumberTag()
{
	BOOL result;
	GetProperty(0x100, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSavePageNumberTag(BOOL propVal)
{
	SetProperty(0x100, VT_BOOL, propVal);
}

short CLEAD::GetLoadCompressed()
{
	short result;
	GetProperty(0x101, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetLoadCompressed(short propVal)
{
	SetProperty(0x101, VT_I2, propVal);
}

short CLEAD::GetPaintScaling()
{
	short result;
	GetProperty(0x102, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPaintScaling(short propVal)
{
	SetProperty(0x102, VT_I2, propVal);
}

short CLEAD::GetPanWinPaintScaling()
{
	short result;
	GetProperty(0x103, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPanWinPaintScaling(short propVal)
{
	SetProperty(0x103, VT_I2, propVal);
}

BOOL CLEAD::GetEnablePaint()
{
	BOOL result;
	GetProperty(0x104, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnablePaint(BOOL propVal)
{
	SetProperty(0x104, VT_BOOL, propVal);
}

BOOL CLEAD::GetRefBitmapList()
{
	BOOL result;
	GetProperty(0x105, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetRefBitmapList(BOOL propVal)
{
	SetProperty(0x105, VT_BOOL, propVal);
}

short CLEAD::GetMagGlassMaskCount()
{
	short result;
	GetProperty(0x106, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMagGlassMaskCount(short propVal)
{
	SetProperty(0x106, VT_I2, propVal);
}

short CLEAD::GetPreferredLoadFormat()
{
	short result;
	GetProperty(0x107, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetPreferredLoadFormat(short propVal)
{
	SetProperty(0x107, VT_I2, propVal);
}

long CLEAD::GetDocCleanSuccess()
{
	long result;
	GetProperty(0x108, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDocCleanSuccess(long propVal)
{
	SetProperty(0x108, VT_I4, propVal);
}

long CLEAD::GetHDocCleanRgn()
{
	long result;
	GetProperty(0x109, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetHDocCleanRgn(long propVal)
{
	SetProperty(0x109, VT_I4, propVal);
}

long CLEAD::GetDocCleanBitmap()
{
	long result;
	GetProperty(0x10a, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetDocCleanBitmap(long propVal)
{
	SetProperty(0x10a, VT_I4, propVal);
}

unsigned long CLEAD::GetRgnFrameColor()
{
	unsigned long result;
	GetProperty(0x10b, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetRgnFrameColor(unsigned long propVal)
{
	SetProperty(0x10b, VT_I4, propVal);
}

long CLEAD::GetInfoIFD()
{
	long result;
	GetProperty(0x10c, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetInfoIFD(long propVal)
{
	SetProperty(0x10c, VT_I4, propVal);
}

long CLEAD::GetLoadIFD()
{
	long result;
	GetProperty(0x10d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetLoadIFD(long propVal)
{
	SetProperty(0x10d, VT_I4, propVal);
}

long CLEAD::GetSaveIFD()
{
	long result;
	GetProperty(0x10e, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetSaveIFD(long propVal)
{
	SetProperty(0x10e, VT_I4, propVal);
}

BOOL CLEAD::GetAnnUndoEnable()
{
	BOOL result;
	GetProperty(0x10f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnUndoEnable(BOOL propVal)
{
	SetProperty(0x10f, VT_BOOL, propVal);
}

short CLEAD::GetAnnUndoDepth()
{
	short result;
	GetProperty(0x110, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnnUndoDepth(short propVal)
{
	SetProperty(0x110, VT_I2, propVal);
}

short CLEAD::GetAnnAutoDialogFontSize()
{
	short result;
	GetProperty(0x111, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutoDialogFontSize(short propVal)
{
	SetProperty(0x111, VT_I2, propVal);
}

short CLEAD::GetMagGlassFlags()
{
	short result;
	GetProperty(0x112, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMagGlassFlags(short propVal)
{
	SetProperty(0x112, VT_I2, propVal);
}

BOOL CLEAD::GetEnableMagGlassEvent()
{
	BOOL result;
	GetProperty(0x113, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableMagGlassEvent(BOOL propVal)
{
	SetProperty(0x113, VT_BOOL, propVal);
}

short CLEAD::GetInfoViewPerspective()
{
	short result;
	GetProperty(0x114, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetInfoViewPerspective(short propVal)
{
	SetProperty(0x114, VT_I2, propVal);
}

BOOL CLEAD::GetAnnAutoResize()
{
	BOOL result;
	GetProperty(0x115, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnnAutoResize(BOOL propVal)
{
	SetProperty(0x115, VT_BOOL, propVal);
}

float CLEAD::GetConvertX()
{
	float result;
	GetProperty(0x116, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetConvertX(float propVal)
{
	SetProperty(0x116, VT_R4, propVal);
}

float CLEAD::GetConvertY()
{
	float result;
	GetProperty(0x117, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetConvertY(float propVal)
{
	SetProperty(0x117, VT_R4, propVal);
}

long CLEAD::GetPDFXResolution()
{
	long result;
	GetProperty(0x118, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPDFXResolution(long propVal)
{
	SetProperty(0x118, VT_I4, propVal);
}

long CLEAD::GetPDFYResolution()
{
	long result;
	GetProperty(0x119, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPDFYResolution(long propVal)
{
	SetProperty(0x119, VT_I4, propVal);
}

long CLEAD::GetPDFDisplayDepth()
{
	long result;
	GetProperty(0x11a, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPDFDisplayDepth(long propVal)
{
	SetProperty(0x11a, VT_I4, propVal);
}

long CLEAD::GetPDFTextAlpha()
{
	long result;
	GetProperty(0x11b, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPDFTextAlpha(long propVal)
{
	SetProperty(0x11b, VT_I4, propVal);
}

long CLEAD::GetPDFGraphicsAlpha()
{
	long result;
	GetProperty(0x11c, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetPDFGraphicsAlpha(long propVal)
{
	SetProperty(0x11c, VT_I4, propVal);
}

BOOL CLEAD::GetPDFUseLibFonts()
{
	BOOL result;
	GetProperty(0x11d, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPDFUseLibFonts(BOOL propVal)
{
	SetProperty(0x11d, VT_BOOL, propVal);
}

short CLEAD::GetRasterizeViewportWidth()
{
	short result;
	GetProperty(0x11e, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetRasterizeViewportWidth(short propVal)
{
	SetProperty(0x11e, VT_I2, propVal);
}

short CLEAD::GetRasterizeViewportHeight()
{
	short result;
	GetProperty(0x11f, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetRasterizeViewportHeight(short propVal)
{
	SetProperty(0x11f, VT_I2, propVal);
}

short CLEAD::GetRasterizeViewMode()
{
	short result;
	GetProperty(0x120, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetRasterizeViewMode(short propVal)
{
	SetProperty(0x120, VT_I2, propVal);
}

long CLEAD::GetHistogramGrayTableSize()
{
	long result;
	GetProperty(0x121, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetHistogramGrayTableSize(long propVal)
{
	SetProperty(0x121, VT_I4, propVal);
}

BOOL CLEAD::GetSavePad4()
{
	BOOL result;
	GetProperty(0x122, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSavePad4(BOOL propVal)
{
	SetProperty(0x122, VT_BOOL, propVal);
}

long CLEAD::GetFileSizeWritten()
{
	long result;
	GetProperty(0x123, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetFileSizeWritten(long propVal)
{
	SetProperty(0x123, VT_I4, propVal);
}

BOOL CLEAD::GetInfoHasAlpha()
{
	BOOL result;
	GetProperty(0x124, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetInfoHasAlpha(BOOL propVal)
{
	SetProperty(0x124, VT_BOOL, propVal);
}

CString CLEAD::GetPDFPassword()
{
	CString result;
	GetProperty(0x125, VT_BSTR, (void*)&result);
	return result;
}

void CLEAD::SetPDFPassword(LPCTSTR propVal)
{
	SetProperty(0x125, VT_BSTR, propVal);
}

BOOL CLEAD::GetEnableKeyboard()
{
	BOOL result;
	GetProperty(0x126, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableKeyboard(BOOL propVal)
{
	SetProperty(0x126, VT_BOOL, propVal);
}

BOOL CLEAD::GetEnableScroll()
{
	BOOL result;
	GetProperty(0x127, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableScroll(BOOL propVal)
{
	SetProperty(0x127, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KUseColorTransform()
{
	BOOL result;
	GetProperty(0x128, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KUseColorTransform(BOOL propVal)
{
	SetProperty(0x128, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KDerivedQuantization()
{
	BOOL result;
	GetProperty(0x129, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KDerivedQuantization(BOOL propVal)
{
	SetProperty(0x129, VT_BOOL, propVal);
}

short CLEAD::GetJ2KCompressionControl()
{
	short result;
	GetProperty(0x12a, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCompressionControl(short propVal)
{
	SetProperty(0x12a, VT_I2, propVal);
}

float CLEAD::GetJ2KCompressionRatio()
{
	float result;
	GetProperty(0x12b, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCompressionRatio(float propVal)
{
	SetProperty(0x12b, VT_R4, propVal);
}

long CLEAD::GetJ2KTargetFileSize()
{
	long result;
	GetProperty(0x12c, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KTargetFileSize(long propVal)
{
	SetProperty(0x12c, VT_I4, propVal);
}

long CLEAD::GetJ2KXOsiz()
{
	long result;
	GetProperty(0x12d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KXOsiz(long propVal)
{
	SetProperty(0x12d, VT_I4, propVal);
}

long CLEAD::GetJ2KYOsiz()
{
	long result;
	GetProperty(0x12e, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KYOsiz(long propVal)
{
	SetProperty(0x12e, VT_I4, propVal);
}

long CLEAD::GetJ2KXTsiz()
{
	long result;
	GetProperty(0x12f, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KXTsiz(long propVal)
{
	SetProperty(0x12f, VT_I4, propVal);
}

long CLEAD::GetJ2KYTsiz()
{
	long result;
	GetProperty(0x130, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KYTsiz(long propVal)
{
	SetProperty(0x130, VT_I4, propVal);
}

long CLEAD::GetJ2KXTOsiz()
{
	long result;
	GetProperty(0x131, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KXTOsiz(long propVal)
{
	SetProperty(0x131, VT_I4, propVal);
}

long CLEAD::GetJ2KYTOsiz()
{
	long result;
	GetProperty(0x132, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KYTOsiz(long propVal)
{
	SetProperty(0x132, VT_I4, propVal);
}

long CLEAD::GetJ2KDecompLevel()
{
	long result;
	GetProperty(0x133, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KDecompLevel(long propVal)
{
	SetProperty(0x133, VT_I4, propVal);
}

long CLEAD::GetJ2KProgressOrder()
{
	long result;
	GetProperty(0x134, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KProgressOrder(long propVal)
{
	SetProperty(0x134, VT_I4, propVal);
}

long CLEAD::GetJ2KCodBlockWidth()
{
	long result;
	GetProperty(0x135, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCodBlockWidth(long propVal)
{
	SetProperty(0x135, VT_I4, propVal);
}

long CLEAD::GetJ2KCodBlockHeight()
{
	long result;
	GetProperty(0x136, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCodBlockHeight(long propVal)
{
	SetProperty(0x136, VT_I4, propVal);
}

BOOL CLEAD::GetJ2KCBS_SelectiveACBypass()
{
	BOOL result;
	GetProperty(0x137, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_SelectiveACBypass(BOOL propVal)
{
	SetProperty(0x137, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KCBS_ResetContextOnBoundaries()
{
	BOOL result;
	GetProperty(0x138, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_ResetContextOnBoundaries(BOOL propVal)
{
	SetProperty(0x138, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KCBS_TerminationOnEachPass()
{
	BOOL result;
	GetProperty(0x139, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_TerminationOnEachPass(BOOL propVal)
{
	SetProperty(0x139, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KCBS_VerticallyCausalContext()
{
	BOOL result;
	GetProperty(0x13a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_VerticallyCausalContext(BOOL propVal)
{
	SetProperty(0x13a, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KCBS_PredictableTermination()
{
	BOOL result;
	GetProperty(0x13b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_PredictableTermination(BOOL propVal)
{
	SetProperty(0x13b, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KCBS_ErrorResilienceSymbol()
{
	BOOL result;
	GetProperty(0x13c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KCBS_ErrorResilienceSymbol(BOOL propVal)
{
	SetProperty(0x13c, VT_BOOL, propVal);
}

long CLEAD::GetJ2KGuardBits()
{
	long result;
	GetProperty(0x13d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KGuardBits(long propVal)
{
	SetProperty(0x13d, VT_I4, propVal);
}

long CLEAD::GetJ2KDerivedBaseMantissa()
{
	long result;
	GetProperty(0x13e, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KDerivedBaseMantissa(long propVal)
{
	SetProperty(0x13e, VT_I4, propVal);
}

long CLEAD::GetJ2KDerivedBaseExponent()
{
	long result;
	GetProperty(0x13f, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KDerivedBaseExponent(long propVal)
{
	SetProperty(0x13f, VT_I4, propVal);
}

BOOL CLEAD::GetJ2KUseSOPMarker()
{
	BOOL result;
	GetProperty(0x140, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KUseSOPMarker(BOOL propVal)
{
	SetProperty(0x140, VT_BOOL, propVal);
}

BOOL CLEAD::GetJ2KUseEPHMarker()
{
	BOOL result;
	GetProperty(0x141, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KUseEPHMarker(BOOL propVal)
{
	SetProperty(0x141, VT_BOOL, propVal);
}

BOOL CLEAD::GetPDFSaveUseDPI()
{
	BOOL result;
	GetProperty(0x142, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPDFSaveUseDPI(BOOL propVal)
{
	SetProperty(0x142, VT_BOOL, propVal);
}

float CLEAD::GetCustomTileWidth()
{
	float result;
	GetProperty(0x143, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetCustomTileWidth(float propVal)
{
	SetProperty(0x143, VT_R4, propVal);
}

float CLEAD::GetCustomTileHeight()
{
	float result;
	GetProperty(0x144, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetCustomTileHeight(float propVal)
{
	SetProperty(0x144, VT_R4, propVal);
}

long CLEAD::GetCustomCompressionTag()
{
	long result;
	GetProperty(0x145, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetCustomCompressionTag(long propVal)
{
	SetProperty(0x145, VT_I4, propVal);
}

short CLEAD::GetCustomPlanarConfiguration()
{
	short result;
	GetProperty(0x146, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetCustomPlanarConfiguration(short propVal)
{
	SetProperty(0x146, VT_I2, propVal);
}

short CLEAD::GetCustomPhotoMetricInterpretation()
{
	short result;
	GetProperty(0x147, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetCustomPhotoMetricInterpretation(short propVal)
{
	SetProperty(0x147, VT_I2, propVal);
}

BOOL CLEAD::GetHasMagGlass()
{
	BOOL result;
	GetProperty(0x148, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetHasMagGlass(BOOL propVal)
{
	SetProperty(0x148, VT_BOOL, propVal);
}

CLEADScrollInfo CLEAD::GetHScrollInfo()
{
	LPDISPATCH pDispatch;
	GetProperty(0x149, VT_DISPATCH, (void*)&pDispatch);
	return CLEADScrollInfo(pDispatch);
}

void CLEAD::SetHScrollInfo(LPDISPATCH propVal)
{
	SetProperty(0x149, VT_DISPATCH, propVal);
}

CLEADScrollInfo CLEAD::GetVScrollInfo()
{
	LPDISPATCH pDispatch;
	GetProperty(0x14a, VT_DISPATCH, (void*)&pDispatch);
	return CLEADScrollInfo(pDispatch);
}

void CLEAD::SetVScrollInfo(LPDISPATCH propVal)
{
	SetProperty(0x14a, VT_DISPATCH, propVal);
}

BOOL CLEAD::GetCenterImage()
{
	BOOL result;
	GetProperty(0x14b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetCenterImage(BOOL propVal)
{
	SetProperty(0x14b, VT_BOOL, propVal);
}

long CLEAD::GetCurveSize()
{
	long result;
	GetProperty(0x14d, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetCurveSize(long propVal)
{
	SetProperty(0x14d, VT_I4, propVal);
}

long CLEAD::GetCurveType()
{
	long result;
	GetProperty(0x14e, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetCurveType(long propVal)
{
	SetProperty(0x14e, VT_I4, propVal);
}

float CLEAD::GetCurveTension()
{
	float result;
	GetProperty(0x14f, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetCurveTension(float propVal)
{
	SetProperty(0x14f, VT_R4, propVal);
}

short CLEAD::GetCurveClose()
{
	short result;
	GetProperty(0x150, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetCurveClose(short propVal)
{
	SetProperty(0x150, VT_I2, propVal);
}

long CLEAD::GetBezierSize()
{
	long result;
	GetProperty(0x151, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBezierSize(long propVal)
{
	SetProperty(0x151, VT_I4, propVal);
}

short CLEAD::GetWriteMarkerAction()
{
	short result;
	GetProperty(0x152, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetWriteMarkerAction(short propVal)
{
	SetProperty(0x152, VT_I2, propVal);
}

long CLEAD::GetLineProfileSize()
{
	long result;
	GetProperty(0x153, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetLineProfileSize(long propVal)
{
	SetProperty(0x153, VT_I4, propVal);
}

long CLEAD::GetSaveBufferAddress()
{
	long result;
	GetProperty(0x154, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetSaveBufferAddress(long propVal)
{
	SetProperty(0x154, VT_I4, propVal);
}

long CLEAD::GetSaveBufferSize()
{
	long result;
	GetProperty(0x155, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetSaveBufferSize(long propVal)
{
	SetProperty(0x155, VT_I4, propVal);
}

BOOL CLEAD::GetEnableSaveBufferEvent()
{
	BOOL result;
	GetProperty(0x156, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableSaveBufferEvent(BOOL propVal)
{
	SetProperty(0x156, VT_BOOL, propVal);
}

long CLEAD::GetAnnInfoVersion()
{
	long result;
	GetProperty(0x157, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnnInfoVersion(long propVal)
{
	SetProperty(0x157, VT_I4, propVal);
}

long CLEAD::GetAnnInfoFormat()
{
	long result;
	GetProperty(0x158, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnnInfoFormat(long propVal)
{
	SetProperty(0x158, VT_I4, propVal);
}

long CLEAD::GetAnnInfoTotalPages()
{
	long result;
	GetProperty(0x159, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetAnnInfoTotalPages(long propVal)
{
	SetProperty(0x159, VT_I4, propVal);
}

BOOL CLEAD::GetIsSigned()
{
	BOOL result;
	GetProperty(0x15a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetIsSigned(BOOL propVal)
{
	SetProperty(0x15a, VT_BOOL, propVal);
}

BOOL CLEAD::GetLoadSigned()
{
	BOOL result;
	GetProperty(0x15b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetLoadSigned(BOOL propVal)
{
	SetProperty(0x15b, VT_BOOL, propVal);
}

short CLEAD::GetInfoLayers()
{
	short result;
	GetProperty(0x15c, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetInfoLayers(short propVal)
{
	SetProperty(0x15c, VT_I2, propVal);
}

BOOL CLEAD::GetSaveLayers()
{
	BOOL result;
	GetProperty(0x15d, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSaveLayers(BOOL propVal)
{
	SetProperty(0x15d, VT_BOOL, propVal);
}

float CLEAD::GetSaveTileWidth()
{
	float result;
	GetProperty(0x15e, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSaveTileWidth(float propVal)
{
	SetProperty(0x15e, VT_R4, propVal);
}

float CLEAD::GetSaveTileHeight()
{
	float result;
	GetProperty(0x15f, VT_R4, (void*)&result);
	return result;
}

void CLEAD::SetSaveTileHeight(float propVal)
{
	SetProperty(0x15f, VT_R4, propVal);
}

short CLEAD::GetBitmapCompression()
{
	short result;
	GetProperty(0x160, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetBitmapCompression(short propVal)
{
	SetProperty(0x160, VT_I2, propVal);
}

long CLEAD::GetBitmapSize()
{
	long result;
	GetProperty(0x161, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetBitmapSize(long propVal)
{
	SetProperty(0x161, VT_I4, propVal);
}

long CLEAD::GetRemapTableSize()
{
	long result;
	GetProperty(0x162, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetRemapTableSize(long propVal)
{
	SetProperty(0x162, VT_I4, propVal);
}

long CLEAD::GetHistogramTableSize()
{
	long result;
	GetProperty(0x163, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetHistogramTableSize(long propVal)
{
	SetProperty(0x163, VT_I4, propVal);
}

long CLEAD::GetUserLUTCurveSize()
{
	long result;
	GetProperty(0x164, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetUserLUTCurveSize(long propVal)
{
	SetProperty(0x164, VT_I4, propVal);
}

BOOL CLEAD::GetSaveNoPalette()
{
	BOOL result;
	GetProperty(0x165, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSaveNoPalette(BOOL propVal)
{
	SetProperty(0x165, VT_BOOL, propVal);
}

short CLEAD::GetMagGlassPaintContrast()
{
	short result;
	GetProperty(0x166, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMagGlassPaintContrast(short propVal)
{
	SetProperty(0x166, VT_I2, propVal);
}

short CLEAD::GetMagGlassPaintGamma()
{
	short result;
	GetProperty(0x167, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMagGlassPaintGamma(short propVal)
{
	SetProperty(0x167, VT_I2, propVal);
}

short CLEAD::GetMagGlassPaintIntensity()
{
	short result;
	GetProperty(0x168, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetMagGlassPaintIntensity(short propVal)
{
	SetProperty(0x168, VT_I2, propVal);
}

BOOL CLEAD::GetEnableFilePageLoadedEvent()
{
	BOOL result;
	GetProperty(0x169, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableFilePageLoadedEvent(BOOL propVal)
{
	SetProperty(0x169, VT_BOOL, propVal);
}

BOOL CLEAD::GetSaveOldJTIF()
{
	BOOL result;
	GetProperty(0x16a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetSaveOldJTIF(BOOL propVal)
{
	SetProperty(0x16a, VT_BOOL, propVal);
}

BOOL CLEAD::GetLoadAppend()
{
	BOOL result;
	GetProperty(0x16b, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetLoadAppend(BOOL propVal)
{
	SetProperty(0x16b, VT_BOOL, propVal);
}

BOOL CLEAD::GetAnimationPause()
{
	BOOL result;
	GetProperty(0x16c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetAnimationPause(BOOL propVal)
{
	SetProperty(0x16c, VT_BOOL, propVal);
}

short CLEAD::GetAnimationFrameIndex()
{
	short result;
	GetProperty(0x16d, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetAnimationFrameIndex(short propVal)
{
	SetProperty(0x16d, VT_I2, propVal);
}

BOOL CLEAD::GetUseLUT()
{
	BOOL result;
	GetProperty(0x16e, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetUseLUT(BOOL propVal)
{
	SetProperty(0x16e, VT_BOOL, propVal);
}

BOOL CLEAD::GetRenderCenter()
{
	BOOL result;
	GetProperty(0x16f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetRenderCenter(BOOL propVal)
{
	SetProperty(0x16f, VT_BOOL, propVal);
}

short CLEAD::GetJ2KROIControl()
{
	short result;
	GetProperty(0x170, VT_I2, (void*)&result);
	return result;
}

void CLEAD::SetJ2KROIControl(short propVal)
{
	SetProperty(0x170, VT_I2, propVal);
}

BOOL CLEAD::GetJ2KUseROI()
{
	BOOL result;
	GetProperty(0x171, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetJ2KUseROI(BOOL propVal)
{
	SetProperty(0x171, VT_BOOL, propVal);
}

long CLEAD::GetJ2KROILeft()
{
	long result;
	GetProperty(0x172, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KROILeft(long propVal)
{
	SetProperty(0x172, VT_I4, propVal);
}

long CLEAD::GetJ2KROITop()
{
	long result;
	GetProperty(0x173, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KROITop(long propVal)
{
	SetProperty(0x173, VT_I4, propVal);
}

long CLEAD::GetJ2KROIWidth()
{
	long result;
	GetProperty(0x174, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KROIWidth(long propVal)
{
	SetProperty(0x174, VT_I4, propVal);
}

long CLEAD::GetJ2KROIHeight()
{
	long result;
	GetProperty(0x175, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetJ2KROIHeight(long propVal)
{
	SetProperty(0x175, VT_I4, propVal);
}

BOOL CLEAD::GetPDFSaveLowMemUsage()
{
	BOOL result;
	GetProperty(0x176, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPDFSaveLowMemUsage(BOOL propVal)
{
	SetProperty(0x176, VT_BOOL, propVal);
}

BOOL CLEAD::GetPDFDisableCropping()
{
	BOOL result;
	GetProperty(0x177, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetPDFDisableCropping(BOOL propVal)
{
	SetProperty(0x177, VT_BOOL, propVal);
}

BOOL CLEAD::GetDoubleBuffer()
{
	BOOL result;
	GetProperty(0x178, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetDoubleBuffer(BOOL propVal)
{
	SetProperty(0x178, VT_BOOL, propVal);
}

BOOL CLEAD::GetEnableFastRender()
{
	BOOL result;
	GetProperty(0x179, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableFastRender(BOOL propVal)
{
	SetProperty(0x179, VT_BOOL, propVal);
}

BOOL CLEAD::GetForceEPSThumbnail()
{
	BOOL result;
	GetProperty(0x17a, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetForceEPSThumbnail(BOOL propVal)
{
	SetProperty(0x17a, VT_BOOL, propVal);
}

long CLEAD::GetRemapHueTablesSize()
{
	long result;
	GetProperty(0x17b, VT_I4, (void*)&result);
	return result;
}

void CLEAD::SetRemapHueTablesSize(long propVal)
{
	SetProperty(0x17b, VT_I4, propVal);
}

BOOL CLEAD::GetEnableMouseWheel()
{
	BOOL result;
	GetProperty(0x17c, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableMouseWheel(BOOL propVal)
{
	SetProperty(0x17c, VT_BOOL, propVal);
}

BOOL CLEAD::GetEnableOLEDragMethod()
{
	BOOL result;
	GetProperty(0x17d, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetEnableOLEDragMethod(BOOL propVal)
{
	SetProperty(0x17d, VT_BOOL, propVal);
}

CPicture CLEAD::GetOLEDragCursor()
{
	LPDISPATCH pDispatch;
	GetProperty(0x17e, VT_DISPATCH, (void*)&pDispatch);
	return CPicture(pDispatch);
}

void CLEAD::SetOLEDragCursor(LPDISPATCH propVal)
{
	SetProperty(0x17e, VT_DISPATCH, propVal);
}

BOOL CLEAD::GetBitmapDataPathWriteCache()
{
	BOOL result;
	GetProperty(0x17f, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetBitmapDataPathWriteCache(BOOL propVal)
{
	SetProperty(0x17f, VT_BOOL, propVal);
}

BOOL CLEAD::GetBitmapValues()
{
	BOOL result;
	GetProperty(0x180, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetBitmapValues(BOOL propVal)
{
	SetProperty(0x180, VT_BOOL, propVal);
}

BOOL CLEAD::GetBitmapDataPathForceReload()
{
	BOOL result;
	GetProperty(0x181, VT_BOOL, (void*)&result);
	return result;
}

void CLEAD::SetBitmapDataPathForceReload(BOOL propVal)
{
	SetProperty(0x181, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLEAD operations

void CLEAD::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CLEAD::Average(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x183, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLEAD::Median(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x184, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLEAD::Contrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x185, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLEAD::Despeckle()
{
	short result;
	InvokeHelper(0x186, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::Flip()
{
	short result;
	InvokeHelper(0x187, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::Grayscale(short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x188, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel);
	return result;
}

short CLEAD::HistoEqualize(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x189, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::Hue(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLEAD::Intensity(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLEAD::Invert()
{
	short result;
	InvokeHelper(0x18c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::Sharpen(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLEAD::Saturation(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLEAD::Reverse()
{
	short result;
	InvokeHelper(0x18f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::ForceRepaint()
{
	short result;
	InvokeHelper(0x190, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::Mosaic(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x191, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLEAD::SpatialFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x192, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLEAD::BinaryFilter(short iType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x193, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType);
	return result;
}

short CLEAD::Save(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x194, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLEAD::Posterize(short iLevels)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x195, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLevels);
	return result;
}

CPicture CLEAD::GetPicture()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x196, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPicture(pDispatch);
}

short CLEAD::SetPicture(LPDISPATCH pPicture)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x197, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pPicture);
	return result;
}

short CLEAD::Rotate(long iAngle, short iFlags, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x198, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, iFlags, crFill);
	return result;
}

short CLEAD::Emboss(short iDirection, short iDepth)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x199, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDirection, iDepth);
	return result;
}

short CLEAD::AddNoise(short iRange, short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x19a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRange, iChannel);
	return result;
}

short CLEAD::IntensityDetect(short iLow, short iHigh)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x19b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLow, iHigh);
	return result;
}

short CLEAD::Fill(unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crFill);
	return result;
}

short CLEAD::StretchIntensity()
{
	short result;
	InvokeHelper(0x19d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::GammaCorrect(short iGamma)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iGamma);
	return result;
}

short CLEAD::Shear(short iAngle, BOOL bHorizontal, unsigned long crFill)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_I4;
	InvokeHelper(0x19f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle, bHorizontal, crFill);
	return result;
}

short CLEAD::CreateBitmap(float fWidth, float fHeight, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1a0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel);
	return result;
}

short CLEAD::Render(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1a1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

long CLEAD::GetBitmapDC()
{
	long result;
	InvokeHelper(0x1a2, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLEAD::ReleaseBitmapDC()
{
	short result;
	InvokeHelper(0x1a3, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::Halftone(short iType, long iAngle, short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I2;
	InvokeHelper(0x1a4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iType, iAngle, iDim);
	return result;
}

short CLEAD::Size(float fWidth, float fHeight, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1a5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iFlags);
	return result;
}

short CLEAD::Copy(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::Paste(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::Load(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x1a8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages);
	return result;
}

short CLEAD::SetDIB(long hDIB)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDIB);
	return result;
}

short CLEAD::SetDDB(long hDC, long hBitmap, long hPalette)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1aa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, hBitmap, hPalette);
	return result;
}

long CLEAD::GetDDB(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ab, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

short CLEAD::RemapIntensity(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1ac, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLEAD::GetHistogram(short iChannel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1ad, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChannel);
	return result;
}

short CLEAD::ColorRes(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1ae, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

short CLEAD::Capture(long hDC, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1af, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hDC, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::ColorSeparate(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::ColorMerge(long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::Underlay(long hBitmap, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1b2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iFlags);
	return result;
}

short CLEAD::Combine(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x1b3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iFlags);
	return result;
}

short CLEAD::SetDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::SetDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::SetSrcRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::SetSrcClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::Trim(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1b8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::HistoContrast(short iChange)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1b9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iChange);
	return result;
}

short CLEAD::GetFileInfo(LPCTSTR pszName, long lPage, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x1ba, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage, uFlags);
	return result;
}

short CLEAD::SaveWithStamp(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, float fStampWidth, float fStampHeight, short iStampBits)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1bb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, fStampWidth, fStampHeight, iStampBits);
	return result;
}

short CLEAD::LoadStamp(LPCTSTR pszName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1bc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName);
	return result;
}

void CLEAD::SetRubberBandRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1bd, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fLeft, fTop, fWidth, fHeight);
}

long CLEAD::GetClientDC()
{
	long result;
	InvokeHelper(0x1be, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLEAD::ReleaseClientDC()
{
	short result;
	InvokeHelper(0x1bf, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CLEAD::dbAddNew()
{
	InvokeHelper(0x1c0, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbDelete()
{
	InvokeHelper(0x1c1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbEdit()
{
	InvokeHelper(0x1c2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbMove(long lRows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 lRows);
}

void CLEAD::dbMoveFirst()
{
	InvokeHelper(0x1c4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbMoveLast()
{
	InvokeHelper(0x1c5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbMoveNext()
{
	InvokeHelper(0x1c6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbMovePrev()
{
	InvokeHelper(0x1c7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CLEAD::dbClose()
{
	InvokeHelper(0x1c8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CLEAD::GetPalette(long hDC)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC);
	return result;
}

BOOL CLEAD::dbRequery()
{
	BOOL result;
	InvokeHelper(0x1ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CLEAD::dbOpen(LPCTSTR pszConnect, LPCTSTR pszSQL, LPCTSTR pszField, long iOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x1cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pszConnect, pszSQL, pszField, iOptions);
	return result;
}

short CLEAD::dbUpdate(short iFormat, short iBitsPerPixel, short iQuality)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1cc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality);
	return result;
}

long CLEAD::PrintStart()
{
	long result;
	InvokeHelper(0x1cd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CLEAD::PrintEnd(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ce, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

void CLEAD::UnlockSupport(short iType, LPCTSTR pszKey)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x1cf, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iType, pszKey);
}

BOOL CLEAD::IsSupportLocked(short iType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iType);
	return result;
}

short CLEAD::StartFeedLoad(short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x1d1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, lPage, lPages);
	return result;
}

short CLEAD::StopFeedLoad()
{
	short result;
	InvokeHelper(0x1d2, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::SaveMemory(long* phMem, short iFormat, short iBitsPerPixel, short iQuality, long* piSize)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_I2 VTS_I2 VTS_PI4;
	InvokeHelper(0x1d3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, iBitsPerPixel, iQuality, piSize);
	return result;
}

short CLEAD::LoadMemory(long hMem, short iBitsPerPixel, long lPage, long lPages, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iBitsPerPixel, lPage, lPages, iSize);
	return result;
}

short CLEAD::GetMemoryInfo(long hMem, long lPage, long iSize, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1d5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, lPage, iSize, uFlags);
	return result;
}

short CLEAD::FeedLoad(const VARIANT& vBuffer, long iSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x1d6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vBuffer, iSize);
	return result;
}

BOOL CLEAD::DeleteRgnHandle(long hRgn)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hRgn);
	return result;
}

short CLEAD::FreeRgn()
{
	short result;
	InvokeHelper(0x1d8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLEAD::GetRgnArea()
{
	long result;
	InvokeHelper(0x1d9, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CLEAD::GetRgnHandle()
{
	long result;
	InvokeHelper(0x1da, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL CLEAD::IsPtInRgn(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1db, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

short CLEAD::OffsetRgn(float fDx, float fDy)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1dc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fDx, fDy);
	return result;
}

short CLEAD::SetRgnColor(unsigned long crMatch, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1dd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crMatch, iCombineMode);
	return result;
}

short CLEAD::SetRgnHandle(long hRgn, float fDx, float fDy, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1de, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hRgn, fDx, fDy, iCombineMode);
	return result;
}

short CLEAD::SetRgnEllipse(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1df, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLEAD::SetRgnRect(float fLeft, float fTop, float fWidth, float fHeight, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1e0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, iCombineMode);
	return result;
}

short CLEAD::SetRgnRoundRect(float fLeft, float fTop, float fWidth, float fHeight, float fWidthEllipse, float fHeightEllipse, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x1e1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, fWidthEllipse, fHeightEllipse, iCombineMode);
	return result;
}

BOOL CLEAD::IsPtInFloater(float fx, float fy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x1e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fx, fy);
	return result;
}

long CLEAD::GetFloaterHandle()
{
	long result;
	InvokeHelper(0x1e3, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLEAD::SetFloaterDstRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1e4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::SetFloaterDstClipRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x1e5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::SetRgnPolygon(short iFillMode, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1e6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFillMode, iCombineMode);
	return result;
}

short CLEAD::RepaintRect(float fLeft, float fTop, float fWidth, float fHeight, BOOL bErase)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x1e7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, bErase);
	return result;
}

short CLEAD::AnnSetTag(long hObject, long iTag)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1e8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iTag);
	return result;
}

long CLEAD::AnnGetTag(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1e9, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1ea, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSave(LPCTSTR pszFile, short iFormat, BOOL fSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x1eb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, iFormat, fSelected, iModify, lSavePage);
	return result;
}

short CLEAD::AnnLoad(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1ec, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLEAD::AnnCopy(short iFormat, BOOL fSelected, BOOL fEmpty)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x1ed, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fSelected, fEmpty);
	return result;
}

short CLEAD::AnnPaste()
{
	short result;
	InvokeHelper(0x1ee, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::AnnRealize(BOOL fRedactOnly)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1ef, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fRedactOnly);
	return result;
}

short CLEAD::AnnFlip(BOOL bUseHorz, float fHorz, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseHorz, fHorz, bSelected);
	return result;
}

short CLEAD::AnnReverse(BOOL bUseVert, float fVert, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseVert, fVert, bSelected);
	return result;
}

short CLEAD::AnnRotate(BOOL bUseCenter, float fCenterX, float fCenterY, float fAngle, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_R4 VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x1f2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseCenter, fCenterX, fCenterY, fAngle, bSelected);
	return result;
}

short CLEAD::AnnSetAutoText(short iItem, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x1f3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iItem, pszText);
	return result;
}

CString CLEAD::AnnGetAutoText(short iItem)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1f4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iItem);
	return result;
}

short CLEAD::ColorResList(short iBitsPerPixel, short iPalette, short iDither, short iColors)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iBitsPerPixel, iPalette, iDither, iColors);
	return result;
}

long CLEAD::GetColorCount()
{
	long result;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLEAD::InsertBitmapListItem(short iIndex, long hBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, hBitmap);
	return result;
}

short CLEAD::ReadLoadResolutions(LPCTSTR pszFile)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile);
	return result;
}

short CLEAD::SetLoadResolution(short iFormat, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x1f9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, fWidth, fHeight);
	return result;
}

short CLEAD::GetLoadResolution(short iFormat)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1fa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat);
	return result;
}

short CLEAD::GetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLEAD::SetServerBitmap(long pServer)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pServer);
	return result;
}

short CLEAD::DeleteBitmapListItems(short iIndex, short iCount)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1fd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iIndex, iCount);
	return result;
}

short CLEAD::AnnLoadMemory(long hMem, long iSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1fe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iSize, lPage);
	return result;
}

short CLEAD::AnnSaveMemory(long* phMem, short iFormat, BOOL bSelected, long* piSize, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PI4 VTS_I2 VTS_BOOL VTS_PI4 VTS_I2 VTS_I4;
	InvokeHelper(0x1ff, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		phMem, iFormat, bSelected, piSize, iModify, lSavePage);
	return result;
}

short CLEAD::DrawEllipse(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x200, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::DrawRectangle(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x201, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::DrawLine(float fX1, float fY1, float fX2, float fY2)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x202, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fX1, fY1, fX2, fY2);
	return result;
}

short CLEAD::DrawTextOut(float fx, float fy, LPCTSTR pszText)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BSTR;
	InvokeHelper(0x203, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fx, fy, pszText);
	return result;
}

float CLEAD::DrawTextWidth(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x204, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

float CLEAD::DrawTextHeight(LPCTSTR pszText)
{
	float result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x205, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		pszText);
	return result;
}

short CLEAD::ZoomToRect(float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x206, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::Solarize(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x207, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLEAD::AutoTrim(short iThreshold)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x208, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold);
	return result;
}

short CLEAD::MinFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x209, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLEAD::MaxFilter(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x20a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

short CLEAD::Oilify(short iDim)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x20b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim);
	return result;
}

VARIANT CLEAD::ReadComment(LPCTSTR pszFile, long lPage, short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2;
	InvokeHelper(0x20c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		pszFile, lPage, iIndex);
	return result;
}

long CLEAD::AnnGetPointCount(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLEAD::AnnGetPointX(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20e, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

VARIANT CLEAD::AnnGetPointY(long hObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetSelectCount()
{
	short result;
	InvokeHelper(0x210, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

VARIANT CLEAD::AnnGetSelectList()
{
	VARIANT result;
	InvokeHelper(0x211, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CLEAD::FastRotate(short iAngle)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x212, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAngle);
	return result;
}

short CLEAD::AnnMove(float dxOffset, float dyOffset, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x213, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dxOffset, dyOffset, bSelected);
	return result;
}

short CLEAD::DrawShape(short uShape, long BackgroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x214, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uShape, BackgroundImage);
	return result;
}

short CLEAD::DrawText(LPCTSTR szText, long ForegroundImage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x215, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		szText, ForegroundImage);
	return result;
}

short CLEAD::WindowLevel()
{
	short result;
	InvokeHelper(0x216, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::GetMinMaxVal()
{
	short result;
	InvokeHelper(0x217, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::GetMinMaxBits()
{
	short result;
	InvokeHelper(0x218, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::AnnLock(long hObject, LPCTSTR pszKey, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x219, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey, fSelected);
	return result;
}

short CLEAD::AnnUnlock(long hObject, LPCTSTR pszKey)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x21a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszKey);
	return result;
}

BOOL CLEAD::AnnGetLocked(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnUnrealize(long hObject, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x21c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fSelected);
	return result;
}

short CLEAD::AnnSaveTag(BOOL fWangMode, BOOL fSelected)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x21d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWangMode, fSelected);
	return result;
}

short CLEAD::AnnSetHyperlinkString(long hObject, short uType, LPCTSTR pszHyperlink)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x21e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, pszHyperlink);
	return result;
}

short CLEAD::AnnSetHyperlinkMsg(long hObject, short uType, long lParam1, long lParam2, long lParam3, long lParam4, long lParam5)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x21f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uType, lParam1, lParam2, lParam3, lParam4, lParam5);
	return result;
}

short CLEAD::AnnGetHyperlinkType(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x220, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

CString CLEAD::AnnGetHyperlinkString(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x221, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetHyperlinkParam(long hObject, short iParamIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x222, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, iParamIndex);
	return result;
}

short CLEAD::PreLoadFilters(short iFixedFilters, short iCachedFilters, LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x223, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFixedFilters, iCachedFilters, pszFilters);
	return result;
}

short CLEAD::IgnoreFilters(LPCTSTR pszFilters)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x224, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFilters);
	return result;
}

short CLEAD::ZoomIn()
{
	short result;
	InvokeHelper(0x225, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::ShowPanWin(BOOL bShow)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x226, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bShow);
	return result;
}

short CLEAD::DeletePage(LPCTSTR pszName, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x227, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage);
	return result;
}

short CLEAD::Picturize(LPCTSTR pszDirectory, short iFlags, float fCellWidth, float fCellHeight)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_R4 VTS_R4;
	InvokeHelper(0x228, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszDirectory, iFlags, fCellWidth, fCellHeight);
	return result;
}

short CLEAD::AnnEnumerate(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x229, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

short CLEAD::ContourFilter(short nThreshold, short nDeltaDirection, short nMaximumError, short nOption)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x22a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nThreshold, nDeltaDirection, nMaximumError, nOption);
	return result;
}

short CLEAD::WindowLevelFillLUT(unsigned long crStart, unsigned long crEnd, long nLow, long nHigh, short nLowBit, short nHighBit, long nMinValue, long nMaxValue, short nFactor, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_I4 VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x22b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crStart, crEnd, nLow, nHigh, nLowBit, nHighBit, nMinValue, nMaxValue, nFactor, lFlags);
	return result;
}

short CLEAD::AnnDestroy(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x22c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

long CLEAD::AnnCreate(short iType, BOOL bAutoInsert, BOOL bVisible)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x22d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iType, bAutoInsert, bVisible);
	return result;
}

short CLEAD::AnnInsert(long hContainer, long hObject, BOOL bStripContainer)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x22e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, hObject, bStripContainer);
	return result;
}

short CLEAD::AnnDefine(long hObject, float x, float y, short iState)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x22f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, x, y, iState);
	return result;
}

short CLEAD::AnnSetAutoDefaults(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x230, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

short CLEAD::SetMousePos(float x, float y, BOOL bUpdatePos)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x231, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y, bUpdatePos);
	return result;
}

short CLEAD::AnnSetUser(long hObject, LPCTSTR pOldUser, LPCTSTR pNewUser, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR VTS_BOOL;
	InvokeHelper(0x232, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pOldUser, pNewUser, bSelected);
	return result;
}

short CLEAD::AnnSetVisible(long hObject, BOOL bVisible, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BSTR;
	InvokeHelper(0x233, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bVisible, iFlags, pszUserList);
	return result;
}

BOOL CLEAD::AnnGetVisible(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x234, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetSelected(long hObject, BOOL bValue, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x235, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bValue, bSelected);
	return result;
}

short CLEAD::AnnGroup(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x236, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

short CLEAD::AnnUngroup(long hObject, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x237, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags, pszUserList);
	return result;
}

long CLEAD::AnnGetObjectFromTag(long hObject, long lTag, BOOL bSelected)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x238, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, lTag, bSelected);
	return result;
}

short CLEAD::AnnSetAutoMenuItemEnable(long hObject, short iType, short iItem, short iEnable, short iFlags, LPCTSTR pszUserList)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x239, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, iItem, iEnable, iFlags, pszUserList);
	return result;
}

short CLEAD::AnnGetAutoMenuItemEnable(long hObject, short iType, short iItem)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x23a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, iItem);
	return result;
}

short CLEAD::LoadArray(const VARIANT& vMem, short iBitsPerPixel, long lPage, long lPages, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x23b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, iBitsPerPixel, lPage, lPages, lSize);
	return result;
}

VARIANT CLEAD::SaveArray(short iFormat, short iBitsPerPixel, short iQuality)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x23c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality);
	return result;
}

short CLEAD::AnnLoadArray(const VARIANT& vMem, long lSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4;
	InvokeHelper(0x23d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, lSize, lPage);
	return result;
}

short CLEAD::AnnSaveArray(VARIANT* pvMem, short iFormat, BOOL bSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x23e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, iFormat, bSelected, iModify, lSavePage);
	return result;
}

long CLEAD::ArraySize(const VARIANT& vMem)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x23f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&vMem);
	return result;
}

short CLEAD::WriteComment(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x240, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLEAD::SetTag(long lTag, short iType, long lCount, const VARIANT& vData)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x241, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTag, iType, lCount, &vData);
	return result;
}

VARIANT CLEAD::GetTagData(long lTag)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x242, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		lTag);
	return result;
}

long CLEAD::GetTagCount(long lTag)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x243, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lTag);
	return result;
}

short CLEAD::GetTagType(long lTag)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x244, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTag);
	return result;
}

short CLEAD::WriteTag(LPCTSTR pszFile, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x245, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage);
	return result;
}

short CLEAD::ReadTag(LPCTSTR pszFile, long lPage, long lTag)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x246, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszFile, lPage, lTag);
	return result;
}

short CLEAD::StartMagGlass(float fWidth, float fHeight, short nZoom, unsigned long clrPen, unsigned long clrBack, BOOL bEllipse, float fBorderSize, BOOL b3D, short nCrosshair, BOOL bIgnoreRgn, BOOL bCenter)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_I4 VTS_I4 VTS_BOOL VTS_R4 VTS_BOOL VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x247, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, nZoom, clrPen, clrBack, bEllipse, fBorderSize, b3D, nCrosshair, bIgnoreRgn, bCenter);
	return result;
}

short CLEAD::StopMagGlass()
{
	short result;
	InvokeHelper(0x248, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::SetRgnMagicWand(float x, float y, short iTolerance, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_I2;
	InvokeHelper(0x249, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y, iTolerance, iCombineMode);
	return result;
}

short CLEAD::Smooth(long iLength, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x24a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iLength, uFlags);
	return result;
}

short CLEAD::LineRemove(long uFlags, long iMinLineLength, long iMaxLineWidth, long iWall, long iMaxWallPercent, long iGapLength, long iVariance, long uRemoveFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinLineLength, iMaxLineWidth, iWall, iMaxWallPercent, iGapLength, iVariance, uRemoveFlags);
	return result;
}

short CLEAD::BorderRemove(long uFlags, long uBorderToRemove, long iBorderPercent, long iWhiteNoiseLength, long iVariance)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, uBorderToRemove, iBorderPercent, iWhiteNoiseLength, iVariance);
	return result;
}

short CLEAD::InvertedText(long uFlags, long iMinInvertWidth, long iMinInvertHeight, long iMinBlackPercent, long iMaxBlackPercent)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinInvertWidth, iMinInvertHeight, iMinBlackPercent, iMaxBlackPercent);
	return result;
}

short CLEAD::DotRemove(long uFlags, long iMinDotWidth, long iMinDotHeight, long iMaxDotWidth, long iMaxDotHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinDotWidth, iMinDotHeight, iMaxDotWidth, iMaxDotHeight);
	return result;
}

short CLEAD::HolePunchRemove(long uFlags, long iMinHoleCount, long iMaxHoleCount, long iMinHoleWidth, long iMinHoleHeight, long iMaxHoleWidth, long iMaxHoleHeight, long iLocation)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uFlags, iMinHoleCount, iMaxHoleCount, iMinHoleWidth, iMinHoleHeight, iMaxHoleWidth, iMaxHoleHeight, iLocation);
	return result;
}

unsigned long CLEAD::GetBitmapPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x250, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetBitmapPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x250, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLEAD::GetRemapTable(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x251, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetRemapTable(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x251, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

long CLEAD::GetHistogramTable(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x252, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetHistogramTable(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x252, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

unsigned long CLEAD::GetUserPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x253, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetUserPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x253, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLEAD::GetColorPlanes(short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x254, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetColorPlanes(short iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x254, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

BOOL CLEAD::GetInfoPCDRes(short iIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x255, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		iIndex);
	return result;
}

float CLEAD::GetPolygonX(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x256, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetPolygonX(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x256, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetPolygonY(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x257, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetPolygonY(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x257, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

unsigned long CLEAD::GetAnimationPalette(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x258, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetAnimationPalette(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x258, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetLoadResolutionWidth(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x259, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

float CLEAD::GetLoadResolutionHeight(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

VARIANT CLEAD::GetComment(short iIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25b, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetComment(short iIndex, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x25b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, &newValue);
}

unsigned long CLEAD::GetPixel(float x, float y)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x25c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		x, y);
	return result;
}

void CLEAD::SetPixel(float x, float y, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x25c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 x, y, newValue);
}

unsigned long CLEAD::GetLevelLUT(long iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetLevelLUT(long iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x25d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetSaveResolutionWidth(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetSaveResolutionWidth(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x25e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetSaveResolutionHeight(short iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25f, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetSaveResolutionHeight(short iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x25f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetAnnRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x260, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLEAD::SetAnnRectLeft(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x260, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLEAD::GetAnnRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x261, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLEAD::SetAnnRectTop(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x261, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLEAD::GetAnnRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x262, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLEAD::SetAnnRectWidth(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x262, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

float CLEAD::GetAnnRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x263, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

void CLEAD::SetAnnRectHeight(long hObject, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x263, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 hObject, newValue);
}

unsigned long CLEAD::GetMagGlassMask(short iIndex)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x264, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetMagGlassMask(short iIndex, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x264, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

short CLEAD::AnnSetGrouping(long hObject, BOOL bAutoGroup, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2;
	InvokeHelper(0x265, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bAutoGroup, iFlags);
	return result;
}

BOOL CLEAD::AnnGetGrouping(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x266, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnAddUndoNode()
{
	short result;
	InvokeHelper(0x267, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::AnnUndo()
{
	short result;
	InvokeHelper(0x268, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CLEAD::PrintNewPage(long hDC)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x269, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 hDC);
}

short CLEAD::ClientToBitmap(float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x26a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y);
	return result;
}

short CLEAD::BitmapToClient(float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x26b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x, y);
	return result;
}

short CLEAD::Deskew(unsigned long crBack, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x26c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crBack, lFlags);
	return result;
}

short CLEAD::RemapHue(BOOL bUseMaskTable, BOOL bUseHTable, BOOL bUseSTable, BOOL bUseVTable)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x26d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bUseMaskTable, bUseHTable, bUseSTable, bUseVTable);
	return result;
}

short CLEAD::GetMaskTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26e, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetMaskTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x26e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLEAD::GetHTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26f, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetHTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x26f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLEAD::GetSTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x270, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetSTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x270, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLEAD::GetVTable(short iIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x271, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetVTable(short iIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x271, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLEAD::HSV_HfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x272, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

short CLEAD::HSV_SfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x273, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

short CLEAD::HSV_VfromRGB(unsigned long cr)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x274, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		cr);
	return result;
}

unsigned long CLEAD::RGBfromHSV(short nH, short nS, short nV)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x275, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nH, nS, nV);
	return result;
}

short CLEAD::SetRgnColorRGBRange(unsigned long crLower, unsigned long crUpper, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x276, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		crLower, crUpper, iCombineMode);
	return result;
}

short CLEAD::SetRgnColorHSVRange(short nH0, short nS0, short nV0, short nH1, short nS1, short nV1, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x277, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nH0, nS0, nV0, nH1, nS1, nV1, iCombineMode);
	return result;
}

short CLEAD::GetHistogramGray()
{
	short result;
	InvokeHelper(0x278, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CLEAD::GetHistogramGrayTable(long nIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x279, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		nIndex);
	return result;
}

void CLEAD::SetHistogramGrayTable(long nIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x279, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nIndex, nNewValue);
}

long CLEAD::GetDIB(long nType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType);
	return result;
}

short CLEAD::UpdateMagGlassShape(short nMagGlassShape, long hMagGlassRgn)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x27b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nMagGlassShape, hMagGlassRgn);
	return result;
}

short CLEAD::SaveOffset(LPCTSTR pszName, long iOffsetBegin, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x27c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iOffsetBegin, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLEAD::UpdateMagGlass(const VARIANT& vColorBuffer, const VARIANT& vMaskPlane, long nMaskPlaneStart, long nMaskPlaneEnd, BOOL bUpdateBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x27d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vColorBuffer, &vMaskPlane, nMaskPlaneStart, nMaskPlaneEnd, bUpdateBitmap);
	return result;
}

long CLEAD::AnnAccessObject(const VARIANT& aObjects, short iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I2;
	InvokeHelper(0x27e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&aObjects, iIndex);
	return result;
}

short CLEAD::J2KSetDefaults()
{
	short result;
	InvokeHelper(0x281, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::CustomSave(LPCTSTR pszName, short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x282, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLEAD::SetCustomCompressedData(const VARIANT& vCompressedData, long lCompressedDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x283, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vCompressedData, lCompressedDataSize);
	return result;
}

short CLEAD::CustomLoad(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x284, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages);
	return result;
}

short CLEAD::SetCustomUnCompressedData(const VARIANT& vUnCompressedData, long lUnCompressedDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x285, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vUnCompressedData, lUnCompressedDataSize);
	return result;
}

short CLEAD::ConvertHandleToVariant(VARIANT* pVariant, long hHandle, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4 VTS_I4;
	InvokeHelper(0x286, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pVariant, hHandle, lSize);
	return result;
}

short CLEAD::ConvertVariantToHandle(const VARIANT& Variant, long* phHandle, long* plSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_PI4 VTS_PI4;
	InvokeHelper(0x287, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&Variant, phHandle, plSize);
	return result;
}

short CLEAD::AnnHitTest(long hContainer, float x, float y, long* hObjectHit)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_PI4;
	InvokeHelper(0x288, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, x, y, hObjectHit);
	return result;
}

short CLEAD::AnnRemove(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x289, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSelectPoint(long hContainer, float x, float y)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4;
	InvokeHelper(0x28a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, x, y);
	return result;
}

short CLEAD::AnnSelectRect(long hContainer, float left, float top, float right, float bottom)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x28b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hContainer, left, top, right, bottom);
	return result;
}

short CLEAD::AnnSendToBack(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetBackColor(long hObject, unsigned long crBack, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x28d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, crBack, bSelected);
	return result;
}

short CLEAD::AnnGetFillMode(long hObject, short* pnFillMode, long* pnAlpha)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_PI4;
	InvokeHelper(0x28e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pnFillMode, pnAlpha);
	return result;
}

short CLEAD::AnnGetFillPattern(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x28f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetFontBold(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x290, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetFontItalic(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x291, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

CString CLEAD::AnnGetFontName(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x292, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetFontSize(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x293, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetFontStrikeThrough(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x294, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetFontUnderline(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x295, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLEAD::AnnGetForeColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x296, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetGaugeLength(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x297, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetLineStyle(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x298, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetLineWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x299, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetMetafile(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

CString CLEAD::AnnGetName(long hObject, BOOL* bShowName)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL;
	InvokeHelper(0x29b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, bShowName);
	return result;
}

short CLEAD::AnnGetNodes(long hObject, BOOL* bShowNodes)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL;
	InvokeHelper(0x29c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowNodes);
	return result;
}

float CLEAD::AnnGetOffsetX(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29d, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetOffsetY(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29e, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetPolyFillMode(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x29f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetPredefinedMetafile(short nType, BOOL* bEnhanced)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_PBOOL;
	InvokeHelper(0x2a0, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		nType, bEnhanced);
	return result;
}

CString CLEAD::AnnGetProtractorOptions(long hObject, BOOL* bAcute, short* nUnit, short* nPrecision, float* ArcRadius)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL VTS_PI2 VTS_PI2 VTS_PR4;
	InvokeHelper(0x2a1, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, bAcute, nUnit, nPrecision, ArcRadius);
	return result;
}

long CLEAD::AnnGetRgnHandle(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a2, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetROP2(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetScalarX(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a4, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLEAD::AnnGetScalarY(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a5, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

long CLEAD::AnnGetSecondaryBitmap(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetSelected(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnGetShowFlags(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

CString CLEAD::AnnGetText(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2a9, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetTopContainer(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2aa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

BOOL CLEAD::AnnGetTransparent(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ab, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLEAD::AnnGetTransparentColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ac, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

CString CLEAD::AnnGetUnit(long hObject, short* nUnit, short* nPrecision)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_PI2;
	InvokeHelper(0x2ad, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject, nUnit, nPrecision);
	return result;
}

long CLEAD::AnnGetWnd(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ae, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetWnd(long hObject, long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2af, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hWnd);
	return result;
}

short CLEAD::AnnSetFillMode(long hObject, short nFillMode, long nAlpha, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2b0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nFillMode, nAlpha, bSelected);
	return result;
}

short CLEAD::AnnSetFillPattern(long hObject, short nFillPattern, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2b1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nFillPattern, bSelected);
	return result;
}

short CLEAD::AnnSetFontBold(long hObject, BOOL bFontBold, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontBold, bSelected);
	return result;
}

short CLEAD::AnnSetFontItalic(long hObject, BOOL bFontItalic, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontItalic, bSelected);
	return result;
}

short CLEAD::AnnSetFontName(long hObject, LPCTSTR pszFontName, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2b4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszFontName, bSelected);
	return result;
}

short CLEAD::AnnSetFontSize(long hObject, float fFontSize, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2b5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fFontSize, bSelected);
	return result;
}

short CLEAD::AnnSetFontStrikeThrough(long hObject, BOOL bFontStrikeThrough, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontStrikeThrough, bSelected);
	return result;
}

short CLEAD::AnnSetFontUnderline(long hObject, BOOL bFontUnderline, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2b7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bFontUnderline, bSelected);
	return result;
}

short CLEAD::AnnSetForeColor(long hObject, unsigned long ForeColor, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2b8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, ForeColor, bSelected);
	return result;
}

short CLEAD::AnnSetGaugeLength(long hObject, float fGaugeLength, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2b9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fGaugeLength, bSelected);
	return result;
}

short CLEAD::AnnSetLineStyle(long hObject, short nLineStyle, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2ba, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nLineStyle, bSelected);
	return result;
}

short CLEAD::AnnSetLineWidth(long hObject, float fLineWidth, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2bb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fLineWidth, bSelected);
	return result;
}

short CLEAD::AnnSetMetafile(long hObject, long hMetafile, short nType, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2bc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hMetafile, nType, bSelected);
	return result;
}

short CLEAD::AnnSetName(long hObject, BOOL bShowName, LPCTSTR pszName, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2bd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowName, pszName, bSelected);
	return result;
}

short CLEAD::AnnSetNodes(long hObject, BOOL bShowNodes, short nGapNodes, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BOOL;
	InvokeHelper(0x2be, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bShowNodes, nGapNodes, bSelected);
	return result;
}

short CLEAD::AnnSetPoints(long hObject, const VARIANT& vXArray, const VARIANT& vYArray, long lPointCount)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_VARIANT VTS_I4;
	InvokeHelper(0x2bf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, &vXArray, &vYArray, lPointCount);
	return result;
}

short CLEAD::AnnSetPolyFillMode(long hObject, short nPolyFillMode, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nPolyFillMode, bSelected);
	return result;
}

short CLEAD::AnnSetPredefinedMetafile(short nType, long hMetafile)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x2c1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nType, hMetafile);
	return result;
}

short CLEAD::AnnSetProtractorOptions(long hObject, BOOL bAcute, short nUnit, LPCTSTR pszAbbrev, short nPrecision, float fArcRadius, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_I2 VTS_BSTR VTS_I2 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2c2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bAcute, nUnit, pszAbbrev, nPrecision, fArcRadius, bSelected);
	return result;
}

short CLEAD::AnnSetROP2(long hObject, short nROP2, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nROP2, bSelected);
	return result;
}

short CLEAD::AnnSetBitmap(long hObject, long hBitmap, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c4, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hBitmap, bSelected);
	return result;
}

short CLEAD::AnnSetSecondaryBitmap(long hObject, long hBitmap, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, hBitmap, bSelected);
	return result;
}

short CLEAD::AnnSetShowFlags(long hObject, short nShowFlags, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2c6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nShowFlags, bSelected);
	return result;
}

short CLEAD::AnnSetText(long hObject, LPCTSTR pszText, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x2c7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, pszText, bSelected);
	return result;
}

short CLEAD::AnnSetTransparent(long hObject, BOOL bTransparent, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2c8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bTransparent, bSelected);
	return result;
}

short CLEAD::AnnSetTransparentColor(long hObject, unsigned long crTransparent, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2c9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, crTransparent, bSelected);
	return result;
}

short CLEAD::AnnSetUnit(long hObject, short nUnit, LPCTSTR pszUnitAbbrev, short nPrecision, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR VTS_I2 VTS_BOOL;
	InvokeHelper(0x2ca, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, nUnit, pszUnitAbbrev, nPrecision, bSelected);
	return result;
}

short CLEAD::AnnSetScalarX(long hObject, float fScalarX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fScalarX, bSelected);
	return result;
}

short CLEAD::AnnSetScalarY(long hObject, float fScalarY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fScalarY, bSelected);
	return result;
}

float CLEAD::AnnGetBitmapDpiX(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2cd, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetBitmapDpiY(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ce, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetBitmapDpiX(long hObject, float fBitmapDpiX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2cf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fBitmapDpiX, bSelected);
	return result;
}

short CLEAD::AnnSetBitmapDpiY(long hObject, float fBitmapDpiY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, fBitmapDpiY, bSelected);
	return result;
}

float CLEAD::GetAnnSelectRectLeft(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d1, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLEAD::GetAnnSelectRectTop(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d2, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLEAD::GetAnnSelectRectWidth(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d3, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

float CLEAD::GetAnnSelectRectHeight(long hContainer)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d4, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hContainer);
	return result;
}

short CLEAD::AnnSetOffsetX(long hObject, float OffsetX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d5, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, OffsetX, bSelected);
	return result;
}

short CLEAD::AnnSetOffsetY(long hObject, float OffsetY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_BOOL;
	InvokeHelper(0x2d6, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, OffsetY, bSelected);
	return result;
}

float CLEAD::GetCurveX(long iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d7, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetCurveX(long iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x2d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

float CLEAD::GetCurveY(long iIndex)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d8, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetCurveY(long iIndex, float newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R4;
	InvokeHelper(0x2d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, newValue);
}

long CLEAD::GetBezierX(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLEAD::GetBezierY(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2da, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

short CLEAD::SetRgnCurve(short iFillMode, short iCombineMode)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x2db, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFillMode, iCombineMode);
	return result;
}

short CLEAD::CurveToBezier()
{
	short result;
	InvokeHelper(0x2dc, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLEAD::LoadResize(LPCTSTR pszName, float fWidth, float fHeight, short iFlags, short iBitsPerPixel)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_R4 VTS_R4 VTS_I2 VTS_I2;
	InvokeHelper(0x2dd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, fWidth, fHeight, iFlags, iBitsPerPixel);
	return result;
}

long CLEAD::AnnCreateItem(long hContainer, short iType, BOOL bVisible)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL;
	InvokeHelper(0x2de, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hContainer, iType, bVisible);
	return result;
}

unsigned long CLEAD::AnnGetAutoBackColor(long hObject, short iType)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x2df, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject, iType);
	return result;
}

short CLEAD::AnnSetAutoBackColor(long hObject, short iType, unsigned long crBack)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x2e0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iType, crBack);
	return result;
}

short CLEAD::AnnBringToFront(long hObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnCut(long hObject, short iFormat, BOOL fSelected, BOOL fEmpty)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2e2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFormat, fSelected, fEmpty);
	return result;
}

float CLEAD::AnnGetAngle(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e3, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetArea(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

unsigned long CLEAD::AnnGetBackColor(long hObject)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetBitmap(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnBoundingRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e7, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnBoundingRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e8, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnBoundingRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2e9, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnBoundingRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2ea, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetContainer(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2eb, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::AnnGetDistance(long hObject, float* Distance2)
{
	float result;
	static BYTE parms[] =
		VTS_I4 VTS_PR4;
	InvokeHelper(0x2ec, DISPATCH_METHOD, VT_R4, (void*)&result, parms,
		hObject, Distance2);
	return result;
}

short CLEAD::TransformFile(LPCTSTR pszNameSrc, LPCTSTR pszNameDst, short iTransform, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I2 VTS_I4;
	InvokeHelper(0x2ed, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszNameSrc, pszNameDst, iTransform, lPage);
	return result;
}

short CLEAD::WriteMarker(short iMarker, long lSize, const VARIANT& vData)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2ee, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iMarker, lSize, &vData);
	return result;
}

short CLEAD::GrayscaleExt(short iRedFact, short iGreenFact, short iBlueFact)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2ef, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRedFact, iGreenFact, iBlueFact);
	return result;
}

short CLEAD::ConvertToColoredGray(short iRedFact, short iGreenFact, short iBlueFact, short iRedGrayFact, short iGreenGrayFact, short iBlueGrayFact)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f0, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRedFact, iGreenFact, iBlueFact, iRedGrayFact, iGreenGrayFact, iBlueGrayFact);
	return result;
}

short CLEAD::BalanceColors(float fRedToRed, float fRedToGreen, float fRedToBlue, float fGreenToRed, float fGreenToGreen, float fGreenToBlue, float fBlueToRed, float fBlueToGreen, float fBlueToBlue)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x2f1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fRedToRed, fRedToGreen, fRedToBlue, fGreenToRed, fGreenToGreen, fGreenToBlue, fBlueToRed, fBlueToGreen, fBlueToBlue);
	return result;
}

short CLEAD::SwapColors(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f2, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::LineProfile(long xStart, long yStart, long xEnd, long yEnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f3, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		xStart, yStart, xEnd, yEnd);
	return result;
}

long CLEAD::GetLineProfileRed(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLEAD::GetLineProfileGreen(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

long CLEAD::GetLineProfileBlue(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

short CLEAD::GaussianFilter(short iRadius)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2f7, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iRadius);
	return result;
}

short CLEAD::UnsharpMask(short iAmount, short iRadius, short iThreshold, short iColorType)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f8, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iAmount, iRadius, iThreshold, iColorType);
	return result;
}

short CLEAD::LoadBuffer(long lBufferAddress, short iBitsPerPixel, long lPage, long lPages, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2f9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lBufferAddress, iBitsPerPixel, lPage, lPages, lSize);
	return result;
}

short CLEAD::SaveBuffer(short iFormat, short iBitsPerPixel, short iQuality, short iModify)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2fa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFormat, iBitsPerPixel, iQuality, iModify);
	return result;
}

short CLEAD::AnnDeletePage(LPCTSTR pszName, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2fb, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lPage);
	return result;
}

short CLEAD::AnnDeletePageMemory(long hMem, long* plSize, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_I4;
	InvokeHelper(0x2fc, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, plSize, lPage);
	return result;
}

short CLEAD::AnnDeletePageArray(VARIANT* pvMem, long lPage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4;
	InvokeHelper(0x2fd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, lPage);
	return result;
}

short CLEAD::AnnFileInfo(LPCTSTR pszName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2fe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName);
	return result;
}

short CLEAD::AnnFileInfoMemory(long hMem, long lSize)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2ff, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, lSize);
	return result;
}

short CLEAD::AnnFileInfoArray(const VARIANT& vMem)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x300, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem);
	return result;
}

BOOL CLEAD::AnnGetNameRestrict(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x301, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetNameRestrict(long hObject, BOOL bNameRestrict, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x302, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, bNameRestrict, bSelected);
	return result;
}

long CLEAD::AnnGetNameOffsetX(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x303, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnGetNameOffsetY(long hObject)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x304, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AnnSetNameOffsetX(long hObject, long NameOffsetX, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x305, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, NameOffsetX, bSelected);
	return result;
}

short CLEAD::AnnSetNameOffsetY(long hObject, long NameOffsetY, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x306, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, NameOffsetY, bSelected);
	return result;
}

float CLEAD::GetAnnNameBoundingRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x307, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameBoundingRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x308, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameBoundingRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x309, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameBoundingRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30a, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameRectLeft(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameRectTop(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameRectWidth(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

float CLEAD::GetAnnNameRectHeight(long hObject)
{
	float result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		hObject);
	return result;
}

short CLEAD::AddBitmaps(short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x30f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iFlags);
	return result;
}

short CLEAD::AntiAlias(short iThreshold, short iDim, short iFilter)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x310, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold, iDim, iFilter);
	return result;
}

short CLEAD::EdgeDetector(short iThreshold, short iFilter)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x311, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iThreshold, iFilter);
	return result;
}

short CLEAD::RemoveRedeye(unsigned long rcNewColor, short iThreshold, short iLightness)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x312, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		rcNewColor, iThreshold, iLightness);
	return result;
}

short CLEAD::ResizeRgn(short iDim, short iFlag, BOOL bAsFrame)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x313, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim, iFlag, bAsFrame);
	return result;
}

short CLEAD::AlphaBlend(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, short iOpacity)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I2;
	InvokeHelper(0x314, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iOpacity);
	return result;
}

short CLEAD::CreateFadedMask(long hBitmap, short iLength, short iFadeRate, short iStepSize, short iInflate, short iFlag, short iMaxGray, unsigned long crTransparent)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x315, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iLength, iFadeRate, iStepSize, iInflate, iFlag, iMaxGray, crTransparent);
	return result;
}

short CLEAD::FeatherAlphaBlend(float fLeft, float fTop, float fWidth, float fHeight, long hBitmapSrc, float fSrcLeft, float fSrcTop, long hBitmapMask)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x316, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmapSrc, fSrcLeft, fSrcTop, hBitmapMask);
	return result;
}

short CLEAD::MotionBlur(short iDim, long lAngle, BOOL bUnidirectional)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_BOOL;
	InvokeHelper(0x317, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iDim, lAngle, bUnidirectional);
	return result;
}

short CLEAD::PicturizeBitmapList(short iCellWidth, short iCellHeight, short iLightnessFact, long hList)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x318, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iCellWidth, iCellHeight, iLightnessFact, hList);
	return result;
}

short CLEAD::PicturizeSingle(long hBitmap, short iCellWidth, short iCellHeight, short iLightnessFact)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x319, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, iCellWidth, iCellHeight, iLightnessFact);
	return result;
}

short CLEAD::ConvertSignedToUnsigned(short iShift)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31a, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iShift);
	return result;
}

short CLEAD::LoadLayer(LPCTSTR pszName, short iBitsPerPixel, short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x31b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, iLayer);
	return result;
}

VARIANT CLEAD::GetBitmapClipSegments(float y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x31c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		y);
	return result;
}

void CLEAD::SetLayerLeft(short iLayer, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x31d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, newValue);
}

float CLEAD::GetLayerLeft(short iLayer)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31d, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetLayerTop(short iLayer, float newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_R4;
	InvokeHelper(0x31e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, newValue);
}

float CLEAD::GetLayerTop(short iLayer)
{
	float result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31e, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetLayerOpacity(short iLayer, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x31f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

short CLEAD::GetLayerOpacity(short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31f, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetLayerClipping(short iLayer, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x320, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

short CLEAD::GetLayerClipping(short iLayer)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x320, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetLayerBlendModeKey(short iLayer, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x321, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, lpszNewValue);
}

CString CLEAD::GetLayerBlendModeKey(short iLayer)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x321, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetLayerMaskBitmap(short iLayer, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x322, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iLayer, nNewValue);
}

long CLEAD::GetLayerMaskBitmap(short iLayer)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x322, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iLayer);
	return result;
}

void CLEAD::SetPixelData(float x, float y, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_VARIANT;
	InvokeHelper(0x323, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 x, y, &newValue);
}

VARIANT CLEAD::GetPixelData(float x, float y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x323, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		x, y);
	return result;
}

short CLEAD::GetFunctionalLookupTable(long nStart, long nEnd, short nFactor, short uFlag)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x324, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nStart, nEnd, nFactor, uFlag);
	return result;
}

long CLEAD::GetUserLUTCurveX(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x325, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetUserLUTCurveX(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x325, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

long CLEAD::GetUserLUTCurveY(long iIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x326, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iIndex);
	return result;
}

void CLEAD::SetUserLUTCurveY(long iIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x326, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iIndex, nNewValue);
}

short CLEAD::GetMaskTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x327, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLEAD::SetMaskTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x327, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLEAD::GetHTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x328, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLEAD::SetHTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x328, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLEAD::GetSTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x329, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLEAD::SetSTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x329, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLEAD::GetVTableL(long lIndex)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32a, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		lIndex);
	return result;
}

void CLEAD::SetVTableL(long lIndex, short nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x32a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lIndex, nNewValue);
}

short CLEAD::GetUserLookupTable(long* nPointCount)
{
	short result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x32b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		nPointCount);
	return result;
}

short CLEAD::CombineExt(float fLeft, float fTop, float fWidth, float fHeight, long hBitmap, float fSrcLeft, float fSrcTop, long iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I4 VTS_R4 VTS_R4 VTS_I4;
	InvokeHelper(0x32c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeft, fTop, fWidth, fHeight, hBitmap, fSrcLeft, fSrcTop, iFlags);
	return result;
}

short CLEAD::AddBorder(float fLeftThickness, float fTopThickness, float fRightThickness, float fBottomThickness, short nLocation, short nStyle, short nEffectStyle, long hTileBitmap, short nGradientStyle, unsigned long crGradientStart, 
		unsigned long crGradientEnd, short nCurveIntensity, BOOL bSoftCurve, BOOL bShadow, short nShadowSize, short nShadowDirection, BOOL bBumpyShadow)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_R4 VTS_R4 VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I2 VTS_BOOL VTS_BOOL VTS_I2 VTS_I2 VTS_BOOL;
	InvokeHelper(0x32d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fLeftThickness, fTopThickness, fRightThickness, fBottomThickness, nLocation, nStyle, nEffectStyle, hTileBitmap, nGradientStyle, crGradientStart, crGradientEnd, nCurveIntensity, bSoftCurve, bShadow, nShadowSize, nShadowDirection, 
		bBumpyShadow);
	return result;
}

short CLEAD::AddFrame(long hBitmapFrame, BOOL bKeepFrameState, BOOL bUseMask, unsigned long crMask, short SmoothEdge, short nLocation, short nQuality)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x32e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmapFrame, bKeepFrameState, bUseMask, crMask, SmoothEdge, nLocation, nQuality);
	return result;
}

short CLEAD::UpdateMagGlassFromHandle(long hBitmap, BOOL bUpdateBitmap)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x32f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hBitmap, bUpdateBitmap);
	return result;
}

short CLEAD::ShowMagGlass(BOOL bShowMagGlass)
{
	short result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x330, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		bShowMagGlass);
	return result;
}

short CLEAD::SetMagGlassPos(float fXPos, float fYPos)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4;
	InvokeHelper(0x331, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fXPos, fYPos);
	return result;
}

short CLEAD::LoadFileTile(LPCTSTR pszName, short iBitsPerPixel, long lPage, long lPages, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x332, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, iBitsPerPixel, lPage, lPages, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::LoadMemoryTile(long hMem, short iBitsPerPixel, long lPage, long lPages, long iSize, float fLeft, float fTop, float fWidth, float fHeight)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4 VTS_I4 VTS_I4 VTS_R4 VTS_R4 VTS_R4 VTS_R4;
	InvokeHelper(0x333, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hMem, iBitsPerPixel, lPage, lPages, iSize, fLeft, fTop, fWidth, fHeight);
	return result;
}

short CLEAD::GetArrayInfo(const VARIANT& vMem, long lPage, long iSize, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x334, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vMem, lPage, iSize, uFlags);
	return result;
}

short CLEAD::CreateUserBitmap(float fWidth, float fHeight, short iBitsPerPixel, const VARIANT& vData, long lDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_R4 VTS_R4 VTS_I2 VTS_VARIANT VTS_I4;
	InvokeHelper(0x335, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		fWidth, fHeight, iBitsPerPixel, &vData, lDataSize);
	return result;
}

short CLEAD::SetBitmapDataPointer(const VARIANT& vData, long lDataSize)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4;
	InvokeHelper(0x336, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vData, lDataSize);
	return result;
}

short CLEAD::CombineBitmapWarp(const VARIANT& vXDstArray, const VARIANT& vYDstArray, long lDstPointCount, long hBitmap, long lXSrcPt, long lYSrcPt, long nSrcWidth, long nSrcHeight, long uFlags)
{
	short result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x337, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		&vXDstArray, &vYDstArray, lDstPointCount, hBitmap, lXSrcPt, lYSrcPt, nSrcWidth, nSrcHeight, uFlags);
	return result;
}

short CLEAD::LoadOffset(LPCTSTR pszName, long lOffset, long lSize, short iBitsPerPixel, long lPage, long lPages)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x338, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lOffset, lSize, iBitsPerPixel, lPage, lPages);
	return result;
}

BOOL CLEAD::AnnGetNameVisible(long hObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x339, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hObject);
	return result;
}

long CLEAD::AnnHitTest2(long hContainer, float x, float y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_R4 VTS_R4;
	InvokeHelper(0x33a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hContainer, x, y);
	return result;
}

VARIANT CLEAD::AnnGetSelectList2()
{
	VARIANT result;
	InvokeHelper(0x33b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CLEAD::AnnSaveArray2(VARIANT* pvMem, short iFormat, BOOL bSelected, short iModify, long lSavePage)
{
	short result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I2 VTS_BOOL VTS_I2 VTS_I4;
	InvokeHelper(0x33c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pvMem, iFormat, bSelected, iModify, lSavePage);
	return result;
}

CString CLEAD::AnnGetName2(long hObject)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		hObject);
	return result;
}

CLEADMarkers CLEAD::LoadMarkers(LPCTSTR pszName, long lFlags)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x33e, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		pszName, lFlags);
	return CLEADMarkers(pDispatch);
}

CLEADMarkers CLEAD::CreateMarkers()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x33f, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CLEADMarkers(pDispatch);
}

short CLEAD::SetMarkers(LPDISPATCH pMarkers, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x340, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pMarkers, lFlags);
	return result;
}

CLEADMarkers CLEAD::GetMarkers(long lFlags)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x341, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		lFlags);
	return CLEADMarkers(pDispatch);
}

short CLEAD::WriteMetaData(LPCTSTR pszName, long lFlags)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x342, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pszName, lFlags);
	return result;
}

short CLEAD::AnnEncryptApply(long hObject, long uEncryptFlags, BOOL bSelected)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x343, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, uEncryptFlags, bSelected);
	return result;
}

short CLEAD::AnnDestroyMethod(long hObject, short iFlags)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x344, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hObject, iFlags);
	return result;
}

long CLEAD::AnnGetOptions()
{
	long result;
	InvokeHelper(0x345, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CLEAD::AnnSetOptions(long uOptions)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x346, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		uOptions);
	return result;
}

short CLEAD::SetMinMaxVal(long lMinVal, long lMaxVal)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x347, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lMinVal, lMaxVal);
	return result;
}

short CLEAD::SetMinMaxBits(short iMinBit, short iMaxBit)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x348, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		iMinBit, iMaxBit);
	return result;
}
